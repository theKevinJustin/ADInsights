<?xml version="1.0" encoding="utf-8"?><ManagementPack ContentReadable="true" SchemaVersion="2.0" OriginalSchemaVersion="1.1" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
  <Manifest>
    <Identity>
      <ID>Proactive.Microsoft.Windows.Server.AD.Account.Password.Customizations</ID>
      <Version>1.0.3.8</Version>
    </Identity>
    <Name>Proactive Microsoft Windows Server AD 2016 Account Password Customizations</Name>
    <References>
      <Reference Alias="Health">
        <ID>System.Health.Library</ID>
        <Version>7.0.8433.0</Version>
        <PublicKeyToken>31bf3856ad364e35</PublicKeyToken>
      </Reference>
      <Reference Alias="MWSAD6D">
        <ID>Microsoft.Windows.Server.AD.2016.Discovery</ID>
        <Version>10.0.0.0</Version>
        <PublicKeyToken>31bf3856ad364e35</PublicKeyToken>
      </Reference>
      <Reference Alias="SC">
        <ID>Microsoft.SystemCenter.Library</ID>
        <Version>7.0.8433.0</Version>
        <PublicKeyToken>31bf3856ad364e35</PublicKeyToken>
      </Reference>
      <Reference Alias="SCDW">
        <ID>Microsoft.SystemCenter.DataWarehouse.Library</ID>
        <Version>6.0.0.0</Version>
        <PublicKeyToken>31bf3856ad364e35</PublicKeyToken>
      </Reference>
      <Reference Alias="System">
        <ID>System.Library</ID>
        <Version>7.5.8501.0</Version>
        <PublicKeyToken>31bf3856ad364e35</PublicKeyToken>
      </Reference>
      <Reference Alias="Windows">
        <ID>Microsoft.Windows.Library</ID>
        <Version>7.5.8501.0</Version>
        <PublicKeyToken>31bf3856ad364e35</PublicKeyToken>
      </Reference>
    </References>
  </Manifest>
  <TypeDefinitions>
    <ModuleTypes>
      <DataSourceModuleType ID="Proactive.Security.Group.Global.Member.Changes.Script.DataSource" Accessibility="Internal" Batching="false">
        <Configuration>
          <xsd:element minOccurs="1" type="xsd:integer" name="IntervalSeconds" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="0" type="xsd:string" name="SyncTime" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="1" type="xsd:integer" name="TimeoutSeconds" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
        </Configuration>
        <OverrideableParameters>
          <OverrideableParameter ID="IntervalSeconds" Selector="$Config/IntervalSeconds$" ParameterType="int" />
          <OverrideableParameter ID="SyncTime" Selector="$Config/SyncTime$" ParameterType="string" />
          <OverrideableParameter ID="TimeoutSeconds" Selector="$Config/TimeoutSeconds$" ParameterType="int" />
        </OverrideableParameters>
        <ModuleImplementation Isolation="Any">
          <Composite>
            <MemberModules>
              <DataSource ID="Scheduler" TypeID="System!System.Scheduler">
                <Scheduler>
                  <SimpleReccuringSchedule>
                    <Interval Unit="Seconds">$Config/IntervalSeconds$</Interval>
                    <SyncTime>$Config/SyncTime$</SyncTime>
                  </SimpleReccuringSchedule>
                  <ExcludeDates />
                </Scheduler>
              </DataSource>
              <ProbeAction ID="PA" TypeID="Windows!Microsoft.Windows.PowerShellPropertyBagProbe">
                <ScriptName>Proactive.Security.Group.Global.Member.Changes.Script.DataSource.v10038.ps1</ScriptName>
                <ScriptBody>
#=================================================================================
#  Script to gather Security Group Global Member Changes
#
#  Author: Kevin Justin and Jason Windisch
#  v1.0
#=================================================================================


# Constants section - modify stuff here:
#=================================================================================
# Assign script name variable for use in event logging.  
# ScriptName should be the same as the ID of the module that the script is contained in
$ScriptName = "Proactive.Security.Group.Global.Member.Changes.Script.DataSource.v10038.ps1"
$EventID = "610"
#=================================================================================


# Starting Script section - All scripts get this
#=================================================================================
# Gather the start time of the script
$StartTime = Get-Date
#Set variable to be used in logging events
$whoami = whoami
# Load MOMScript API
$momapi = New-Object -comObject MOM.ScriptAPI
#Log script event that we are starting task
$momapi.LogScriptEvent($ScriptName,$EventID,0,"`n Script is starting. `n Running as ($whoami).")
#=================================================================================


# PropertyBag Script section - Monitoring scripts get this
#=================================================================================
# Load SCOM PropertyBag function
$bag = $momapi.CreatePropertyBag()
#=================================================================================


# Begin MAIN script section
#=================================================================================

#For a simple example - get files in Windows Temp:
$date = get-date -uFormat "%Y-%m-%d"

# Grab past 24 hours
if ( (get-date).DayOfWeek -ne "Monday" )
	{
	$Time = [DateTime](Get-Date).AddDays(-1)
	}
if ( (get-date).DayOfWeek -eq "Monday" )
	{
	$Time = [DateTime](Get-Date).AddDays(-3)
	}


$momapi.LogScriptEvent($ScriptName,$EventID,0,"`n Gather Proactive Security Group Global Member Changes for ($date).")
$Message = "Proactive Security Group Global Member Changes for ($date)."


# Get domain controllers list
 
# Define timeframe for report (default is 1 day)
$startDate = (get-date).AddDays(-1)
 
# Store group membership changes events from the security event logs in an array.

$events = Get-Eventlog -LogName Security -ComputerName localhost -after $startDate | where { $_.eventID -eq 4728 -or $_.eventID -eq 4729 }
 
# Loop through each stored event; print all changes to security global group members with when, who, what details.
$EventsArray = @() 
clear-host
foreach ($e in $events) {
    # Member Added to Group

    $Event = [PSCustomObject]@{
        Group   = $e.ReplacementStrings[2]
        When    = $e.TimeGenerated
        Who     = $e.ReplacementStrings[6]
        Action  = "Added"
        Account = $e.ReplacementStrings[0]
    }

 
    if (($e.EventID -eq 4728 )) {
        $Event.Action = "Added"
    }
    # Member Removed from Group
    if (($e.EventID -eq 4729 )) {
        $Event.Action = "Removed"
    }
    
    $EventsArray += $Event
}

$EventsArray | ft -AutoSize

#For a simple example - get files in Windows Temp:
[int]$TempCount = $EventsArray.Count

IF ($TempCount -gt 0)
{
  $Result = "BAD"
  $Message = "Group changes on DC for past 3 hours"
}
IF ($TempCount -eq 0)
{
  $Result = "GOOD"
  $Message = "ZERO group changes on DC for past 3 hours"
}


#Check the value of Result
IF ($Result -eq "GOOD")
{
  $momapi.LogScriptEvent($ScriptName,$EventID,0, "ZERO group changes on DC for past 3 hours")
  $bag.AddValue('Result',$Result)
}
IF ($Result -eq "BAD")
{
  $Message = @()
  $Message += $Message
  $Message += "Number of group changes = ($TempCount)"
  $Message += "#======================================"
  $Message += $EventsArray

	# Log Event as insurance
    $momapi.LogScriptEvent($ScriptName,$EventID,0, "$Message`n Number of group changes = ($TempCount)`n `n$EventsArray")
  $bag.AddValue('Result',$Result)
  $bag.AddValue('TempCount',$TempCount)
  $bag.AddValue('Message',$Message)
}

# Return all bags
$bag

#=================================================================================
# End MAIN script section
 
  
# End of script section
#=================================================================================
#Log an event for script ending and total execution time.
$EndTime = Get-Date
$ScriptTime = ($EndTime - $StartTime).TotalSeconds
$momapi.LogScriptEvent($ScriptName,$EventID,0,"`n Script Completed. `n Script Runtime: ($ScriptTime) seconds.")
#=================================================================================
# End of script
                </ScriptBody>
                <TimeoutSeconds>$Config/TimeoutSeconds$</TimeoutSeconds>
              </ProbeAction>
            </MemberModules>
            <Composition>
              <Node ID="PA">
                <Node ID="Scheduler" />
              </Node>
            </Composition>
          </Composite>
        </ModuleImplementation>
        <OutputType>System!System.PropertyBagData</OutputType>
      </DataSourceModuleType>
      <DataSourceModuleType ID="Proactive.Security.User.Change.Script.DataSource" Accessibility="Internal" Batching="false">
        <Configuration>
          <xsd:element minOccurs="1" type="xsd:integer" name="IntervalSeconds" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="0" type="xsd:string" name="SyncTime" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="1" type="xsd:integer" name="TimeoutSeconds" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
        </Configuration>
        <OverrideableParameters>
          <OverrideableParameter ID="IntervalSeconds" Selector="$Config/IntervalSeconds$" ParameterType="int" />
          <OverrideableParameter ID="SyncTime" Selector="$Config/SyncTime$" ParameterType="string" />
          <OverrideableParameter ID="TimeoutSeconds" Selector="$Config/TimeoutSeconds$" ParameterType="int" />
        </OverrideableParameters>
        <ModuleImplementation Isolation="Any">
          <Composite>
            <MemberModules>
              <DataSource ID="Scheduler" TypeID="System!System.Scheduler">
                <Scheduler>
                  <SimpleReccuringSchedule>
                    <Interval Unit="Seconds">$Config/IntervalSeconds$</Interval>
                    <SyncTime>$Config/SyncTime$</SyncTime>
                  </SimpleReccuringSchedule>
                  <ExcludeDates />
                </Scheduler>
              </DataSource>
              <ProbeAction ID="PA" TypeID="Windows!Microsoft.Windows.PowerShellPropertyBagProbe">
                <ScriptName>Proactive.Security.User.Change.Script.DataSource.v10038.ps1</ScriptName>
                <ScriptBody>
#=================================================================================
#  Script to gather Security User Changes
#
#  Author: Kevin Justin and Jason Windisch
#  v1.0
#=================================================================================


# Constants section - modify stuff here:
#=================================================================================
# Assign script name variable for use in event logging.  
# ScriptName should be the same as the ID of the module that the script is contained in
$ScriptName = "Proactive.Security.Group.Global.Member.Changes.Script.DataSource.v10038.ps1"
$EventID = "610"
#=================================================================================


# Starting Script section - All scripts get this
#=================================================================================
# Gather the start time of the script
$StartTime = Get-Date
#Set variable to be used in logging events
$whoami = whoami
# Load MOMScript API
$momapi = New-Object -comObject MOM.ScriptAPI
#Log script event that we are starting task
$momapi.LogScriptEvent($ScriptName,$EventID,0,"`n Script is starting. `n Running as ($whoami).")
#=================================================================================


# PropertyBag Script section - Monitoring scripts get this
#=================================================================================
# Load SCOM PropertyBag function
$bag = $momapi.CreatePropertyBag()
#=================================================================================


# Begin MAIN script section
#=================================================================================

#For a simple example - get files in Windows Temp:
$date = get-date -uFormat "%Y-%m-%d"

# Grab past 24 hours
if ( (get-date).DayOfWeek -ne "Monday" )
	{
	$Time = [DateTime](Get-Date).AddDays(-1)
	}
if ( (get-date).DayOfWeek -eq "Monday" )
	{
	$Time = [DateTime](Get-Date).AddDays(-3)
	}


$momapi.LogScriptEvent($ScriptName,$EventID,0,"`n Gather Proactive Security User account changes for ($date).")
$Message = "Proactive Security User Changes for ($date)."


# Get domain controllers list
 
# Define timeframe for report
$startDate = (get-date).AddHours(-1)

# Store group membership changes events from the security event logs in an array.
#$events = Get-Eventlog -LogName Security -ComputerName localhost -After $startDate | ? { $_.eventID -eq 4720 -or $_.eventID -eq 4726 }
$events = Get-Eventlog -LogName Security -After $startDate | ? { $_.eventID -eq 4720 -or $_.eventID -eq 4726 }

# Loop through each stored event; print all changes to security account created/Removed members with when, who, what details.
$EventsArray = @() 
clear-host
foreach ($e in $events) {​​​​​
    # Member Added to Group     
	$Event = [PSCustomObject]@{​​​​​
        When    = $e.TimeGenerated
        Account   = $e.ReplacementStrings[0]
        Action  = "Created"
        Who     = $e.ReplacementStrings[4]
    }​​​​​

    if (($e.EventID -eq 4720 )) {​​​​​
        $Event.Action = "Created"
    }​​​​​     if (($e.EventID -eq 4726 )) {​​​​​
        $Event.Action = "Deleted"
    }​​​​​

    $EventsArray += $Event
}​​​​​ 

$EventsArray | ft -AutoSize


#For a simple example - get files in Windows Temp:
[int]$TempCount = $EventsArray.Count

IF ($TempCount -gt 0)
{
  $Result = "BAD"
  $Message = "User account changes on DC for past hour"
}
IF ($TempCount -eq 0)
{
  $Result = "GOOD"
  $Message = "ZERO User account changes on DC for past hour"
}


#Check the value of Result
IF ($Result -eq "GOOD")
{
  $momapi.LogScriptEvent($ScriptName,$EventID,0, "ZERO user account changes on DC for past hour")
  $bag.AddValue('Result',$Result)
}
IF ($Result -eq "BAD")
{
  $Message = @()
  $Message += $Message
  $Message += "Number of group changes = ($TempCount)"
  $Message += "#======================================"
  $Message += $EventsArray

	# Log Event as insurance
    $momapi.LogScriptEvent($ScriptName,$EventID,0, "$Message`n Number of user account changes = ($TempCount)`n `n$EventsArray")
  $bag.AddValue('Result',$Result)
  $bag.AddValue('TempCount',$TempCount)
  $bag.AddValue('Message',$Message)
}

# Return all bags
$bag

#=================================================================================
# End MAIN script section
 
  
# End of script section
#=================================================================================
#Log an event for script ending and total execution time.
$EndTime = Get-Date
$ScriptTime = ($EndTime - $StartTime).TotalSeconds
$momapi.LogScriptEvent($ScriptName,$EventID,0,"`n Script Completed. `n Script Runtime: ($ScriptTime) seconds.")
#=================================================================================
# End of script
                </ScriptBody>
                <TimeoutSeconds>$Config/TimeoutSeconds$</TimeoutSeconds>
              </ProbeAction>
            </MemberModules>
            <Composition>
              <Node ID="PA">
                <Node ID="Scheduler" />
              </Node>
            </Composition>
          </Composite>
        </ModuleImplementation>
        <OutputType>System!System.PropertyBagData</OutputType>
      </DataSourceModuleType>
      <DataSourceModuleType ID="Microsoft.Windows.Server.AD.PasswordCheck.Monitor.DataSource" Accessibility="Internal" Batching="false">
        <Configuration>
          <xsd:element minOccurs="1" type="xsd:integer" name="IntervalSeconds" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="0" type="xsd:string" name="SyncTime" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="1" type="xsd:integer" name="TimeoutSeconds" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
        </Configuration>
        <OverrideableParameters>
          <OverrideableParameter ID="IntervalSeconds" Selector="$Config/IntervalSeconds$" ParameterType="int" />
          <OverrideableParameter ID="SyncTime" Selector="$Config/SyncTime$" ParameterType="string" />
          <OverrideableParameter ID="TimeoutSeconds" Selector="$Config/TimeoutSeconds$" ParameterType="int" />
        </OverrideableParameters>
        <ModuleImplementation Isolation="Any">
          <Composite>
            <MemberModules>
              <DataSource ID="Scheduler" TypeID="System!System.Scheduler">
                <Scheduler>
                  <WeeklySchedule>
                    <Windows>
                      <Daily>
                        <Start>10:42</Start>
                        <End>11:02</End>
                        <DaysOfWeekMask>1</DaysOfWeekMask>
                      </Daily>
                    </Windows>
                  </WeeklySchedule>
                  <ExcludeDates />
                </Scheduler>
              </DataSource>
              <ProbeAction ID="PA" TypeID="Windows!Microsoft.Windows.PowerShellPropertyBagTriggerOnlyProbe">
                <ScriptName>Microsoft.Windows.Server.AD.PasswordCheck.Monitor.DataSource.v10038.ps1</ScriptName>
                <ScriptBody>
#=================================================================================
#  AD Password check monitor script for password change/age/expiring
#
#  Author:  Kevin Justin
#  v1.0
#=================================================================================


# Constants section - modify stuff here:
#=================================================================================
# Assign script name variable for use in event logging.  
$ScriptName = "Microsoft.Windows.Server.AD.PasswordCheck.Monitor.DataSource.v10038.ps1"
$EventID = "606"
#=================================================================================


# Starting Script section - All scripts get this 
#=================================================================================
# Gather the start time of the script
$StartTime = Get-Date
#Set variable to be used in logging events 
$whoami = whoami 
# Load MOMScript API 
$momapi = New-Object -comObject MOM.ScriptAPI 
# Load PropertyBag function 
$bag = $momapi.CreatePropertyBag() 
#Log script event that we are starting task 
$momapi.LogScriptEvent($ScriptName,$EventID,0,"`n Script is starting. `n Running as ($whoami).")

#=================================================================================


# Begin MAIN script section
#=================================================================================
#Set the condition = bad.  This represents your script finding something wrong
$strCondition = "Bad"

$date = get-date -uFormat "%Y-%m-%d"

$momapi.LogScriptEvent($ScriptName,$EventID,0,"`n Gather Proactive AD Account issues for date ($date).")


$PWTime = [DateTime](Get-Date).AddDays(-30)
$PWLastSet = [DateTime](Get-Date).AddDays(-365)
$PWMonth = [DateTime](Get-Date).AddDays(30)
$PWWeek = [DateTime](Get-Date).AddDays(7)


# Create array for AppOwners
# $fruit = @('Apples','Oranges','Bananas')
# $AppOwners = @()
$AppOwners = @('AD','MECM','SCOM','SharePoint' )
# $AppOwners



#==============================================================
# SVC Service account expiration check
#==============================================================
$ALLAccountsToExpire = Get-ADUser -filter {Enabled -eq $True } –Properties "SamAccountName", "msDS-UserPasswordExpiryTimeComputed", "DisplayName"`
	| Select-Object -Property "SamAccountName",@{Name="ExpiryDate";Expression={[datetime]::FromFileTime($_."msDS-UserPasswordExpiryTimeComputed")}
	}



#==============================================================
# ALL Service accounts Password age (Last Set)
#==============================================================
$SVCAccountPasswordsLastSet = Get-ADUser -Filter {Enabled -eq $True -AND SamAccountName -like '*svc*' } `
	–Properties SamAccountName,passwordlastset,passwordneverexpires

# Debug output by select by name, password last set 
#$ALLAccountsToExpire
#$SVCAccountPasswordsLastSet | select SamAccountName,PasswordLastSet
#$SVCAccountPasswordsLastSet.Count

$SVCAccountPasswordsLastSetSorted = $SVCAccountPasswordsLastSet | sort -property PasswordLastSet -desc 
$SVCAccountPasswordsLastSetSorted.Count




#==============================================================
# Go through $AppOwners array for issues
#==============================================================
foreach ( $AppOwner in $AppOwners)
	{
	$DSMessage = "Proactive $($AppOwner) Service Account issues for date ($date)."


	$AppOwnerSVCAccountsToExpire = @()
	
	if ( $AppOwner -eq "MECM" )
		{
		#==============================================================
		# Specific team account expiration check
		#==============================================================
		$AppOwnerSVCAccountsToExpire = $ALLAccountsToExpire | ? { ( $_.SamAccountName -like "svc.cmagent*" ) `
			-OR ( $_.SamAccountName -eq "svc.sccmsql" ) `
			-OR ( $_.SamAccountName -like "svc.sccmsqlng*" ) `
			} | sort -property SamAccountName
		}

	if ( $AppOwner -eq "SCOM" )
		{
		#==============================================================
		# Second specific team account expiration check
		#==============================================================
		$AppOwnerSVCAccountsToExpire = $ALLAccountsToExpire | ? { ( $_.SamAccountName -like "svc.*.scom*" ) `
			-OR ( $_.SamAccountName -like "*scomda*" ) `
			-OR ( $_.SamAccountName -like "*scomdr*" ) `
			-OR ( $_.SamAccountName -like "*scomdw*" ) `
			-OR ( $_.SamAccountName -like "*gMSA*" ) `
			} | sort -property SamAccountName
		}

	if ( $AppOwner -eq "SharePoint" )
		{
		#==============================================================
		# SharePoint specific team account expiration check
		#==============================================================
		$AppOwnerSVCAccountsToExpire = $ALLAccountsToExpire | ? { ( $_.SamAccountName -like "svc.share2013scom" ) `
			-OR ( $_.SamAccountName -like "svc.sharescomwb" ) `
			-OR ( $_.SamAccountName -like "svc.share*scom*" ) `
			-OR ( $_.SamAccountName -like "*sharep*" ) `
			} | sort -property SamAccountName
		}

	if ( ( $AppOwner -ne "ID" ) -AND ( $AppOwner -ne "MECM" ) -AND ( $AppOwner -ne "SharePoint" ) )
		{
		#==============================================================
		# Standard AppOwner expiration check
		#==============================================================
		$AppOwnerSVCAccountsToExpire = $ALLAccountsToExpire | ? { ( $_.SamAccountName -like "svc.*$AppOwner*" ) `
			} | sort -property SamAccountName
		}


	# Password Age array
	$AppOwnerPasswordExpirationReport = @()

	foreach ($svcacct in $AppOwnerSVCAccountsToExpire)
		{
		# Check for null
		if ( !$svcacct.ExpiryDate )
			{
			#write-host "$($svcacct.SamAccountName)`tNULL Expiration"
			$AppOwnerPasswordExpirationReport += "$($svcacct.SamAccountName)`tNULL Expiration"
			#$momapi.LogScriptEvent($ScriptName,$EventID,1,"$($svcacct.SamAccountName)`tNULL Expiration")
			}
		elseif ( $svcacct.ExpiryDate -le $date )
			{
			#write-host "$($svcacct.SamAccountName)`t$($svcacct.ExpiryDate)"
			$AppOwnerPasswordExpirationReport += "$($svcacct.SamAccountName)`t$($svcacct.ExpiryDate)`tExpired"
			#$momapi.LogScriptEvent($ScriptName,$EventID,1,"$($svcacct.SamAccountName)`t$($svcacct.ExpiryDate)`tExpired")	
			}
		elseif ( $svcacct.ExpiryDate -le $PWMonth )
			{
			#write-host "$($svcacct.SamAccountName)`t$($svcacct.ExpiryDate)"
			$AppOwnerPasswordExpirationReport += "$($svcacct.SamAccountName)`t$($svcacct.ExpiryDate)`tExpires in the next 30 days"
			#$momapi.LogScriptEvent($ScriptName,$EventID,1,"$($svcacct.SamAccountName)`t$($svcacct.ExpiryDate)`tExpiration exists")
			if ( $svcacct.ExpiryDate -le $PWWeek )
				{
				#write-host "$($svcacct.SamAccountName)`t$($svcacct.ExpiryDate)"
				$AppOwnerPasswordExpirationReport += "$($svcacct.SamAccountName)`t $($svcacct.ExpiryDate)`tExpires less than a week"
				#$momapi.LogScriptEvent($ScriptName,$EventID,2,"$($svcacct.SamAccountName)`t$($svcacct.ExpiryDate)`tExpires less than a week")
				}
			}
		}


	if ( $AppOwnerPasswordExpirationReport.Count -eq 0 )
		{
		$AppOwnerPasswordExpirationReport += "$($AppOwners) All Service Accounts not expiring in the next month"
		}

	$AppOwnerPasswordExpirationReport




	# Password Age array
	$SVCPasswordAge = @()

	foreach ($svcacct in $SVCAccountPasswordsLastSetSorted)
		{
		# Check for null
		if ( !$svcacct.PasswordLastSet )
			{
			#write-host "$($svcacct.SamAccountName)`t$($svcacct.PasswordLastSet)`tNULL Expiration"
			$SVCPasswordAge += "$($svcacct.SamAccountName)`tNULL Expiration"
			#$momapi.LogScriptEvent($ScriptName,$EventID,1,"$($svcacct.SamAccountName)`tNULL Expiration")
			}
		# Check for yearly password change
		if ( ( $svcacct.PasswordLastSet -le $PWLastSet ) -AND ( $svcacct.PasswordLastSet ) )
			{
			#write-host "$($svcacct.SamAccountName) - Password set more than 365 days ago - $($svcacct.PasswordLastSet)`tExpiration"
			$SVCPasswordAge += "$($svcacct.SamAccountName)`t$($svcacct.PasswordLastSet)`tExpiration"
			#$momapi.LogScriptEvent($ScriptName,$EventID,1,"$($svcacct.SamAccountName)`t$($svcacct.PasswordLastSet)`tExpiration")
			}
		}


	$SVCPasswordAge
	$SVCPasswordAge.Count

	$SVCPasswordAgeSorted = $SVCPasswordAge | ? { $_ -like "*Expiration*" }
	$SVCPasswordAgeSorted.Count



	#==============================================================
	# Specific team account password age (last set) breakdown
	#==============================================================

	$AppOwnerSVCLastSet = @()
	
	if ( $AppOwner -eq "MECM" )
		{
		#==============================================================
		# Specific team account expiration check
		#==============================================================
		$AppOwnerSVCLastSet = $SVCAccountPasswordsLastSet | ? { ( $_.SamAccountName -like "svc.cmagent*" ) `
			-OR ( $_.SamAccountName -eq "svc.sccmsql" ) `
			-OR ( $_.SamAccountName -like "svc.sccmsql*" ) `
			} | sort -property SamAccountName
		}

	if ( $AppOwner -eq "SCOM" )
		{
		#==============================================================
		# Second specific team account expiration check
		#==============================================================
		$AppOwnerSVCAccountsToExpire = $ALLAccountsToExpire | ? { ( $_.SamAccountName -like "svc.*.scom*" ) `
			-OR ( $_.SamAccountName -like "*scomda*" ) `
			-OR ( $_.SamAccountName -like "*scomdr*" ) `
			-OR ( $_.SamAccountName -like "*scomdw*" ) `
			-OR ( $_.SamAccountName -like "*gMSA*" ) `
			} | sort -property SamAccountName
		}

	if ( $AppOwner -eq "SharePoint" )
		{
		#==============================================================
		# SharePoint specific team account expiration check
		#==============================================================
		$AppOwnerSVCLastSet = $SVCAccountPasswordsLastSet | ? { ( $_.SamAccountName -like "svc.share2013scom" ) `
			-OR ( $_.SamAccountName -like "svc.sharescomwb" ) `
			-OR ( $_.SamAccountName -like "svc.share*scom*" ) `
			-OR ( $_.SamAccountName -like "*sharep*" ) `
			} | sort -property SamAccountName
		}

	if ( ( $AppOwner -ne "ID" ) -AND ( $AppOwner -ne "MECM" ) -AND ( $AppOwner -ne "SharePoint" ) )
		{
		#==============================================================
		# Standard AppOwner check for Password last set
		#==============================================================
		$AppOwnerSVCLastSet = $SVCAccountPasswordsLastSet | ? { ( $_.SamAccountName -like "svc.*$AppOwner*" ) `
			} | sort -property SamAccountName
		}

	$AppOwnerSVCLastSet.Count

	if ( $AppOwnerSVCLastSet.Count -eq 0 )
		{
		$AppOwnerLastSetDetails += "$($AppOwners) All Service Accounts NO action required for Password last set"
		}

	if ( $AppOwnerSVCLastSet.Count -gt 0 )
		{
		$AppOwnerLastSetDetails = $AppOwnerSVCLastSet | sort -property PasswordLastSet -desc | select SamAccountName,PasswordLastSet,PasswordNeverExpires
		$AppOwnerLastSetDetails = $AppOwnerLastSetDetails | out-string
		}
	
		$AppOwnerLastSetSorted = $AppOwnerSVCLastSet | sort -property PasswordLastSet -desc 
		# Debug output by select by name, password last set
		#$AppOwnerLastSetSorted| select SamAccountName,PasswordLastSet,PasswordNeverExpires
		#$AppOwnerLastSetSorted.Count

		# Password Age array
		$AppOwnerSVCPasswordAge = @()

		foreach ($svcacct in $AppOwnerLastSetSorted)
			{
			# Check for null
			if ( !$svcacct.PasswordLastSet )
				{
				#write-host "$($svcacct.SamAccountName)`t$($svcacct.PasswordLastSet)`tNULL Expiration"
				$AppOwnerSVCPasswordAge += "$($svcacct.SamAccountName)`tNULL Expiration"
				#$momapi.LogScriptEvent($ScriptName,$EventID,1,"$($svcacct.SamAccountName)`tNULL Expiration")
				}
			# Check for yearly password change
			if ( ( $svcacct.PasswordLastSet -le $PWLastSet ) -AND ( $svcacct.PasswordLastSet ) )
				{
				#write-host "$($svcacct.SamAccountName) - Password set more than 365 days ago - $($svcacct.PasswordLastSet)`tPassword set more than 365 days ago"
				$AppOwnerSVCPasswordAge += "$($svcacct.SamAccountName)`t$($svcacct.PasswordLastSet)`tPassword set more than 365 days ago"
				#$momapi.LogScriptEvent($ScriptName,$EventID,1,"$($svcacct.SamAccountName)`t$($svcacct.PasswordLastSet)`tPassword set more than 365 days ago")
				}
			if ( $svcacct.PasswordLastSet -ge $PWLastSet )
				{
				#write-host "$($svcacct.SamAccountName) - Password set less than 365 days ago - $($svcacct.PasswordLastSet)`tPassword set less than 365 days ago"
				$AppOwnerSVCPasswordAge += "$($svcacct.SamAccountName)`t$($svcacct.PasswordLastSet)`tPassword set less than 365 days ago"
				#$momapi.LogScriptEvent($ScriptName,$EventID,0,"$($svcacct.SamAccountName)`t$($svcacct.PasswordLastSet)`tPassword set less than 365 days ago")
				}
			}

		$AppOwnerSVCPasswordAge
		$AppOwnerSVCPasswordAge.Count

		$AppOwnerSVCPasswordAgeSorted = $AppOwnerSVCPasswordAge | ? { $_ -like "*Expiration*" }
		$AppOwnerSVCPasswordAgeSorted.Count




	# Tally selections to validate data to build report
	$Test = $AppOwnerPasswordExpirationReport.Count + $AppOwnerSVCPasswordAgeSorted.Count


	$DSMessage = "Proactive $($AppOwner) Service Account issues for date ($date)."

	# 
	# Set up array for AD Account lockout/expiry report
	$ADAccountLockoutMessage = @()

	if ( $Test -eq 0 )
		{
		$ADAccountLockoutMessage += "ZERO Proactive $($AppOwner) Service Account issues for date ($date)."
		$momapi.LogScriptEvent($ScriptName,$EventID,0,"ZERO Proactive $($AppOwner) Service Account issues for date ($date).")
		}

	if ( $Test -gt 0 )
		{
		$ADAccountLockoutMessage += ""
		$ADAccountLockoutMessage += $DSMessage
		$ADAccountLockoutMessage += ""
		$ADAccountLockoutMessage += "# AD Account issues = $($Test)"
		$ADAccountLockoutMessage += "#================================================================"
		$ADAccountLockoutMessage += "# Service Account expiry = $($AppOwnerSVCAccountsToExpire.Count)"
		$ADAccountLockoutMessage += ""
		$ADAccountLockoutMessage += "# Service Accounts Passwords Last set = $($AppOwnerSVCAccountPasswordsLastSetSorted.Count)"
		$ADAccountLockoutMessage += "#================================================================"
		$ADAccountLockoutMessage += ""
		$ADAccountLockoutMessage += ""

		if ( $MECMSVCAccountsToExpire.Count -gt 0 )
			{
			$ADAccountLockoutMessage += "# $($AppOwner) SVC Accounts Password Expiry details"
			$ADAccountLockoutMessage += "#=============================================="
			$ADAccountLockoutMessage += $AppOwnerSVCAccountsToExpire
			$ADAccountLockoutMessage += "#=============================================="
			}

		if ( $MECMSVCPasswordAge.Count -gt 0 )
			{
			$ADAccountLockoutMessage += ""
			$ADAccountLockoutMessage += "# $($AppOwner) Password Last set audit"
			$ADAccountLockoutMessage += "#=============================================="
			$ADAccountLockoutMessage += $AppOwnerSVCPasswordAge
			$ADAccountLockoutMessage += "#=============================================="
			$ADAccountLockoutMessage += ""
			$ADAccountLockoutMessage += "# $($AppOwner) Password Last set details"
			$ADAccountLockoutMessage += "#=============================================="
			$ADAccountLockoutMessage += $AppOwnerLastSetDetails
			$ADAccountLockoutMessage += "#=============================================="
			}
		}

		$ADAccountLockoutMessage

		$ADAccountLockoutMessage = $ADAccountLockoutMessage | out-string

		$ADAccountLockoutMessage 

	# Log 
	$Summary = "$ADAccountLockoutMessage `n `nDisclaimer:  This daily summary report is to document the manual tasks used by NOSC to check AD and AD Replication health, Pending Reboot Report, Logical Disk errors,Expiring Certificates, Unhealthy Server/Agents, Unhealthy agent workflow/script alerts, and Servers in Maintenance Mode"


	$strCondition -eq "Good"
	$momapi.LogScriptEvent($ScriptName,$EventID,0,"$Summary")
	}

	$Message = "Array execution report completed against AppOwners"
	
	#$bag.AddValue('Result','GoodCondition')
	$bag.AddValue('Message',$Message)
	$bag.AddValue('Summary',$Summary)

	# Return all bags
	$bag


# End of script section
#=================================================================================
#Log an event for script ending and total execution time.
$EndTime = Get-Date
$ScriptTime = ($EndTime - $StartTime).TotalSeconds
$momapi.LogScriptEvent($ScriptName,$EventID,0,"`n Script Completed. `n Script Runtime: ($ScriptTime) seconds.")
#=================================================================================
# End of script
                </ScriptBody>
                <TimeoutSeconds>$Config/TimeoutSeconds$</TimeoutSeconds>
              </ProbeAction>
            </MemberModules>
            <Composition>
              <Node ID="PA">
                <Node ID="Scheduler" />
              </Node>
            </Composition>
          </Composite>
        </ModuleImplementation>
        <OutputType>System!System.PropertyBagData</OutputType>
      </DataSourceModuleType>
      <DataSourceModuleType ID="Microsoft.Windows.Server.AD.PasswordCheck.Script.DataSource" Accessibility="Internal" Batching="false">
        <Configuration>
          <xsd:element minOccurs="1" type="xsd:integer" name="TimeoutSeconds" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
        </Configuration>
        <OverrideableParameters>
          <OverrideableParameter ID="TimeoutSeconds" Selector="$Config/TimeoutSeconds$" ParameterType="int" />
        </OverrideableParameters>
        <ModuleImplementation Isolation="Any">
          <Composite>
            <MemberModules>
              <DataSource ID="Scheduler" TypeID="System!System.Scheduler">
                <Scheduler>
                  <WeeklySchedule>
                    <Windows>
                      <Daily>
                        <Start>10:07</Start>
                        <End>10:27</End>
                        <DaysOfWeekMask>62</DaysOfWeekMask>
                      </Daily>
                    </Windows>
                  </WeeklySchedule>
                  <ExcludeDates />
                </Scheduler>
              </DataSource>
              <ProbeAction ID="PA" TypeID="Windows!Microsoft.Windows.PowerShellPropertyBagProbe">
                <ScriptName>Microsoft.Windows.Server.AD.PasswordCheck.Script.DataSource.v10038.ps1</ScriptName>
                <ScriptBody>
#=================================================================================
#  AD Password check monitor script for password change/age/expiring
#
#  Author:  Kevin Justin
#  v1.0
#=================================================================================


# Constants section - modify stuff here:
#=================================================================================
# Assign script name variable for use in event logging.  
$ScriptName = "Microsoft.Windows.Server.AD.PasswordCheck.Script.DataSource.v10038.ps1"
$EventID = "607"
#=================================================================================


# Starting Script section - All scripts get this 
#=================================================================================
# Gather the start time of the script
$StartTime = Get-Date
#Set variable to be used in logging events 
$whoami = whoami 
# Load MOMScript API 
$momapi = New-Object -comObject MOM.ScriptAPI 
# Load PropertyBag function 
$bag = $momapi.CreatePropertyBag() 
#Log script event that we are starting task 
$momapi.LogScriptEvent($ScriptName,$EventID,0,"`n Script is starting. `n Running as ($whoami).")

#=================================================================================


# Begin MAIN script section
#=================================================================================
#Set the condition = bad.  This represents your script finding something wrong
$strCondition = "Bad"

$date = get-date -uFormat "%Y-%m-%d"

$momapi.LogScriptEvent($ScriptName,$EventID,0,"`n Gather Proactive AD Account issues for date ($date).")


$PWTime = [DateTime](Get-Date).AddDays(-30)
$PWLastSet = [DateTime](Get-Date).AddDays(-365)
$PWMonth = [DateTime](Get-Date).AddDays(30)
$PWWeek = [DateTime](Get-Date).AddDays(7)


# Create array for AppOwners
# $fruit = @('Apples','Oranges','Bananas')
# $AppOwners = @()
$AppOwners = @('AD','MECM','SCOM','SharePoint' )
# $AppOwners



#==============================================================
# SVC Service account expiration check
#==============================================================
$ALLAccountsToExpire = Get-ADUser -filter {Enabled -eq $True } –Properties "SamAccountName", "msDS-UserPasswordExpiryTimeComputed", "DisplayName"`
	| Select-Object -Property "SamAccountName",@{Name="ExpiryDate";Expression={[datetime]::FromFileTime($_."msDS-UserPasswordExpiryTimeComputed")}
	}



#==============================================================
# ALL Service accounts Password age (Last Set)
#==============================================================
$SVCAccountPasswordsLastSet = Get-ADUser -Filter {Enabled -eq $True -AND SamAccountName -like '*svc*' } `
	–Properties SamAccountName,passwordlastset,passwordneverexpires

# Debug output by select by name, password last set 
#$ALLAccountsToExpire
#$SVCAccountPasswordsLastSet | select SamAccountName,PasswordLastSet
#$SVCAccountPasswordsLastSet.Count

$SVCAccountPasswordsLastSetSorted = $SVCAccountPasswordsLastSet | sort -property PasswordLastSet -desc 
$SVCAccountPasswordsLastSetSorted.Count




#==============================================================
# Go through $AppOwners array for issues
#==============================================================
foreach ( $AppOwner in $AppOwners)
	{
	$DSMessage = "Proactive $($AppOwner) Service Account issues for date ($date)."


	$AppOwnerSVCAccountsToExpire = @()
	
	if ( $AppOwner -eq "MECM" )
		{
		#==============================================================
		# Specific team account expiration check
		#==============================================================
		$AppOwnerSVCAccountsToExpire = $ALLAccountsToExpire | ? { ( $_.SamAccountName -like "svc.cmagent*" ) `
			-OR ( $_.SamAccountName -eq "svc.sccmsql" ) `
			-OR ( $_.SamAccountName -like "svc.sccmsqlng*" ) `
			} | sort -property SamAccountName
		}

	if ( $AppOwner -eq "SCOM" )
		{
		#==============================================================
		# Second specific team account expiration check
		#==============================================================
		$AppOwnerSVCAccountsToExpire = $ALLAccountsToExpire | ? { ( $_.SamAccountName -like "svc.*.scom*" ) `
			-OR ( $_.SamAccountName -like "*scomda*" ) `
			-OR ( $_.SamAccountName -like "*scomdr*" ) `
			-OR ( $_.SamAccountName -like "*scomdw*" ) `
			-OR ( $_.SamAccountName -like "*gMSA*" ) `
			} | sort -property SamAccountName
		}

	if ( $AppOwner -eq "SharePoint" )
		{
		#==============================================================
		# SharePoint specific team account expiration check
		#==============================================================
		$AppOwnerSVCAccountsToExpire = $ALLAccountsToExpire | ? { ( $_.SamAccountName -like "svc.share2013scom" ) `
			-OR ( $_.SamAccountName -like "svc.sharescomwb" ) `
			-OR ( $_.SamAccountName -like "svc.share*scom*" ) `
			-OR ( $_.SamAccountName -like "*sharep*" ) `
			} | sort -property SamAccountName
		}

	if ( ( $AppOwner -ne "ID" ) -AND ( $AppOwner -ne "MECM" ) -AND ( $AppOwner -ne "SharePoint" ) )
		{
		#==============================================================
		# Standard AppOwner expiration check
		#==============================================================
		$AppOwnerSVCAccountsToExpire = $ALLAccountsToExpire | ? { ( $_.SamAccountName -like "svc.*$AppOwner*" ) `
			} | sort -property SamAccountName
		}


	# Password Age array
	$AppOwnerPasswordExpirationReport = @()

	foreach ($svcacct in $AppOwnerSVCAccountsToExpire)
		{
		# Check for null
		if ( !$svcacct.ExpiryDate )
			{
			#write-host "$($svcacct.SamAccountName)`tNULL Expiration"
			$AppOwnerPasswordExpirationReport += "$($svcacct.SamAccountName)`tNULL Expiration"
			#$momapi.LogScriptEvent($ScriptName,$EventID,1,"$($svcacct.SamAccountName)`tNULL Expiration")
			}
		elseif ( $svcacct.ExpiryDate -le $date )
			{
			#write-host "$($svcacct.SamAccountName)`t$($svcacct.ExpiryDate)"
			$AppOwnerPasswordExpirationReport += "$($svcacct.SamAccountName)`t$($svcacct.ExpiryDate)`tExpired"
			#$momapi.LogScriptEvent($ScriptName,$EventID,1,"$($svcacct.SamAccountName)`t$($svcacct.ExpiryDate)`tExpired")	
			}
		elseif ( $svcacct.ExpiryDate -le $PWMonth )
			{
			#write-host "$($svcacct.SamAccountName)`t$($svcacct.ExpiryDate)"
			$AppOwnerPasswordExpirationReport += "$($svcacct.SamAccountName)`t$($svcacct.ExpiryDate)`tExpires in the next 30 days"
			#$momapi.LogScriptEvent($ScriptName,$EventID,1,"$($svcacct.SamAccountName)`t$($svcacct.ExpiryDate)`tExpiration exists")
			if ( $svcacct.ExpiryDate -le $PWWeek )
				{
				#write-host "$($svcacct.SamAccountName)`t$($svcacct.ExpiryDate)"
				$AppOwnerPasswordExpirationReport += "$($svcacct.SamAccountName)`t $($svcacct.ExpiryDate)`tExpires less than a week"
				#$momapi.LogScriptEvent($ScriptName,$EventID,2,"$($svcacct.SamAccountName)`t$($svcacct.ExpiryDate)`tExpires less than a week")
				}
			}
		}


	if ( $AppOwnerPasswordExpirationReport.Count -eq 0 )
		{
		$AppOwnerPasswordExpirationReport += "$($AppOwners) All Service Accounts not expiring in the next month"
		}

	$AppOwnerPasswordExpirationReport




	# Password Age array
	$SVCPasswordAge = @()

	foreach ($svcacct in $SVCAccountPasswordsLastSetSorted)
		{
		# Check for null
		if ( !$svcacct.PasswordLastSet )
			{
			#write-host "$($svcacct.SamAccountName)`t$($svcacct.PasswordLastSet)`tNULL Expiration"
			$SVCPasswordAge += "$($svcacct.SamAccountName)`tNULL Expiration"
			#$momapi.LogScriptEvent($ScriptName,$EventID,1,"$($svcacct.SamAccountName)`tNULL Expiration")
			}
		# Check for yearly password change
		if ( ( $svcacct.PasswordLastSet -le $PWLastSet ) -AND ( $svcacct.PasswordLastSet ) )
			{
			#write-host "$($svcacct.SamAccountName) - Password set more than 365 days ago - $($svcacct.PasswordLastSet)`tExpiration"
			$SVCPasswordAge += "$($svcacct.SamAccountName)`t$($svcacct.PasswordLastSet)`tExpiration"
			#$momapi.LogScriptEvent($ScriptName,$EventID,1,"$($svcacct.SamAccountName)`t$($svcacct.PasswordLastSet)`tExpiration")
			}
		}


	$SVCPasswordAge
	$SVCPasswordAge.Count

	$SVCPasswordAgeSorted = $SVCPasswordAge | ? { $_ -like "*Expiration*" }
	$SVCPasswordAgeSorted.Count



	#==============================================================
	# Specific team account password age (last set) breakdown
	#==============================================================

	$AppOwnerSVCLastSet = @()
	
	if ( $AppOwner -eq "MECM" )
		{
		#==============================================================
		# Specific team account expiration check
		#==============================================================
		$AppOwnerSVCLastSet = $SVCAccountPasswordsLastSet | ? { ( $_.SamAccountName -like "svc.cmagent*" ) `
			-OR ( $_.SamAccountName -eq "svc.sccmsql" ) `
			-OR ( $_.SamAccountName -like "svc.sccmsql*" ) `
			} | sort -property SamAccountName
		}

	if ( $AppOwner -eq "SCOM" )
		{
		#==============================================================
		# Second specific team account expiration check
		#==============================================================
		$AppOwnerSVCAccountsToExpire = $ALLAccountsToExpire | ? { ( $_.SamAccountName -like "svc.*.scom*" ) `
			-OR ( $_.SamAccountName -like "*scomda*" ) `
			-OR ( $_.SamAccountName -like "*scomdr*" ) `
			-OR ( $_.SamAccountName -like "*scomdw*" ) `
			-OR ( $_.SamAccountName -like "*gMSA*" ) `
			} | sort -property SamAccountName
		}

	if ( $AppOwner -eq "SharePoint" )
		{
		#==============================================================
		# SharePoint specific team account expiration check
		#==============================================================
		$AppOwnerSVCLastSet = $SVCAccountPasswordsLastSet | ? { ( $_.SamAccountName -like "svc.share2013scom" ) `
			-OR ( $_.SamAccountName -like "svc.sharescomwb" ) `
			-OR ( $_.SamAccountName -like "svc.share*scom*" ) `
			-OR ( $_.SamAccountName -like "*sharep*" ) `
			} | sort -property SamAccountName
		}

	if ( ( $AppOwner -ne "ID" ) -AND ( $AppOwner -ne "MECM" ) -AND ( $AppOwner -ne "SharePoint" ) )
		{
		#==============================================================
		# Standard AppOwner check for Password last set
		#==============================================================
		$AppOwnerSVCLastSet = $SVCAccountPasswordsLastSet | ? { ( $_.SamAccountName -like "svc.*$AppOwner*" ) `
			} | sort -property SamAccountName
		}

	$AppOwnerSVCLastSet.Count

	if ( $AppOwnerSVCLastSet.Count -eq 0 )
		{
		$AppOwnerLastSetDetails += "$($AppOwners) All Service Accounts NO action required for Password last set"
		}

	if ( $AppOwnerSVCLastSet.Count -gt 0 )
		{
		$AppOwnerLastSetDetails = $AppOwnerSVCLastSet | sort -property PasswordLastSet -desc | select SamAccountName,PasswordLastSet,PasswordNeverExpires
		$AppOwnerLastSetDetails = $AppOwnerLastSetDetails | out-string
		}
	
		$AppOwnerLastSetSorted = $AppOwnerSVCLastSet | sort -property PasswordLastSet -desc 
		# Debug output by select by name, password last set
		#$AppOwnerLastSetSorted| select SamAccountName,PasswordLastSet,PasswordNeverExpires
		#$AppOwnerLastSetSorted.Count

		# Password Age array
		$AppOwnerSVCPasswordAge = @()

		foreach ($svcacct in $AppOwnerLastSetSorted)
			{
			# Check for null
			if ( !$svcacct.PasswordLastSet )
				{
				#write-host "$($svcacct.SamAccountName)`t$($svcacct.PasswordLastSet)`tNULL Expiration"
				$AppOwnerSVCPasswordAge += "$($svcacct.SamAccountName)`tNULL Expiration"
				#$momapi.LogScriptEvent($ScriptName,$EventID,1,"$($svcacct.SamAccountName)`tNULL Expiration")
				}
			# Check for yearly password change
			if ( ( $svcacct.PasswordLastSet -le $PWLastSet ) -AND ( $svcacct.PasswordLastSet ) )
				{
				#write-host "$($svcacct.SamAccountName) - Password set more than 365 days ago - $($svcacct.PasswordLastSet)`tPassword set more than 365 days ago"
				$AppOwnerSVCPasswordAge += "$($svcacct.SamAccountName)`t$($svcacct.PasswordLastSet)`tPassword set more than 365 days ago"
				#$momapi.LogScriptEvent($ScriptName,$EventID,1,"$($svcacct.SamAccountName)`t$($svcacct.PasswordLastSet)`tPassword set more than 365 days ago")
				}
			if ( $svcacct.PasswordLastSet -ge $PWLastSet )
				{
				#write-host "$($svcacct.SamAccountName) - Password set less than 365 days ago - $($svcacct.PasswordLastSet)`tPassword set less than 365 days ago"
				$AppOwnerSVCPasswordAge += "$($svcacct.SamAccountName)`t$($svcacct.PasswordLastSet)`tPassword set less than 365 days ago"
				#$momapi.LogScriptEvent($ScriptName,$EventID,0,"$($svcacct.SamAccountName)`t$($svcacct.PasswordLastSet)`tPassword set less than 365 days ago")
				}
			}

		$AppOwnerSVCPasswordAge
		$AppOwnerSVCPasswordAge.Count

		$AppOwnerSVCPasswordAgeSorted = $AppOwnerSVCPasswordAge | ? { $_ -like "*Expiration*" }
		$AppOwnerSVCPasswordAgeSorted.Count




	# Tally selections to validate data to build report
	$Test = $AppOwnerPasswordExpirationReport.Count + $AppOwnerSVCPasswordAgeSorted.Count


	$DSMessage = "Proactive $($AppOwner) Service Account issues for date ($date)."

	# 
	# Set up array for AD Account lockout/expiry report
	$ADAccountLockoutMessage = @()

	if ( $Test -eq 0 )
		{
		$ADAccountLockoutMessage += "ZERO Proactive $($AppOwner) Service Account issues for date ($date)."
		$momapi.LogScriptEvent($ScriptName,$EventID,0,"ZERO Proactive $($AppOwner) Service Account issues for date ($date).")
		}

	if ( $Test -gt 0 )
		{
		$ADAccountLockoutMessage += ""
		$ADAccountLockoutMessage += $DSMessage
		$ADAccountLockoutMessage += ""
		$ADAccountLockoutMessage += "# AD Account issues = $($Test)"
		$ADAccountLockoutMessage += "#================================================================"
		$ADAccountLockoutMessage += "# Service Account expiry = $($AppOwnerSVCAccountsToExpire.Count)"
		$ADAccountLockoutMessage += ""
		$ADAccountLockoutMessage += "# Service Accounts Passwords Last set = $($AppOwnerSVCAccountPasswordsLastSetSorted.Count)"
		$ADAccountLockoutMessage += "#================================================================"
		$ADAccountLockoutMessage += ""
		$ADAccountLockoutMessage += ""

		if ( $MECMSVCAccountsToExpire.Count -gt 0 )
			{
			$ADAccountLockoutMessage += "# $($AppOwner) SVC Accounts Password Expiry details"
			$ADAccountLockoutMessage += "#=============================================="
			$ADAccountLockoutMessage += $AppOwnerSVCAccountsToExpire
			$ADAccountLockoutMessage += "#=============================================="
			}

		if ( $MECMSVCPasswordAge.Count -gt 0 )
			{
			$ADAccountLockoutMessage += ""
			$ADAccountLockoutMessage += "# $($AppOwner) Password Last set audit"
			$ADAccountLockoutMessage += "#=============================================="
			$ADAccountLockoutMessage += $AppOwnerSVCPasswordAge
			$ADAccountLockoutMessage += "#=============================================="
			$ADAccountLockoutMessage += ""
			$ADAccountLockoutMessage += "# $($AppOwner) Password Last set details"
			$ADAccountLockoutMessage += "#=============================================="
			$ADAccountLockoutMessage += $AppOwnerLastSetDetails
			$ADAccountLockoutMessage += "#=============================================="
			}
		}

		$ADAccountLockoutMessage

		$ADAccountLockoutMessage = $ADAccountLockoutMessage | out-string

		$ADAccountLockoutMessage 

	# Log 
	$Summary = "$ADAccountLockoutMessage `n `nDisclaimer:  This daily summary report is to document the manual tasks used by NOSC to check AD and AD Replication health, Pending Reboot Report, Logical Disk errors,Expiring Certificates, Unhealthy Server/Agents, Unhealthy agent workflow/script alerts, and Servers in Maintenance Mode"


	$strCondition -eq "Good"
	$momapi.LogScriptEvent($ScriptName,$EventID,0,"$Summary")
	}

	$Message = "Array execution report completed against AppOwners"
	
	#$bag.AddValue('Result','GoodCondition')
	$bag.AddValue('Message',$Message)
	$bag.AddValue('Summary',$Summary)

	# Return all bags
	$bag


# End of script section
#=================================================================================
#Log an event for script ending and total execution time.
$EndTime = Get-Date
$ScriptTime = ($EndTime - $StartTime).TotalSeconds
$momapi.LogScriptEvent($ScriptName,$EventID,0,"`n Script Completed. `n Script Runtime: ($ScriptTime) seconds.")
#=================================================================================
# End of script
                </ScriptBody>
                <TimeoutSeconds>$Config/TimeoutSeconds$</TimeoutSeconds>
              </ProbeAction>
            </MemberModules>
            <Composition>
              <Node ID="PA">
                <Node ID="Scheduler" />
              </Node>
            </Composition>
          </Composite>
        </ModuleImplementation>
        <OutputType>System!System.PropertyBagData</OutputType>
      </DataSourceModuleType>
      <WriteActionModuleType ID="Microsoft.Windows.Server.AD.PasswordCheck.Monitor.WA" Accessibility="Internal" Batching="false">
        <Configuration>
          <xsd:element minOccurs="1" name="TimeoutSeconds" type="xsd:integer" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
        </Configuration>
        <OverrideableParameters>
          <OverrideableParameter ID="TimeoutSeconds" Selector="$Config/TimeoutSeconds$" ParameterType="int" />
        </OverrideableParameters>
        <ModuleImplementation Isolation="Any">
          <Composite>
            <MemberModules>
              <WriteAction ID="PSWA" TypeID="Windows!Microsoft.Windows.PowerShellWriteAction">
                <ScriptName>Microsoft.Windows.Server.AD.PasswordCheck.Monitor.WA.v10038.ps1</ScriptName>
                <ScriptBody>
#=================================================================================
#  AD Password check monitor script for password change/age/expiring
#
#  Author:  Kevin Justin
#  v1.0
#=================================================================================


# Constants section - modify stuff here:
#=================================================================================
# Assign script name variable for use in event logging.  
$ScriptName = "Microsoft.Windows.Server.AD.PasswordCheck.Monitor.WA.v10038.ps1"
$EventID = "606"
#=================================================================================


# Starting Script section - All scripts get this 
#=================================================================================
# Gather the start time of the script
$StartTime = Get-Date
#Set variable to be used in logging events 
$whoami = whoami 
# Load MOMScript API 
$momapi = New-Object -comObject MOM.ScriptAPI 
# Load PropertyBag function 
$bag = $momapi.CreatePropertyBag() 
#Log script event that we are starting task 
$momapi.LogScriptEvent($ScriptName,$EventID,0,"`n Script is starting. `n Running as ($whoami).")

#=================================================================================


# Begin MAIN script section
#=================================================================================
#Set the condition = bad.  This represents your script finding something wrong
$strCondition = "Bad"

$date = get-date -uFormat "%Y-%m-%d"

$momapi.LogScriptEvent($ScriptName,$EventID,0,"`n Gather Proactive AD Account issues for date ($date).")


$PWTime = [DateTime](Get-Date).AddDays(-30)
$PWLastSet = [DateTime](Get-Date).AddDays(-365)
$PWMonth = [DateTime](Get-Date).AddDays(30)
$PWWeek = [DateTime](Get-Date).AddDays(7)


# Create array for AppOwners
# $fruit = @('Apples','Oranges','Bananas')
# $AppOwners = @()
$AppOwners = @('AD','MECM','SCOM','SharePoint' )
# $AppOwners



#==============================================================
# SVC Service account expiration check
#==============================================================
$ALLAccountsToExpire = Get-ADUser -filter {Enabled -eq $True } –Properties "SamAccountName", "msDS-UserPasswordExpiryTimeComputed", "DisplayName"`
	| Select-Object -Property "SamAccountName",@{Name="ExpiryDate";Expression={[datetime]::FromFileTime($_."msDS-UserPasswordExpiryTimeComputed")}
	}



#==============================================================
# ALL Service accounts Password age (Last Set)
#==============================================================
$SVCAccountPasswordsLastSet = Get-ADUser -Filter {Enabled -eq $True -AND SamAccountName -like '*svc*' } `
	–Properties SamAccountName,passwordlastset,passwordneverexpires

# Debug output by select by name, password last set 
#$ALLAccountsToExpire
#$SVCAccountPasswordsLastSet | select SamAccountName,PasswordLastSet
#$SVCAccountPasswordsLastSet.Count

$SVCAccountPasswordsLastSetSorted = $SVCAccountPasswordsLastSet | sort -property PasswordLastSet -desc 
$SVCAccountPasswordsLastSetSorted.Count




#==============================================================
# Go through $AppOwners array for issues
#==============================================================
foreach ( $AppOwner in $AppOwners)
	{
	$DSMessage = "Proactive $($AppOwner) Service Account issues for date ($date)."


	$AppOwnerSVCAccountsToExpire = @()
	
	if ( $AppOwner -eq "MECM" )
		{
		#==============================================================
		# Specific team account expiration check
		#==============================================================
		$AppOwnerSVCAccountsToExpire = $ALLAccountsToExpire | ? { ( $_.SamAccountName -like "svc.cmagent*" ) `
			-OR ( $_.SamAccountName -eq "svc.sccmsql" ) `
			-OR ( $_.SamAccountName -like "svc.sccmsqlng*" ) `
			} | sort -property SamAccountName
		}

	if ( $AppOwner -eq "SCOM" )
		{
		#==============================================================
		# Second specific team account expiration check
		#==============================================================
		$AppOwnerSVCAccountsToExpire = $ALLAccountsToExpire | ? { ( $_.SamAccountName -like "svc.*.scom*" ) `
			-OR ( $_.SamAccountName -like "*scomda*" ) `
			-OR ( $_.SamAccountName -like "*scomdr*" ) `
			-OR ( $_.SamAccountName -like "*scomdw*" ) `
			-OR ( $_.SamAccountName -like "*gMSA*" ) `
			} | sort -property SamAccountName
		}

	if ( $AppOwner -eq "SharePoint" )
		{
		#==============================================================
		# SharePoint specific team account expiration check
		#==============================================================
		$AppOwnerSVCAccountsToExpire = $ALLAccountsToExpire | ? { ( $_.SamAccountName -like "svc.share2013scom" ) `
			-OR ( $_.SamAccountName -like "svc.sharescomwb" ) `
			-OR ( $_.SamAccountName -like "svc.share*scom*" ) `
			-OR ( $_.SamAccountName -like "*sharep*" ) `
			} | sort -property SamAccountName
		}

	if ( ( $AppOwner -ne "ID" ) -AND ( $AppOwner -ne "MECM" ) -AND ( $AppOwner -ne "SharePoint" ) )
		{
		#==============================================================
		# Standard AppOwner expiration check
		#==============================================================
		$AppOwnerSVCAccountsToExpire = $ALLAccountsToExpire | ? { ( $_.SamAccountName -like "svc.*$AppOwner*" ) `
			} | sort -property SamAccountName
		}


	# Password Age array
	$AppOwnerPasswordExpirationReport = @()

	foreach ($svcacct in $AppOwnerSVCAccountsToExpire)
		{
		# Check for null
		if ( !$svcacct.ExpiryDate )
			{
			#write-host "$($svcacct.SamAccountName)`tNULL Expiration"
			$AppOwnerPasswordExpirationReport += "$($svcacct.SamAccountName)`tNULL Expiration"
			#$momapi.LogScriptEvent($ScriptName,$EventID,1,"$($svcacct.SamAccountName)`tNULL Expiration")
			}
		elseif ( $svcacct.ExpiryDate -le $date )
			{
			#write-host "$($svcacct.SamAccountName)`t$($svcacct.ExpiryDate)"
			$AppOwnerPasswordExpirationReport += "$($svcacct.SamAccountName)`t$($svcacct.ExpiryDate)`tExpired"
			#$momapi.LogScriptEvent($ScriptName,$EventID,1,"$($svcacct.SamAccountName)`t$($svcacct.ExpiryDate)`tExpired")	
			}
		elseif ( $svcacct.ExpiryDate -le $PWMonth )
			{
			#write-host "$($svcacct.SamAccountName)`t$($svcacct.ExpiryDate)"
			$AppOwnerPasswordExpirationReport += "$($svcacct.SamAccountName)`t$($svcacct.ExpiryDate)`tExpires in the next 30 days"
			#$momapi.LogScriptEvent($ScriptName,$EventID,1,"$($svcacct.SamAccountName)`t$($svcacct.ExpiryDate)`tExpiration exists")
			if ( $svcacct.ExpiryDate -le $PWWeek )
				{
				#write-host "$($svcacct.SamAccountName)`t$($svcacct.ExpiryDate)"
				$AppOwnerPasswordExpirationReport += "$($svcacct.SamAccountName)`t $($svcacct.ExpiryDate)`tExpires less than a week"
				#$momapi.LogScriptEvent($ScriptName,$EventID,2,"$($svcacct.SamAccountName)`t$($svcacct.ExpiryDate)`tExpires less than a week")
				}
			}
		}


	if ( $AppOwnerPasswordExpirationReport.Count -eq 0 )
		{
		$AppOwnerPasswordExpirationReport += "$($AppOwners) All Service Accounts not expiring in the next month"
		}

	$AppOwnerPasswordExpirationReport




	# Password Age array
	$SVCPasswordAge = @()

	foreach ($svcacct in $SVCAccountPasswordsLastSetSorted)
		{
		# Check for null
		if ( !$svcacct.PasswordLastSet )
			{
			#write-host "$($svcacct.SamAccountName)`t$($svcacct.PasswordLastSet)`tNULL Expiration"
			$SVCPasswordAge += "$($svcacct.SamAccountName)`tNULL Expiration"
			#$momapi.LogScriptEvent($ScriptName,$EventID,1,"$($svcacct.SamAccountName)`tNULL Expiration")
			}
		# Check for yearly password change
		if ( ( $svcacct.PasswordLastSet -le $PWLastSet ) -AND ( $svcacct.PasswordLastSet ) )
			{
			#write-host "$($svcacct.SamAccountName) - Password set more than 365 days ago - $($svcacct.PasswordLastSet)`tExpiration"
			$SVCPasswordAge += "$($svcacct.SamAccountName)`t$($svcacct.PasswordLastSet)`tExpiration"
			#$momapi.LogScriptEvent($ScriptName,$EventID,1,"$($svcacct.SamAccountName)`t$($svcacct.PasswordLastSet)`tExpiration")
			}
		}


	$SVCPasswordAge
	$SVCPasswordAge.Count

	$SVCPasswordAgeSorted = $SVCPasswordAge | ? { $_ -like "*Expiration*" }
	$SVCPasswordAgeSorted.Count



	#==============================================================
	# Specific team account password age (last set) breakdown
	#==============================================================

	$AppOwnerSVCLastSet = @()
	
	if ( $AppOwner -eq "MECM" )
		{
		#==============================================================
		# Specific team account expiration check
		#==============================================================
		$AppOwnerSVCLastSet = $SVCAccountPasswordsLastSet | ? { ( $_.SamAccountName -like "svc.cmagent*" ) `
			-OR ( $_.SamAccountName -eq "svc.sccmsql" ) `
			-OR ( $_.SamAccountName -like "svc.sccmsql*" ) `
			} | sort -property SamAccountName
		}

	if ( $AppOwner -eq "SCOM" )
		{
		#==============================================================
		# Second specific team account expiration check
		#==============================================================
		$AppOwnerSVCAccountsToExpire = $ALLAccountsToExpire | ? { ( $_.SamAccountName -like "svc.*.scom*" ) `
			-OR ( $_.SamAccountName -like "*scomda*" ) `
			-OR ( $_.SamAccountName -like "*scomdr*" ) `
			-OR ( $_.SamAccountName -like "*scomdw*" ) `
			-OR ( $_.SamAccountName -like "*gMSA*" ) `
			} | sort -property SamAccountName
		}

	if ( $AppOwner -eq "SharePoint" )
		{
		#==============================================================
		# SharePoint specific team account expiration check
		#==============================================================
		$AppOwnerSVCLastSet = $SVCAccountPasswordsLastSet | ? { ( $_.SamAccountName -like "svc.share2013scom" ) `
			-OR ( $_.SamAccountName -like "svc.sharescomwb" ) `
			-OR ( $_.SamAccountName -like "svc.share*scom*" ) `
			-OR ( $_.SamAccountName -like "*sharep*" ) `
			} | sort -property SamAccountName
		}

	if ( ( $AppOwner -ne "ID" ) -AND ( $AppOwner -ne "MECM" ) -AND ( $AppOwner -ne "SharePoint" ) )
		{
		#==============================================================
		# Standard AppOwner check for Password last set
		#==============================================================
		$AppOwnerSVCLastSet = $SVCAccountPasswordsLastSet | ? { ( $_.SamAccountName -like "svc.*$AppOwner*" ) `
			} | sort -property SamAccountName
		}

	$AppOwnerSVCLastSet.Count

	if ( $AppOwnerSVCLastSet.Count -eq 0 )
		{
		$AppOwnerLastSetDetails += "$($AppOwners) All Service Accounts NO action required for Password last set"
		}

	if ( $AppOwnerSVCLastSet.Count -gt 0 )
		{
		$AppOwnerLastSetDetails = $AppOwnerSVCLastSet | sort -property PasswordLastSet -desc | select SamAccountName,PasswordLastSet,PasswordNeverExpires
		$AppOwnerLastSetDetails = $AppOwnerLastSetDetails | out-string
		}
	
		$AppOwnerLastSetSorted = $AppOwnerSVCLastSet | sort -property PasswordLastSet -desc 
		# Debug output by select by name, password last set
		#$AppOwnerLastSetSorted| select SamAccountName,PasswordLastSet,PasswordNeverExpires
		#$AppOwnerLastSetSorted.Count

		# Password Age array
		$AppOwnerSVCPasswordAge = @()

		foreach ($svcacct in $AppOwnerLastSetSorted)
			{
			# Check for null
			if ( !$svcacct.PasswordLastSet )
				{
				#write-host "$($svcacct.SamAccountName)`t$($svcacct.PasswordLastSet)`tNULL Expiration"
				$AppOwnerSVCPasswordAge += "$($svcacct.SamAccountName)`tNULL Expiration"
				#$momapi.LogScriptEvent($ScriptName,$EventID,1,"$($svcacct.SamAccountName)`tNULL Expiration")
				}
			# Check for yearly password change
			if ( ( $svcacct.PasswordLastSet -le $PWLastSet ) -AND ( $svcacct.PasswordLastSet ) )
				{
				#write-host "$($svcacct.SamAccountName) - Password set more than 365 days ago - $($svcacct.PasswordLastSet)`tPassword set more than 365 days ago"
				$AppOwnerSVCPasswordAge += "$($svcacct.SamAccountName)`t$($svcacct.PasswordLastSet)`tPassword set more than 365 days ago"
				#$momapi.LogScriptEvent($ScriptName,$EventID,1,"$($svcacct.SamAccountName)`t$($svcacct.PasswordLastSet)`tPassword set more than 365 days ago")
				}
			if ( $svcacct.PasswordLastSet -ge $PWLastSet )
				{
				#write-host "$($svcacct.SamAccountName) - Password set less than 365 days ago - $($svcacct.PasswordLastSet)`tPassword set less than 365 days ago"
				$AppOwnerSVCPasswordAge += "$($svcacct.SamAccountName)`t$($svcacct.PasswordLastSet)`tPassword set less than 365 days ago"
				#$momapi.LogScriptEvent($ScriptName,$EventID,0,"$($svcacct.SamAccountName)`t$($svcacct.PasswordLastSet)`tPassword set less than 365 days ago")
				}
			}

		$AppOwnerSVCPasswordAge
		$AppOwnerSVCPasswordAge.Count

		$AppOwnerSVCPasswordAgeSorted = $AppOwnerSVCPasswordAge | ? { $_ -like "*Expiration*" }
		$AppOwnerSVCPasswordAgeSorted.Count




	# Tally selections to validate data to build report
	$Test = $AppOwnerPasswordExpirationReport.Count + $AppOwnerSVCPasswordAgeSorted.Count


	$DSMessage = "Proactive $($AppOwner) Service Account issues for date ($date)."

	# 
	# Set up array for AD Account lockout/expiry report
	$ADAccountLockoutMessage = @()

	if ( $Test -eq 0 )
		{
		$ADAccountLockoutMessage += "ZERO Proactive $($AppOwner) Service Account issues for date ($date)."
		$momapi.LogScriptEvent($ScriptName,$EventID,0,"ZERO Proactive $($AppOwner) Service Account issues for date ($date).")
		}

	if ( $Test -gt 0 )
		{
		$ADAccountLockoutMessage += ""
		$ADAccountLockoutMessage += $DSMessage
		$ADAccountLockoutMessage += ""
		$ADAccountLockoutMessage += "# AD Account issues = $($Test)"
		$ADAccountLockoutMessage += "#================================================================"
		$ADAccountLockoutMessage += "# Service Account expiry = $($AppOwnerSVCAccountsToExpire.Count)"
		$ADAccountLockoutMessage += ""
		$ADAccountLockoutMessage += "# Service Accounts Passwords Last set = $($AppOwnerSVCAccountPasswordsLastSetSorted.Count)"
		$ADAccountLockoutMessage += "#================================================================"
		$ADAccountLockoutMessage += ""
		$ADAccountLockoutMessage += ""

		if ( $MECMSVCAccountsToExpire.Count -gt 0 )
			{
			$ADAccountLockoutMessage += "# $($AppOwner) SVC Accounts Password Expiry details"
			$ADAccountLockoutMessage += "#=============================================="
			$ADAccountLockoutMessage += $AppOwnerSVCAccountsToExpire
			$ADAccountLockoutMessage += "#=============================================="
			}

		if ( $MECMSVCPasswordAge.Count -gt 0 )
			{
			$ADAccountLockoutMessage += ""
			$ADAccountLockoutMessage += "# $($AppOwner) Password Last set audit"
			$ADAccountLockoutMessage += "#=============================================="
			$ADAccountLockoutMessage += $AppOwnerSVCPasswordAge
			$ADAccountLockoutMessage += "#=============================================="
			$ADAccountLockoutMessage += ""
			$ADAccountLockoutMessage += "# $($AppOwner) Password Last set details"
			$ADAccountLockoutMessage += "#=============================================="
			$ADAccountLockoutMessage += $AppOwnerLastSetDetails
			$ADAccountLockoutMessage += "#=============================================="
			}
		}

		$ADAccountLockoutMessage

		$ADAccountLockoutMessage = $ADAccountLockoutMessage | out-string

		$ADAccountLockoutMessage 

	# Log 
	$Summary = "$ADAccountLockoutMessage `n `nDisclaimer:  This daily summary report is to document the manual tasks used by NOSC to check AD and AD Replication health, Pending Reboot Report, Logical Disk errors,Expiring Certificates, Unhealthy Server/Agents, Unhealthy agent workflow/script alerts, and Servers in Maintenance Mode"


	$strCondition -eq "Good"
	$momapi.LogScriptEvent($ScriptName,$EventID,0,"$Summary")
	}

	$Message = "Array execution report completed against AppOwners"
	
	#$bag.AddValue('Result','GoodCondition')
	$bag.AddValue('Message',$Message)
	$bag.AddValue('Summary',$Summary)

	# Return all bags
	$bag


# End of script section
#=================================================================================
#Log an event for script ending and total execution time.
$EndTime = Get-Date
$ScriptTime = ($EndTime - $StartTime).TotalSeconds
$momapi.LogScriptEvent($ScriptName,$EventID,0,"`n Script Completed. `n Script Runtime: ($ScriptTime) seconds.")
#=================================================================================
# End of script
                </ScriptBody>
                <TimeoutSeconds>$Config/TimeoutSeconds$</TimeoutSeconds>
              </WriteAction>
            </MemberModules>
            <Composition>
              <Node ID="PSWA" />
            </Composition>
          </Composite>
        </ModuleImplementation>
        <OutputType>System!System.BaseData</OutputType>
        <InputType>System!System.BaseData</InputType>
      </WriteActionModuleType>
    </ModuleTypes>
    <MonitorTypes>
      <UnitMonitorType ID="Microsoft.Windows.Server.AD.PasswordCheck.Monitor.MonitorType" Accessibility="Internal">
        <MonitorTypeStates>
          <MonitorTypeState ID="GoodCondition" NoDetection="false" />
          <MonitorTypeState ID="BadCondition" NoDetection="false" />
        </MonitorTypeStates>
        <Configuration>
          <xsd:element minOccurs="1" type="xsd:integer" name="IntervalSeconds" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="0" type="xsd:string" name="SyncTime" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="1" type="xsd:integer" name="TimeoutSeconds" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
        </Configuration>
        <OverrideableParameters>
          <OverrideableParameter ID="IntervalSeconds" Selector="$Config/IntervalSeconds$" ParameterType="int" />
          <OverrideableParameter ID="SyncTime" Selector="$Config/SyncTime$" ParameterType="string" />
          <OverrideableParameter ID="TimeoutSeconds" Selector="$Config/TimeoutSeconds$" ParameterType="int" />
        </OverrideableParameters>
        <MonitorImplementation>
          <MemberModules>
            <DataSource ID="DS" TypeID="Microsoft.Windows.Server.AD.PasswordCheck.Monitor.DataSource">
              <IntervalSeconds>$Config/IntervalSeconds$</IntervalSeconds>
              <SyncTime>$Config/SyncTime$</SyncTime>
              <TimeoutSeconds>$Config/TimeoutSeconds$</TimeoutSeconds>
            </DataSource>
            <ConditionDetection ID="GoodConditionFilter" TypeID="System!System.ExpressionFilter">
              <Expression>
                <SimpleExpression>
                  <ValueExpression>
                    <XPathQuery Type="String">Property[@Name='Result']</XPathQuery>
                  </ValueExpression>
                  <Operator>Equal</Operator>
                  <ValueExpression>
                    <Value Type="String">GoodCondition</Value>
                  </ValueExpression>
                </SimpleExpression>
              </Expression>
            </ConditionDetection>
            <ConditionDetection ID="BadConditionFilter" TypeID="System!System.ExpressionFilter">
              <Expression>
                <SimpleExpression>
                  <ValueExpression>
                    <XPathQuery Type="String">Property[@Name='Result']</XPathQuery>
                  </ValueExpression>
                  <Operator>Equal</Operator>
                  <ValueExpression>
                    <Value Type="String">BadCondition</Value>
                  </ValueExpression>
                </SimpleExpression>
              </Expression>
            </ConditionDetection>
          </MemberModules>
          <RegularDetections>
            <RegularDetection MonitorTypeStateID="GoodCondition">
              <Node ID="GoodConditionFilter">
                <Node ID="DS" />
              </Node>
            </RegularDetection>
            <RegularDetection MonitorTypeStateID="BadCondition">
              <Node ID="BadConditionFilter">
                <Node ID="DS" />
              </Node>
            </RegularDetection>
          </RegularDetections>
          <OnDemandDetections>
            <OnDemandDetection MonitorTypeStateID="GoodCondition">
              <Node ID="GoodConditionFilter">
                <Node ID="DS" />
              </Node>
            </OnDemandDetection>
            <OnDemandDetection MonitorTypeStateID="BadCondition">
              <Node ID="BadConditionFilter">
                <Node ID="DS" />
              </Node>
            </OnDemandDetection>
          </OnDemandDetections>
        </MonitorImplementation>
      </UnitMonitorType>
      <UnitMonitorType ID="Microsoft.Windows.Server.AD.SingleEventLogTimer2StateMonitorType" Accessibility="Public">
        <MonitorTypeStates>
          <MonitorTypeState ID="EventRaised" NoDetection="false" />
          <MonitorTypeState ID="TimerEventRaised" NoDetection="false" />
        </MonitorTypeStates>
        <Configuration>
          <IncludeSchemaTypes>
            <SchemaType>System!System.ExpressionEvaluatorSchema</SchemaType>
          </IncludeSchemaTypes>
          <xsd:element name="ComputerName" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="LogName" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="Expression" type="ExpressionType" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="TimerWaitInSeconds" type="xsd:integer" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="MatchCount" type="xsd:integer" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
        </Configuration>
        <OverrideableParameters>
          <OverrideableParameter ID="MatchCount" Selector="$Config/MatchCount$" ParameterType="int" />
        </OverrideableParameters>
        <MonitorImplementation>
          <MemberModules>
            <DataSource ID="DataSource" TypeID="Windows!Microsoft.Windows.BaseEventProvider">
              <ComputerName>$Config/ComputerName$</ComputerName>
              <LogName>$Config/LogName$</LogName>
            </DataSource>
            <ProbeAction ID="OnDemandReset" TypeID="System!System.PassThroughProbe" />
            <ConditionDetection ID="FilterCondition" TypeID="System!System.ExpressionFilter">
              <Expression>$Config/Expression$</Expression>
            </ConditionDetection>
            <ConditionDetection ID="TimerCondition" TypeID="System!System.TimerCondition">
              <TimerWaitInSeconds>$Config/TimerWaitInSeconds$</TimerWaitInSeconds>
            </ConditionDetection>
            <ConditionDetection ID="ThresholdNotBreached" TypeID="System!System.LogicalSet.ExpressionFilter">
              <Expression>
                <SimpleExpression>
                  <ValueExpression>
                    <XPathQuery Type="Double">Value</XPathQuery>
                  </ValueExpression>
                  <Operator>LessEqual</Operator>
                  <ValueExpression>
                    <Value Type="Double">$Config/MatchCount$</Value>
                  </ValueExpression>
                </SimpleExpression>
              </Expression>
              <EmptySet>Block</EmptySet>
              <SetEvaluation>Any</SetEvaluation>
            </ConditionDetection>
            <ConditionDetection ID="ThresholdBreached" TypeID="System!System.LogicalSet.ExpressionFilter">
              <Expression>
                <SimpleExpression>
                  <ValueExpression>
                    <XPathQuery Type="Double">Value</XPathQuery>
                  </ValueExpression>
                  <Operator>Greater</Operator>
                  <ValueExpression>
                    <Value Type="Double">$Config/MatchCount$</Value>
                  </ValueExpression>
                </SimpleExpression>
              </Expression>
              <EmptySet>Passthrough</EmptySet>
              <SetEvaluation>Any</SetEvaluation>
            </ConditionDetection>
          </MemberModules>
          <RegularDetections>
            <RegularDetection MonitorTypeStateID="EventRaised">
              <Node ID="FilterCondition">
                <Node ID="DataSource" />
              </Node>
            </RegularDetection>
            <RegularDetection MonitorTypeStateID="TimerEventRaised">
              <Node ID="TimerCondition">
                <Node ID="FilterCondition">
                  <Node ID="DataSource" />
                </Node>
              </Node>
            </RegularDetection>
          </RegularDetections>
          <OnDemandDetections>
            <OnDemandDetection MonitorTypeStateID="TimerEventRaised">
              <Node ID="OnDemandReset" />
            </OnDemandDetection>
          </OnDemandDetections>
        </MonitorImplementation>
      </UnitMonitorType>
    </MonitorTypes>
  </TypeDefinitions>
  <Monitoring>
    <Rules>
      <Rule ID="Microsoft.Windows.Server.AD.Auth.Failed.EventID40961.Event.Rule" Enabled="true" Target="MWSAD6D!Microsoft.Windows.Server.2016.AD.DomainControllerRole" ConfirmDelivery="true" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>EventCollection</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="Windows!Microsoft.Windows.EventProvider">
            <ComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</ComputerName>
            <LogName>System</LogName>
            <Expression>
              <And>
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="UnsignedInteger">40961</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
                <Expression>
                  <RegExExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">EventDescription</XPathQuery>
                    </ValueExpression>
                    <Operator>ContainsSubstring</Operator>
                    <Pattern>Security System could not establish a secured connection with the server</Pattern>
                  </RegExExpression>
                </Expression>
              </And>
            </Expression>
          </DataSource>
        </DataSources>
        <WriteActions>
          <WriteAction ID="WriteToDW" TypeID="SCDW!Microsoft.SystemCenter.DataWarehouse.PublishEventData" />
        </WriteActions>
      </Rule>
      <Rule ID="Microsoft.Windows.Server.AD.Auth.Security.EventID4625.Event.Rule" Enabled="false" Target="MWSAD6D!Microsoft.Windows.Server.2016.AD.DomainControllerRole" ConfirmDelivery="true" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>EventCollection</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="Windows!Microsoft.Windows.EventProvider">
            <ComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</ComputerName>
            <LogName>Security</LogName>
            <Expression>
              <And>
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="UnsignedInteger">4625</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
                <Expression>
                  <RegExExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">EventDescription</XPathQuery>
                    </ValueExpression>
                    <Operator>MatchesRegularExpression</Operator>
                    <Pattern>^(An account failed to log on.)|^(Account For Which Logon Failed:)$</Pattern>
                  </RegExExpression>
                </Expression>
              </And>
            </Expression>
          </DataSource>
        </DataSources>
        <WriteActions>
          <WriteAction ID="WriteToDW" TypeID="SCDW!Microsoft.SystemCenter.DataWarehouse.PublishEventData" />
        </WriteActions>
      </Rule>
      <Rule ID="Microsoft.Windows.Server.AD.Computer.Security.EventID4742.Event.Rule" Enabled="true" Target="MWSAD6D!Microsoft.Windows.Server.2016.AD.DomainControllerRole" ConfirmDelivery="true" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>EventCollection</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="Windows!Microsoft.Windows.EventProvider">
            <ComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</ComputerName>
            <LogName>Security</LogName>
            <Expression>
              <And>
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="UnsignedInteger">4742</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
                <Expression>
                  <RegExExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">EventDescription</XPathQuery>
                    </ValueExpression>
                    <Operator>MatchesRegularExpression</Operator>
                    <Pattern>^(A computer account was changed.*)|^(.*NG.*)|^(.*Account Name:.*NG.*)|^(.*Account Name:.*A*)$</Pattern>
                  </RegExExpression>
                </Expression>
              </And>
            </Expression>
          </DataSource>
        </DataSources>
        <WriteActions>
          <WriteAction ID="WriteToDW" TypeID="SCDW!Microsoft.SystemCenter.DataWarehouse.PublishEventData" />
        </WriteActions>
      </Rule>
      <Rule ID="Microsoft.Windows.Server.AD.Computer.Security.EventID4743.Event.Rule" Enabled="true" Target="MWSAD6D!Microsoft.Windows.Server.2016.AD.DomainControllerRole" ConfirmDelivery="true" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>EventCollection</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="Windows!Microsoft.Windows.EventProvider">
            <ComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</ComputerName>
            <LogName>Security</LogName>
            <Expression>
              <And>
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="UnsignedInteger">4743</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">PublisherName</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="String">Microsoft-Windows-Security-Auditing</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
              </And>
            </Expression>
          </DataSource>
        </DataSources>
        <WriteActions>
          <WriteAction ID="WriteToDW" TypeID="SCDW!Microsoft.SystemCenter.DataWarehouse.PublishEventData" />
        </WriteActions>
      </Rule>
      <Rule ID="Microsoft.Windows.Server.AD.Group.Security.EventID4727.Event.Rule" Enabled="true" Target="MWSAD6D!Microsoft.Windows.Server.2016.AD.DomainControllerRole" ConfirmDelivery="true" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>EventCollection</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="Windows!Microsoft.Windows.EventProvider">
            <ComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</ComputerName>
            <LogName>Security</LogName>
            <Expression>
              <And>
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="UnsignedInteger">4727</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
                <Expression>
                  <RegExExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">EventDescription</XPathQuery>
                    </ValueExpression>
                    <Operator>ContainsSubstring</Operator>
                    <Pattern>A security-enabled global group was created.</Pattern>
                  </RegExExpression>
                </Expression>
              </And>
            </Expression>
          </DataSource>
        </DataSources>
        <WriteActions>
          <WriteAction ID="WriteToDW" TypeID="SCDW!Microsoft.SystemCenter.DataWarehouse.PublishEventData" />
        </WriteActions>
      </Rule>
      <Rule ID="Microsoft.Windows.Server.AD.Group.Security.EventID4728.Event.Rule" Enabled="true" Target="MWSAD6D!Microsoft.Windows.Server.2016.AD.DomainControllerRole" ConfirmDelivery="true" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>EventCollection</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="Windows!Microsoft.Windows.EventProvider">
            <ComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</ComputerName>
            <LogName>Security</LogName>
            <Expression>
              <And>
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="UnsignedInteger">4728</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
                <Expression>
                  <RegExExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">EventDescription</XPathQuery>
                    </ValueExpression>
                    <Operator>ContainsSubstring</Operator>
                    <Pattern>A member was added to a security-enabled global group.</Pattern>
                  </RegExExpression>
                </Expression>
                <Expression>
                  <RegExExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">EventDescription</XPathQuery>
                    </ValueExpression>
                    <Operator>DoesNotMatchRegularExpression</Operator>
                    <Pattern>^(.*NGNG DoD Visitors*)$</Pattern>
                  </RegExExpression>
                </Expression>
              </And>
            </Expression>
          </DataSource>
        </DataSources>
        <WriteActions>
          <WriteAction ID="WriteToDW" TypeID="SCDW!Microsoft.SystemCenter.DataWarehouse.PublishEventData" />
        </WriteActions>
      </Rule>
      <Rule ID="Microsoft.Windows.Server.AD.Group.Security.EventID4729.Event.Rule" Enabled="true" Target="MWSAD6D!Microsoft.Windows.Server.2016.AD.DomainControllerRole" ConfirmDelivery="true" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>EventCollection</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="Windows!Microsoft.Windows.EventProvider">
            <ComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</ComputerName>
            <LogName>Security</LogName>
            <Expression>
              <And>
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="UnsignedInteger">4729</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
                <Expression>
                  <RegExExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">EventDescription</XPathQuery>
                    </ValueExpression>
                    <Operator>ContainsSubstring</Operator>
                    <Pattern>A member was removed from a security-enabled global group.</Pattern>
                  </RegExExpression>
                </Expression>
              </And>
            </Expression>
          </DataSource>
        </DataSources>
        <WriteActions>
          <WriteAction ID="WriteToDW" TypeID="SCDW!Microsoft.SystemCenter.DataWarehouse.PublishEventData" />
        </WriteActions>
      </Rule>
      <Rule ID="Microsoft.Windows.Server.AD.Group.Security.EventID4730.Event.Rule" Enabled="true" Target="MWSAD6D!Microsoft.Windows.Server.2016.AD.DomainControllerRole" ConfirmDelivery="true" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>EventCollection</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="Windows!Microsoft.Windows.EventProvider">
            <ComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</ComputerName>
            <LogName>Security</LogName>
            <Expression>
              <And>
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="UnsignedInteger">4730</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
                <Expression>
                  <RegExExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">EventDescription</XPathQuery>
                    </ValueExpression>
                    <Operator>ContainsSubstring</Operator>
                    <Pattern>A security-enabled local group was deleted.</Pattern>
                  </RegExExpression>
                </Expression>
              </And>
            </Expression>
          </DataSource>
        </DataSources>
        <WriteActions>
          <WriteAction ID="WriteToDW" TypeID="SCDW!Microsoft.SystemCenter.DataWarehouse.PublishEventData" />
        </WriteActions>
      </Rule>
      <Rule ID="Microsoft.Windows.Server.AD.Group.Security.EventID4731.Event.Rule" Enabled="true" Target="MWSAD6D!Microsoft.Windows.Server.2016.AD.DomainControllerRole" ConfirmDelivery="true" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>EventCollection</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="Windows!Microsoft.Windows.EventProvider">
            <ComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</ComputerName>
            <LogName>Security</LogName>
            <Expression>
              <And>
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="UnsignedInteger">4731</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
                <Expression>
                  <RegExExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">EventDescription</XPathQuery>
                    </ValueExpression>
                    <Operator>ContainsSubstring</Operator>
                    <Pattern>A security-enabled local group was created.</Pattern>
                  </RegExExpression>
                </Expression>
              </And>
            </Expression>
          </DataSource>
        </DataSources>
        <WriteActions>
          <WriteAction ID="WriteToDW" TypeID="SCDW!Microsoft.SystemCenter.DataWarehouse.PublishEventData" />
        </WriteActions>
      </Rule>
      <Rule ID="Microsoft.Windows.Server.AD.Group.Security.EventID4732.Event.Rule" Enabled="true" Target="MWSAD6D!Microsoft.Windows.Server.2016.AD.DomainControllerRole" ConfirmDelivery="true" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>EventCollection</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="Windows!Microsoft.Windows.EventProvider">
            <ComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</ComputerName>
            <LogName>Security</LogName>
            <Expression>
              <And>
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="UnsignedInteger">4732</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
                <Expression>
                  <RegExExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">EventDescription</XPathQuery>
                    </ValueExpression>
                    <Operator>ContainsSubstring</Operator>
                    <Pattern>A member was added to a security-enabled local group.</Pattern>
                  </RegExExpression>
                </Expression>
              </And>
            </Expression>
          </DataSource>
        </DataSources>
        <WriteActions>
          <WriteAction ID="WriteToDW" TypeID="SCDW!Microsoft.SystemCenter.DataWarehouse.PublishEventData" />
        </WriteActions>
      </Rule>
      <Rule ID="Microsoft.Windows.Server.AD.Group.Security.EventID4733.Event.Rule" Enabled="true" Target="MWSAD6D!Microsoft.Windows.Server.2016.AD.DomainControllerRole" ConfirmDelivery="true" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>EventCollection</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="Windows!Microsoft.Windows.EventProvider">
            <ComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</ComputerName>
            <LogName>Security</LogName>
            <Expression>
              <And>
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="UnsignedInteger">4733</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
                <Expression>
                  <RegExExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">EventDescription</XPathQuery>
                    </ValueExpression>
                    <Operator>ContainsSubstring</Operator>
                    <Pattern>A member was removed from security-enabled local group.</Pattern>
                  </RegExExpression>
                </Expression>
              </And>
            </Expression>
          </DataSource>
        </DataSources>
        <WriteActions>
          <WriteAction ID="WriteToDW" TypeID="SCDW!Microsoft.SystemCenter.DataWarehouse.PublishEventData" />
        </WriteActions>
      </Rule>
      <Rule ID="Microsoft.Windows.Server.AD.Group.Security.EventID4734.Event.Rule" Enabled="true" Target="MWSAD6D!Microsoft.Windows.Server.2016.AD.DomainControllerRole" ConfirmDelivery="true" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>EventCollection</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="Windows!Microsoft.Windows.EventProvider">
            <ComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</ComputerName>
            <LogName>Security</LogName>
            <Expression>
              <And>
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="UnsignedInteger">4734</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
                <Expression>
                  <RegExExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">EventDescription</XPathQuery>
                    </ValueExpression>
                    <Operator>ContainsSubstring</Operator>
                    <Pattern>A security-enabled local group was deleted.</Pattern>
                  </RegExExpression>
                </Expression>
              </And>
            </Expression>
          </DataSource>
        </DataSources>
        <WriteActions>
          <WriteAction ID="WriteToDW" TypeID="SCDW!Microsoft.SystemCenter.DataWarehouse.PublishEventData" />
        </WriteActions>
      </Rule>
      <Rule ID="Microsoft.Windows.Server.AD.Group.Security.EventID4735.Event.Rule" Enabled="true" Target="MWSAD6D!Microsoft.Windows.Server.2016.AD.DomainControllerRole" ConfirmDelivery="true" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>EventCollection</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="Windows!Microsoft.Windows.EventProvider">
            <ComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</ComputerName>
            <LogName>Security</LogName>
            <Expression>
              <And>
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="UnsignedInteger">4735</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
                <Expression>
                  <RegExExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">EventDescription</XPathQuery>
                    </ValueExpression>
                    <Operator>ContainsSubstring</Operator>
                    <Pattern>A security-enabled local group was changed.</Pattern>
                  </RegExExpression>
                </Expression>
              </And>
            </Expression>
          </DataSource>
        </DataSources>
        <WriteActions>
          <WriteAction ID="WriteToDW" TypeID="SCDW!Microsoft.SystemCenter.DataWarehouse.PublishEventData" />
        </WriteActions>
      </Rule>
      <Rule ID="Microsoft.Windows.Server.AD.Group.Security.EventID4737.Event.Rule" Enabled="true" Target="MWSAD6D!Microsoft.Windows.Server.2016.AD.DomainControllerRole" ConfirmDelivery="true" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>EventCollection</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="Windows!Microsoft.Windows.EventProvider">
            <ComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</ComputerName>
            <LogName>Security</LogName>
            <Expression>
              <And>
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="UnsignedInteger">4737</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
                <Expression>
                  <RegExExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">EventDescription</XPathQuery>
                    </ValueExpression>
                    <Operator>ContainsSubstring</Operator>
                    <Pattern>A group's type was changed.</Pattern>
                  </RegExExpression>
                </Expression>
                <Expression>
                  <RegExExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">EventDescription</XPathQuery>
                    </ValueExpression>
                    <Operator>DoesNotMatchRegularExpression</Operator>
                    <Pattern>^(.*Security ID:.*BUILTIN\Users*)$</Pattern>
                  </RegExExpression>
                </Expression>
              </And>
            </Expression>
          </DataSource>
        </DataSources>
        <WriteActions>
          <WriteAction ID="WriteToDW" TypeID="SCDW!Microsoft.SystemCenter.DataWarehouse.PublishEventData" />
        </WriteActions>
      </Rule>
      <Rule ID="Microsoft.Windows.Server.AD.Group.Security.EventID4764.Event.Rule" Enabled="true" Target="MWSAD6D!Microsoft.Windows.Server.2016.AD.DomainControllerRole" ConfirmDelivery="true" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>EventCollection</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="Windows!Microsoft.Windows.EventProvider">
            <ComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</ComputerName>
            <LogName>Security</LogName>
            <Expression>
              <And>
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="UnsignedInteger">4764</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
                <Expression>
                  <RegExExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">EventDescription</XPathQuery>
                    </ValueExpression>
                    <Operator>ContainsSubstring</Operator>
                    <Pattern>A group's type was changed.</Pattern>
                  </RegExExpression>
                </Expression>
              </And>
            </Expression>
          </DataSource>
        </DataSources>
        <WriteActions>
          <WriteAction ID="WriteToDW" TypeID="SCDW!Microsoft.SystemCenter.DataWarehouse.PublishEventData" />
        </WriteActions>
      </Rule>
      <Rule ID="Microsoft.Windows.Server.AD.Group.Security.EventID4720.Event.Rule" Enabled="true" Target="MWSAD6D!Microsoft.Windows.Server.2016.AD.DomainControllerRole" ConfirmDelivery="true" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>EventCollection</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="Windows!Microsoft.Windows.EventProvider">
            <ComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</ComputerName>
            <LogName>Security</LogName>
            <Expression>
              <And>
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="UnsignedInteger">4720</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
                <Expression>
                  <RegExExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">EventDescription</XPathQuery>
                    </ValueExpression>
                    <Operator>MatchesRegularExpression</Operator>
                    <Pattern>^(.*A user account was created.*|.*NG.*admin.*)|^(.*NG.*[des]a.*)$</Pattern>
                  </RegExExpression>
                </Expression>
              </And>
            </Expression>
          </DataSource>
        </DataSources>
        <WriteActions>
          <WriteAction ID="WriteToDW" TypeID="SCDW!Microsoft.SystemCenter.DataWarehouse.PublishEventData" />
        </WriteActions>
      </Rule>
      <Rule ID="Microsoft.Windows.Server.AD.Group.Security.EventID4722.Event.Rule" Enabled="true" Target="MWSAD6D!Microsoft.Windows.Server.2016.AD.DomainControllerRole" ConfirmDelivery="true" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>EventCollection</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="Windows!Microsoft.Windows.EventProvider">
            <ComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</ComputerName>
            <LogName>Security</LogName>
            <Expression>
              <And>
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="UnsignedInteger">4722</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
                <Expression>
                  <RegExExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">EventDescription</XPathQuery>
                    </ValueExpression>
                    <Operator>MatchesRegularExpression</Operator>
                    <Pattern>^(A user account was enabled.*)|^(.*NG.*[des]a.*)$</Pattern>
                  </RegExExpression>
                </Expression>
                <Expression>
                  <RegExExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">EventDescription</XPathQuery>
                    </ValueExpression>
                    <Operator>DoesNotMatchRegularExpression</Operator>
                    <Pattern>^(.*Account Name:.*[A-Z][A-Z][A-Z][A-Z][0-9]*)$</Pattern>
                  </RegExExpression>
                </Expression>
              </And>
            </Expression>
          </DataSource>
        </DataSources>
        <WriteActions>
          <WriteAction ID="WriteToDW" TypeID="SCDW!Microsoft.SystemCenter.DataWarehouse.PublishEventData" />
        </WriteActions>
      </Rule>
      <Rule ID="Microsoft.Windows.Server.AD.Group.Security.EventID4724.Event.Rule" Enabled="true" Target="MWSAD6D!Microsoft.Windows.Server.2016.AD.DomainControllerRole" ConfirmDelivery="true" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>EventCollection</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="Windows!Microsoft.Windows.EventProvider">
            <ComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</ComputerName>
            <LogName>Security</LogName>
            <Expression>
              <And>
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="UnsignedInteger">4724</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
                <Expression>
                  <RegExExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">EventDescription</XPathQuery>
                    </ValueExpression>
                    <Operator>MatchesRegularExpression</Operator>
                    <Pattern>^(An attempt was made to reset an account's password.*)|^(.*NG.*[des]a.*)$</Pattern>
                  </RegExExpression>
                </Expression>
                <Expression>
                  <RegExExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">EventDescription</XPathQuery>
                    </ValueExpression>
                    <Operator>DoesNotMatchRegularExpression</Operator>
                    <Pattern>^(.*Security ID:.*[A-Z][A-Z][A-Z][A-Z][0-9]*)$</Pattern>
                  </RegExExpression>
                </Expression>
              </And>
            </Expression>
          </DataSource>
        </DataSources>
        <WriteActions>
          <WriteAction ID="WriteToDW" TypeID="SCDW!Microsoft.SystemCenter.DataWarehouse.PublishEventData" />
        </WriteActions>
      </Rule>
      <Rule ID="Microsoft.Windows.Server.AD.Group.Security.EventID4726.Event.Rule" Enabled="true" Target="MWSAD6D!Microsoft.Windows.Server.2016.AD.DomainControllerRole" ConfirmDelivery="true" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>EventCollection</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="Windows!Microsoft.Windows.EventProvider">
            <ComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</ComputerName>
            <LogName>Security</LogName>
            <Expression>
              <And>
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="UnsignedInteger">4726</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
                <Expression>
                  <RegExExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">EventDescription</XPathQuery>
                    </ValueExpression>
                    <Operator>ContainsSubstring</Operator>
                    <Pattern>A user account was deleted.</Pattern>
                  </RegExExpression>
                </Expression>
                <Expression>
                  <RegExExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">EventDescription</XPathQuery>
                    </ValueExpression>
                    <Operator>DoesNotMatchRegularExpression</Operator>
                    <Pattern>^(.*Account Name:.*[A-Z][A-Z][A-Z][A-Z][0-9].*)$</Pattern>
                  </RegExExpression>
                </Expression>
              </And>
            </Expression>
          </DataSource>
        </DataSources>
        <WriteActions>
          <WriteAction ID="WriteToDW" TypeID="SCDW!Microsoft.SystemCenter.DataWarehouse.PublishEventData" />
        </WriteActions>
      </Rule>
      <Rule ID="Microsoft.Windows.Server.AD.Group.Security.EventID4738.Event.Rule" Enabled="true" Target="MWSAD6D!Microsoft.Windows.Server.2016.AD.DomainControllerRole" ConfirmDelivery="true" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>EventCollection</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="Windows!Microsoft.Windows.EventProvider">
            <ComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</ComputerName>
            <LogName>Security</LogName>
            <Expression>
              <And>
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="UnsignedInteger">4738</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
                <Expression>
                  <RegExExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">EventDescription</XPathQuery>
                    </ValueExpression>
                    <Operator>ContainsSubstring</Operator>
                    <Pattern>A user account was changed.</Pattern>
                  </RegExExpression>
                </Expression>
                <Expression>
                  <RegExExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">EventDescription</XPathQuery>
                    </ValueExpression>
                    <Operator>DoesNotMatchRegularExpression</Operator>
                    <Pattern>^(.*Account Name:.*[A-Z][A-Z][A-Z][A-Z][0-9]*)$</Pattern>
                  </RegExExpression>
                </Expression>
              </And>
            </Expression>
          </DataSource>
        </DataSources>
        <WriteActions>
          <WriteAction ID="WriteToDW" TypeID="SCDW!Microsoft.SystemCenter.DataWarehouse.PublishEventData" />
        </WriteActions>
      </Rule>
      <Rule ID="Microsoft.Windows.Server.AD.Group.Security.EventID4740.Event.Rule" Enabled="true" Target="MWSAD6D!Microsoft.Windows.Server.2016.AD.DomainControllerRole" ConfirmDelivery="true" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>EventCollection</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="Windows!Microsoft.Windows.EventProvider">
            <ComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</ComputerName>
            <LogName>Security</LogName>
            <Expression>
              <And>
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="UnsignedInteger">4740</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
                <Expression>
                  <RegExExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">EventDescription</XPathQuery>
                    </ValueExpression>
                    <Operator>MatchesRegularExpression</Operator>
                    <Pattern>^(A user account was locked out.*)|^(.*Account Name.*)|^(.*NG.*admin.*)|^(.*NG.*ea.*)|^(.*NG.*da.*)|^(.*NG.*sa.*)$</Pattern>
                  </RegExExpression>
                </Expression>
              </And>
            </Expression>
          </DataSource>
        </DataSources>
        <WriteActions>
          <WriteAction ID="WriteToDW" TypeID="SCDW!Microsoft.SystemCenter.DataWarehouse.PublishEventData" />
        </WriteActions>
      </Rule>
      <Rule ID="Microsoft.Windows.Server.AD.Group.Security.EventID4767.Event.Rule" Enabled="true" Target="MWSAD6D!Microsoft.Windows.Server.2016.AD.DomainControllerRole" ConfirmDelivery="true" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>EventCollection</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="Windows!Microsoft.Windows.EventProvider">
            <ComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</ComputerName>
            <LogName>Security</LogName>
            <Expression>
              <And>
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="UnsignedInteger">4767</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
                <Expression>
                  <RegExExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">EventDescription</XPathQuery>
                    </ValueExpression>
                    <Operator>MatchesRegularExpression</Operator>
                    <Pattern>^(A user account was unlocked.*)|^(.*Account Name.*)|^(.*NG.*admin.*)|^(.*NG.*ea.*)|^(.*NG.*da.*)|^(.*NG.*sa.*)$</Pattern>
                  </RegExExpression>
                </Expression>
              </And>
            </Expression>
          </DataSource>
        </DataSources>
        <WriteActions>
          <WriteAction ID="WriteToDW" TypeID="SCDW!Microsoft.SystemCenter.DataWarehouse.PublishEventData" />
        </WriteActions>
      </Rule>
      <Rule ID="Microsoft.Windows.Server.AD.Group.Security.EventID4781.Event.Rule" Enabled="true" Target="MWSAD6D!Microsoft.Windows.Server.2016.AD.DomainControllerRole" ConfirmDelivery="true" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>EventCollection</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="Windows!Microsoft.Windows.EventProvider">
            <ComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</ComputerName>
            <LogName>Security</LogName>
            <Expression>
              <And>
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="UnsignedInteger">4781</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
                <Expression>
                  <RegExExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">EventDescription</XPathQuery>
                    </ValueExpression>
                    <Operator>MatchesRegularExpression</Operator>
                    <Pattern>^(The name of an account was changed.*)|^(.*Account Name.*)|^(.*NG.*admin.*)|^(.*NG.*ea.*)|^(.*NG.*da.*)|^(.*NG.*sa.*)$</Pattern>
                  </RegExExpression>
                </Expression>
              </And>
            </Expression>
          </DataSource>
        </DataSources>
        <WriteActions>
          <WriteAction ID="WriteToDW" TypeID="SCDW!Microsoft.SystemCenter.DataWarehouse.PublishEventData" />
        </WriteActions>
      </Rule>

      <Rule ID="Microsoft.Windows.Server.AD.User.Security.EventID4624.Event.Rule" Enabled="true" Target="MWSAD6D!Microsoft.Windows.Server.2016.AD.DomainControllerRole" ConfirmDelivery="true" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>EventCollection</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="Windows!Microsoft.Windows.EventProvider">
            <ComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</ComputerName>
            <LogName>Security</LogName>
            <Expression>
              <And>
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="UnsignedInteger">4624</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
                <Expression>
                  <RegExExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">EventDescription</XPathQuery>
                    </ValueExpression>
                    <Operator>MatchesRegularExpression</Operator>
                    <Pattern>^(An account was successfully logged on.*)|^(.*Account Name.*)|^(.*NG.*admin.*)|^(.*NG.*ea.*)|^(.*NG.*da.*)|^(.*NG.*sa.*)|^(.*NG.*wa.*)$</Pattern>
                  </RegExExpression>
                </Expression>
              </And>
            </Expression>
          </DataSource>
        </DataSources>
        <WriteActions>
          <WriteAction ID="WriteToDW" TypeID="SCDW!Microsoft.SystemCenter.DataWarehouse.PublishEventData" />
        </WriteActions>
      </Rule>
      <Rule ID="Microsoft.Windows.Server.AD.User.Security.EventID4634.Event.Rule" Enabled="false" Target="MWSAD6D!Microsoft.Windows.Server.2016.AD.DomainControllerRole" ConfirmDelivery="true" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>EventCollection</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="Windows!Microsoft.Windows.EventProvider">
            <ComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</ComputerName>
            <LogName>Security</LogName>
            <Expression>
              <And>
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="UnsignedInteger">4634</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
                <Expression>
                  <RegExExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">EventDescription</XPathQuery>
                    </ValueExpression>
                    <Operator>DoesNotMatchRegularExpression</Operator>
                    <Pattern>^(An account was logged off.*Security ID:.*NG\NG.*)$</Pattern>
                  </RegExExpression>
                </Expression>
              </And>
            </Expression>
          </DataSource>
        </DataSources>
        <WriteActions>
          <WriteAction ID="WriteToDW" TypeID="SCDW!Microsoft.SystemCenter.DataWarehouse.PublishEventData" />
        </WriteActions>
      </Rule>
      <Rule ID="Microsoft.Windows.Server.AD.User.Security.EventID4647.Event.Rule" Enabled="true" Target="MWSAD6D!Microsoft.Windows.Server.2016.AD.DomainControllerRole" ConfirmDelivery="true" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>EventCollection</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="Windows!Microsoft.Windows.EventProvider">
            <ComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</ComputerName>
            <LogName>Security</LogName>
            <Expression>
              <And>
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="UnsignedInteger">4647</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
                <Expression>
                  <RegExExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">EventDescription</XPathQuery>
                    </ValueExpression>
                    <Operator>MatchesRegularExpression</Operator>
                    <Pattern>^(User initiated logoff.*)|^(.*Account Name.*)|^(.*NG.*admin.*)|^(.*NG.*ea.*)|^(.*NG.*da.*)|^(.*NG.*sa.*)$</Pattern>
                  </RegExExpression>
                </Expression>
              </And>
            </Expression>
          </DataSource>
        </DataSources>
        <WriteActions>
          <WriteAction ID="WriteToDW" TypeID="SCDW!Microsoft.SystemCenter.DataWarehouse.PublishEventData" />
        </WriteActions>
      </Rule>
      <Rule ID="Microsoft.Windows.Server.AD.Logon.Security.EventID4648.Event.Rule" Enabled="true" Target="MWSAD6D!Microsoft.Windows.Server.2016.AD.DomainControllerRole" ConfirmDelivery="true" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>EventCollection</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="Windows!Microsoft.Windows.EventProvider">
            <ComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</ComputerName>
            <LogName>Security</LogName>
            <Expression>
              <And>
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="UnsignedInteger">4648</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
                <Expression>
                  <RegExExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">EventDescription</XPathQuery>
                    </ValueExpression>
                    <Operator>MatchesRegularExpression</Operator>
                    <Pattern>^(A logon was attempted using explicit credentials.*)|^(.*Account Name.*)|^(.*NG.*admin.*)|^(.*NG.*ea.*)|^(.*NG.*da.*)|^(.*NG.*sa.*)^(.*NG.*wa.*)$</Pattern>
                  </RegExExpression>
                </Expression>
              </And>
            </Expression>
          </DataSource>
        </DataSources>
        <WriteActions>
          <WriteAction ID="WriteToDW" TypeID="SCDW!Microsoft.SystemCenter.DataWarehouse.PublishEventData" />
        </WriteActions>
      </Rule>
      <Rule ID="Microsoft.Windows.Server.AD.Session.Security.EventID4779.Event.Rule" Enabled="true" Target="MWSAD6D!Microsoft.Windows.Server.2016.AD.DomainControllerRole" ConfirmDelivery="true" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>EventCollection</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="Windows!Microsoft.Windows.EventProvider">
            <ComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</ComputerName>
            <LogName>Security</LogName>
            <Expression>
              <And>
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="UnsignedInteger">4779</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
                <Expression>
                  <RegExExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">EventDescription</XPathQuery>
                    </ValueExpression>
                    <Operator>MatchesRegularExpression</Operator>
                    <Pattern>^(A session was disconnected from a Window Station.*)|^(.*Account Name.*)|^(.*NG.*admin.*)|^(.*NG.*ea.*)|^(.*NG.*da.*)|^(.*NG.*sa.*)|^(.*NG.*wa.*)$</Pattern>
                  </RegExExpression>
                </Expression>
              </And>
            </Expression>
          </DataSource>
        </DataSources>
        <WriteActions>
          <WriteAction ID="WriteToDW" TypeID="SCDW!Microsoft.SystemCenter.DataWarehouse.PublishEventData" />
        </WriteActions>
      </Rule>

      <Rule ID="Microsoft.Windows.Server.AD.Auth.Failed.EventID40961.Alert.Rule" Enabled="true" Target="MWSAD6D!Microsoft.Windows.Server.2016.AD.DomainControllerRole" ConfirmDelivery="true" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>Alert</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="Windows!Microsoft.Windows.EventProvider">
            <ComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</ComputerName>
            <LogName>System</LogName>
            <Expression>
              <And>
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="UnsignedInteger">40961</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
                <Expression>
                  <RegExExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">EventDescription</XPathQuery>
                    </ValueExpression>
                    <Operator>ContainsSubstring</Operator>
                    <Pattern>Security System could not establish a secured connection with the server</Pattern>
                  </RegExExpression>
                </Expression>
              </And>
            </Expression>
          </DataSource>
        </DataSources>
        <WriteActions>
          <WriteAction ID="Alert" TypeID="Health!System.Health.GenerateAlert">
            <Priority>1</Priority>
            <Severity>1</Severity>
            <AlertName />
            <AlertDescription />
            <AlertOwner />
            <AlertMessageId>$MPElement[Name="Microsoft.Windows.Server.AD.Auth.Failed.EventID40961.Alert.Rule.AlertMessage"]$</AlertMessageId>
            <AlertParameters>
              <AlertParameter1>$Data/EventDescription$</AlertParameter1>
            </AlertParameters>
            <Suppression>
              <SuppressionValue>$Data/EventDescription$</SuppressionValue>
            </Suppression>
          </WriteAction>
        </WriteActions>
      </Rule>
      <Rule ID="Microsoft.Windows.Server.AD.Auth.Security.EventID4625.Alert.Rule" Enabled="false" Target="MWSAD6D!Microsoft.Windows.Server.2016.AD.DomainControllerRole" ConfirmDelivery="true" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>Alert</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="Windows!Microsoft.Windows.EventProvider">
            <ComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</ComputerName>
            <LogName>Security</LogName>
            <Expression>
              <And>
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="UnsignedInteger">4625</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
                <Expression>
                  <RegExExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">EventDescription</XPathQuery>
                    </ValueExpression>
                    <Operator>MatchesRegularExpression</Operator>
                    <Pattern>^(An account failed to log on.)|^(Account For Which Logon Failed:)$</Pattern>
                  </RegExExpression>
                </Expression>
              </And>
            </Expression>
          </DataSource>
        </DataSources>
        <WriteActions>
          <WriteAction ID="Alert" TypeID="Health!System.Health.GenerateAlert">
            <Priority>1</Priority>
            <Severity>1</Severity>
            <AlertName />
            <AlertDescription />
            <AlertOwner />
            <AlertMessageId>$MPElement[Name="Microsoft.Windows.Server.AD.Auth.Security.EventID4625.Alert.Rule.AlertMessage"]$</AlertMessageId>
            <AlertParameters>
              <AlertParameter1>$Data/EventDescription$</AlertParameter1>
            </AlertParameters>
            <Suppression>
              <SuppressionValue>$Data/EventDescription$</SuppressionValue>
            </Suppression>
          </WriteAction>
        </WriteActions>
      </Rule>
      <Rule ID="Microsoft.Windows.Server.AD.Computer.Security.EventID4742.Alert.Rule" Enabled="false" Target="MWSAD6D!Microsoft.Windows.Server.2016.AD.DomainControllerRole" ConfirmDelivery="true" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>Alert</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="Windows!Microsoft.Windows.EventProvider">
            <ComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</ComputerName>
            <LogName>Security</LogName>
            <Expression>
              <And>
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="UnsignedInteger">4742</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
                <Expression>
                  <RegExExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">EventDescription</XPathQuery>
                    </ValueExpression>
                    <Operator>MatchesRegularExpression</Operator>
                    <Pattern>^(A computer account was changed.*)|^(.*NG.*)|^(.*Account Name:.*NG.*)|^(.*Account Name:.*A*)$</Pattern>
                  </RegExExpression>
                </Expression>
              </And>
            </Expression>
          </DataSource>
        </DataSources>
        <WriteActions>
          <WriteAction ID="Alert" TypeID="Health!System.Health.GenerateAlert">
            <Priority>1</Priority>
            <Severity>1</Severity>
            <AlertName />
            <AlertDescription />
            <AlertOwner />
            <AlertMessageId>$MPElement[Name="Microsoft.Windows.Server.AD.Computer.Security.EventID4742.Alert.Rule.AlertMessage"]$</AlertMessageId>
            <AlertParameters>
              <AlertParameter1>$Data/EventDescription$</AlertParameter1>
            </AlertParameters>
            <Suppression>
              <SuppressionValue>$Data/EventDescription$</SuppressionValue>
            </Suppression>
          </WriteAction>
        </WriteActions>
      </Rule>
      <Rule ID="Microsoft.Windows.Server.AD.Computer.Security.EventID4743.Alert.Rule" Enabled="false" Target="MWSAD6D!Microsoft.Windows.Server.2016.AD.DomainControllerRole" ConfirmDelivery="true" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>Alert</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="Windows!Microsoft.Windows.EventProvider">
            <ComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</ComputerName>
            <LogName>Security</LogName>
            <Expression>
              <And>
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="UnsignedInteger">4743</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
                <Expression>
                  <RegExExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">EventDescription</XPathQuery>
                    </ValueExpression>
                    <Operator>MatchesRegularExpression</Operator>
                    <Pattern>^(A computer account was deleted.*)|^(.*NG.*)|^(.*Account Name:.*NG.*)|^(.*Account Name:.*A*)$</Pattern>
                  </RegExExpression>
                </Expression>
              </And>
            </Expression>
          </DataSource>
        </DataSources>
        <WriteActions>
          <WriteAction ID="Alert" TypeID="Health!System.Health.GenerateAlert">
            <Priority>1</Priority>
            <Severity>1</Severity>
            <AlertName />
            <AlertDescription />
            <AlertOwner />
            <AlertMessageId>$MPElement[Name="Microsoft.Windows.Server.AD.Computer.Security.EventID4743.Alert.Rule.AlertMessage"]$</AlertMessageId>
            <AlertParameters>
              <AlertParameter1>$Data/EventDescription$</AlertParameter1>
            </AlertParameters>
            <Suppression>
              <SuppressionValue>$Data/EventDescription$</SuppressionValue>
            </Suppression>
          </WriteAction>
        </WriteActions>
      </Rule>
      <Rule ID="Microsoft.Windows.Server.AD.Group.Security.EventID4727.Alert.Rule" Enabled="false" Target="MWSAD6D!Microsoft.Windows.Server.2016.AD.DomainControllerRole" ConfirmDelivery="true" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>Alert</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="Windows!Microsoft.Windows.EventProvider">
            <ComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</ComputerName>
            <LogName>Security</LogName>
            <Expression>
              <And>
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="UnsignedInteger">4727</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
                <Expression>
                  <RegExExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">EventDescription</XPathQuery>
                    </ValueExpression>
                    <Operator>ContainsSubstring</Operator>
                    <Pattern>A security-enabled global group was created.</Pattern>
                  </RegExExpression>
                </Expression>
              </And>
            </Expression>
          </DataSource>
        </DataSources>
        <WriteActions>
          <WriteAction ID="Alert" TypeID="Health!System.Health.GenerateAlert">
            <Priority>1</Priority>
            <Severity>1</Severity>
            <AlertName />
            <AlertDescription />
            <AlertOwner />
            <AlertMessageId>$MPElement[Name="Microsoft.Windows.Server.AD.Group.Security.EventID4727.Alert.Rule.AlertMessage"]$</AlertMessageId>
            <AlertParameters>
              <AlertParameter1>$Data/EventDescription$</AlertParameter1>
            </AlertParameters>
            <Suppression>
              <SuppressionValue>$Data/EventDescription$</SuppressionValue>
            </Suppression>
          </WriteAction>
        </WriteActions>
      </Rule>
      <Rule ID="Microsoft.Windows.Server.AD.Group.Security.EventID4728.Alert.Rule" Enabled="false" Target="MWSAD6D!Microsoft.Windows.Server.2016.AD.DomainControllerRole" ConfirmDelivery="true" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>Alert</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="Windows!Microsoft.Windows.EventProvider">
            <ComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</ComputerName>
            <LogName>Security</LogName>
            <Expression>
              <And>
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="UnsignedInteger">4728</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
                <Expression>
                  <RegExExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">EventDescription</XPathQuery>
                    </ValueExpression>
                    <Operator>ContainsSubstring</Operator>
                    <Pattern>A member was added to a security-enabled global group.</Pattern>
                  </RegExExpression>
                </Expression>
                <Expression>
                  <RegExExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">EventDescription</XPathQuery>
                    </ValueExpression>
                    <Operator>DoesNotMatchRegularExpression</Operator>
                    <Pattern>^(.*NGNG DoD Visitors*)$</Pattern>
                  </RegExExpression>
                </Expression>
              </And>
            </Expression>
          </DataSource>
        </DataSources>
        <WriteActions>
          <WriteAction ID="Alert" TypeID="Health!System.Health.GenerateAlert">
            <Priority>1</Priority>
            <Severity>1</Severity>
            <AlertName />
            <AlertDescription />
            <AlertOwner />
            <AlertMessageId>$MPElement[Name="Microsoft.Windows.Server.AD.Group.Security.EventID4728.Alert.Rule.AlertMessage"]$</AlertMessageId>
            <AlertParameters>
              <AlertParameter1>$Data/EventDescription$</AlertParameter1>
            </AlertParameters>
            <Suppression>
              <SuppressionValue>$Data/EventDescription$</SuppressionValue>
            </Suppression>
          </WriteAction>
        </WriteActions>
      </Rule>
      <Rule ID="Microsoft.Windows.Server.AD.Group.Security.EventID4729.Alert.Rule" Enabled="false" Target="MWSAD6D!Microsoft.Windows.Server.2016.AD.DomainControllerRole" ConfirmDelivery="true" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>Alert</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="Windows!Microsoft.Windows.EventProvider">
            <ComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</ComputerName>
            <LogName>Security</LogName>
            <Expression>
              <And>
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="UnsignedInteger">4729</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
                <Expression>
                  <RegExExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">EventDescription</XPathQuery>
                    </ValueExpression>
                    <Operator>ContainsSubstring</Operator>
                    <Pattern>A member was removed from a security-enabled global group.</Pattern>
                  </RegExExpression>
                </Expression>
              </And>
            </Expression>
          </DataSource>
        </DataSources>
        <WriteActions>
          <WriteAction ID="Alert" TypeID="Health!System.Health.GenerateAlert">
            <Priority>1</Priority>
            <Severity>1</Severity>
            <AlertName />
            <AlertDescription />
            <AlertOwner />
            <AlertMessageId>$MPElement[Name="Microsoft.Windows.Server.AD.Group.Security.EventID4729.Alert.Rule.AlertMessage"]$</AlertMessageId>
            <AlertParameters>
              <AlertParameter1>$Data/EventDescription$</AlertParameter1>
            </AlertParameters>
            <Suppression>
              <SuppressionValue>$Data/EventDescription$</SuppressionValue>
            </Suppression>
          </WriteAction>
        </WriteActions>
      </Rule>
      <Rule ID="Microsoft.Windows.Server.AD.Group.Security.EventID4730.Alert.Rule" Enabled="false" Target="MWSAD6D!Microsoft.Windows.Server.2016.AD.DomainControllerRole" ConfirmDelivery="true" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>Alert</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="Windows!Microsoft.Windows.EventProvider">
            <ComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</ComputerName>
            <LogName>Security</LogName>
            <Expression>
              <And>
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="UnsignedInteger">4730</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
                <Expression>
                  <RegExExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">EventDescription</XPathQuery>
                    </ValueExpression>
                    <Operator>ContainsSubstring</Operator>
                    <Pattern>A security-enabled local group was deleted.</Pattern>
                  </RegExExpression>
                </Expression>
              </And>
            </Expression>
          </DataSource>
        </DataSources>
        <WriteActions>
          <WriteAction ID="Alert" TypeID="Health!System.Health.GenerateAlert">
            <Priority>1</Priority>
            <Severity>1</Severity>
            <AlertName />
            <AlertDescription />
            <AlertOwner />
            <AlertMessageId>$MPElement[Name="Microsoft.Windows.Server.AD.Group.Security.EventID4730.Alert.Rule.AlertMessage"]$</AlertMessageId>
            <AlertParameters>
              <AlertParameter1>$Data/EventDescription$</AlertParameter1>
            </AlertParameters>
            <Suppression>
              <SuppressionValue>$Data/EventDescription$</SuppressionValue>
            </Suppression>
          </WriteAction>
        </WriteActions>
      </Rule>
      <Rule ID="Microsoft.Windows.Server.AD.Group.Security.EventID4731.Alert.Rule" Enabled="false" Target="MWSAD6D!Microsoft.Windows.Server.2016.AD.DomainControllerRole" ConfirmDelivery="true" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>Alert</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="Windows!Microsoft.Windows.EventProvider">
            <ComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</ComputerName>
            <LogName>Security</LogName>
            <Expression>
              <And>
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="UnsignedInteger">4731</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
                <Expression>
                  <RegExExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">EventDescription</XPathQuery>
                    </ValueExpression>
                    <Operator>ContainsSubstring</Operator>
                    <Pattern>A security-enabled local group was created.</Pattern>
                  </RegExExpression>
                </Expression>
              </And>
            </Expression>
          </DataSource>
        </DataSources>
        <WriteActions>
          <WriteAction ID="Alert" TypeID="Health!System.Health.GenerateAlert">
            <Priority>1</Priority>
            <Severity>1</Severity>
            <AlertName />
            <AlertDescription />
            <AlertOwner />
            <AlertMessageId>$MPElement[Name="Microsoft.Windows.Server.AD.Group.Security.EventID4731.Alert.Rule.AlertMessage"]$</AlertMessageId>
            <AlertParameters>
              <AlertParameter1>$Data/EventDescription$</AlertParameter1>
            </AlertParameters>
            <Suppression>
              <SuppressionValue>$Data/EventDescription$</SuppressionValue>
            </Suppression>
          </WriteAction>
        </WriteActions>
      </Rule>
      <Rule ID="Microsoft.Windows.Server.AD.Group.Security.EventID4732.Alert.Rule" Enabled="false" Target="MWSAD6D!Microsoft.Windows.Server.2016.AD.DomainControllerRole" ConfirmDelivery="true" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>Alert</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="Windows!Microsoft.Windows.EventProvider">
            <ComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</ComputerName>
            <LogName>Security</LogName>
            <Expression>
              <And>
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="UnsignedInteger">4732</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
                <Expression>
                  <RegExExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">EventDescription</XPathQuery>
                    </ValueExpression>
                    <Operator>ContainsSubstring</Operator>
                    <Pattern>A member was added to a security-enabled local group.</Pattern>
                  </RegExExpression>
                </Expression>
              </And>
            </Expression>
          </DataSource>
        </DataSources>
        <WriteActions>
          <WriteAction ID="Alert" TypeID="Health!System.Health.GenerateAlert">
            <Priority>1</Priority>
            <Severity>1</Severity>
            <AlertName />
            <AlertDescription />
            <AlertOwner />
            <AlertMessageId>$MPElement[Name="Microsoft.Windows.Server.AD.Group.Security.EventID4732.Alert.Rule.AlertMessage"]$</AlertMessageId>
            <AlertParameters>
              <AlertParameter1>$Data/EventDescription$</AlertParameter1>
            </AlertParameters>
            <Suppression>
              <SuppressionValue>$Data/EventDescription$</SuppressionValue>
            </Suppression>
          </WriteAction>
        </WriteActions>
      </Rule>
      <Rule ID="Microsoft.Windows.Server.AD.Group.Security.EventID4733.Alert.Rule" Enabled="false" Target="MWSAD6D!Microsoft.Windows.Server.2016.AD.DomainControllerRole" ConfirmDelivery="true" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>Alert</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="Windows!Microsoft.Windows.EventProvider">
            <ComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</ComputerName>
            <LogName>Security</LogName>
            <Expression>
              <And>
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="UnsignedInteger">4733</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
                <Expression>
                  <RegExExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">EventDescription</XPathQuery>
                    </ValueExpression>
                    <Operator>ContainsSubstring</Operator>
                    <Pattern>A member was removed from security-enabled local group.</Pattern>
                  </RegExExpression>
                </Expression>
              </And>
            </Expression>
          </DataSource>
        </DataSources>
        <WriteActions>
          <WriteAction ID="Alert" TypeID="Health!System.Health.GenerateAlert">
            <Priority>1</Priority>
            <Severity>1</Severity>
            <AlertName />
            <AlertDescription />
            <AlertOwner />
            <AlertMessageId>$MPElement[Name="Microsoft.Windows.Server.AD.Group.Security.EventID4733.Alert.Rule.AlertMessage"]$</AlertMessageId>
            <AlertParameters>
              <AlertParameter1>$Data/EventDescription$</AlertParameter1>
            </AlertParameters>
            <Suppression>
              <SuppressionValue>$Data/EventDescription$</SuppressionValue>
            </Suppression>
          </WriteAction>
        </WriteActions>
      </Rule>
      <Rule ID="Microsoft.Windows.Server.AD.Group.Security.EventID4734.Alert.Rule" Enabled="false" Target="MWSAD6D!Microsoft.Windows.Server.2016.AD.DomainControllerRole" ConfirmDelivery="true" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>Alert</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="Windows!Microsoft.Windows.EventProvider">
            <ComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</ComputerName>
            <LogName>Security</LogName>
            <Expression>
              <And>
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="UnsignedInteger">4734</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
                <Expression>
                  <RegExExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">EventDescription</XPathQuery>
                    </ValueExpression>
                    <Operator>ContainsSubstring</Operator>
                    <Pattern>A security-enabled local group was deleted.</Pattern>
                  </RegExExpression>
                </Expression>
              </And>
            </Expression>
          </DataSource>
        </DataSources>
        <WriteActions>
          <WriteAction ID="Alert" TypeID="Health!System.Health.GenerateAlert">
            <Priority>1</Priority>
            <Severity>1</Severity>
            <AlertName />
            <AlertDescription />
            <AlertOwner />
            <AlertMessageId>$MPElement[Name="Microsoft.Windows.Server.AD.Group.Security.EventID4734.Alert.Rule.AlertMessage"]$</AlertMessageId>
            <AlertParameters>
              <AlertParameter1>$Data/EventDescription$</AlertParameter1>
            </AlertParameters>
            <Suppression>
              <SuppressionValue>$Data/EventDescription$</SuppressionValue>
            </Suppression>
          </WriteAction>
        </WriteActions>
      </Rule>
      <Rule ID="Microsoft.Windows.Server.AD.Group.Security.EventID4735.Alert.Rule" Enabled="false" Target="MWSAD6D!Microsoft.Windows.Server.2016.AD.DomainControllerRole" ConfirmDelivery="true" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>Alert</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="Windows!Microsoft.Windows.EventProvider">
            <ComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</ComputerName>
            <LogName>Security</LogName>
            <Expression>
              <And>
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="UnsignedInteger">4735</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
                <Expression>
                  <RegExExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">EventDescription</XPathQuery>
                    </ValueExpression>
                    <Operator>ContainsSubstring</Operator>
                    <Pattern>A security-enabled local group was changed.</Pattern>
                  </RegExExpression>
                </Expression>
              </And>
            </Expression>
          </DataSource>
        </DataSources>
        <WriteActions>
          <WriteAction ID="Alert" TypeID="Health!System.Health.GenerateAlert">
            <Priority>1</Priority>
            <Severity>1</Severity>
            <AlertName />
            <AlertDescription />
            <AlertOwner />
            <AlertMessageId>$MPElement[Name="Microsoft.Windows.Server.AD.Group.Security.EventID4735.Alert.Rule.AlertMessage"]$</AlertMessageId>
            <AlertParameters>
              <AlertParameter1>$Data/EventDescription$</AlertParameter1>
            </AlertParameters>
            <Suppression>
              <SuppressionValue>$Data/EventDescription$</SuppressionValue>
            </Suppression>
          </WriteAction>
        </WriteActions>
      </Rule>
      <Rule ID="Microsoft.Windows.Server.AD.Group.Security.EventID4737.Alert.Rule" Enabled="false" Target="MWSAD6D!Microsoft.Windows.Server.2016.AD.DomainControllerRole" ConfirmDelivery="true" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>Alert</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="Windows!Microsoft.Windows.EventProvider">
            <ComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</ComputerName>
            <LogName>Security</LogName>
            <Expression>
              <And>
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="UnsignedInteger">4737</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
                <Expression>
                  <RegExExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">EventDescription</XPathQuery>
                    </ValueExpression>
                    <Operator>ContainsSubstring</Operator>
                    <Pattern>A group's type was changed.</Pattern>
                  </RegExExpression>
                </Expression>
                <Expression>
                  <RegExExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">EventDescription</XPathQuery>
                    </ValueExpression>
                    <Operator>DoesNotMatchRegularExpression</Operator>
                    <Pattern>^(.*Security ID:.*BUILTIN\Users*)$</Pattern>
                  </RegExExpression>
                </Expression>
              </And>
            </Expression>
          </DataSource>
        </DataSources>
        <WriteActions>
          <WriteAction ID="Alert" TypeID="Health!System.Health.GenerateAlert">
            <Priority>1</Priority>
            <Severity>1</Severity>
            <AlertName />
            <AlertDescription />
            <AlertOwner />
            <AlertMessageId>$MPElement[Name="Microsoft.Windows.Server.AD.Group.Security.EventID4737.Alert.Rule.AlertMessage"]$</AlertMessageId>
            <AlertParameters>
              <AlertParameter1>$Data/EventDescription$</AlertParameter1>
            </AlertParameters>
            <Suppression>
              <SuppressionValue>$Data/EventDescription$</SuppressionValue>
            </Suppression>
          </WriteAction>
        </WriteActions>
      </Rule>
      <Rule ID="Microsoft.Windows.Server.AD.Group.TypeChange.EventID4764.Alert.Rule" Enabled="false" Target="MWSAD6D!Microsoft.Windows.Server.2016.AD.DomainControllerRole" ConfirmDelivery="true" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>Alert</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="Windows!Microsoft.Windows.EventProvider">
            <ComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</ComputerName>
            <LogName>Security</LogName>
            <Expression>
              <And>
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="UnsignedInteger">4764</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
                <Expression>
                  <RegExExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">EventDescription</XPathQuery>
                    </ValueExpression>
                    <Operator>ContainsSubstring</Operator>
                    <Pattern>A group's type was changed.</Pattern>
                  </RegExExpression>
                </Expression>
              </And>
            </Expression>
          </DataSource>
        </DataSources>
        <WriteActions>
          <WriteAction ID="Alert" TypeID="Health!System.Health.GenerateAlert">
            <Priority>1</Priority>
            <Severity>1</Severity>
            <AlertName />
            <AlertDescription />
            <AlertOwner />
            <AlertMessageId>$MPElement[Name="Microsoft.Windows.Server.AD.Group.TypeChange.EventID4764.Alert.Rule.AlertMessage"]$</AlertMessageId>
            <AlertParameters>
              <AlertParameter1>$Data/EventDescription$</AlertParameter1>
            </AlertParameters>
            <Suppression>
              <SuppressionValue>$Data/EventDescription$</SuppressionValue>
            </Suppression>
          </WriteAction>
        </WriteActions>
      </Rule>
      <Rule ID="Microsoft.Windows.Server.AD.User.Security.EventID4720.Alert.Rule" Enabled="false" Target="MWSAD6D!Microsoft.Windows.Server.2016.AD.DomainControllerRole" ConfirmDelivery="true" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>Alert</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="Windows!Microsoft.Windows.EventProvider">
            <ComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</ComputerName>
            <LogName>Security</LogName>
            <Expression>
              <And>
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="UnsignedInteger">4720</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
                <Expression>
                  <RegExExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">EventDescription</XPathQuery>
                    </ValueExpression>
                    <Operator>MatchesRegularExpression</Operator>
                    <Pattern>^(.*A user account was created.*|.*NG.*admin.*)|^(.*NG.*[des]a.*)$</Pattern>
                  </RegExExpression>
                </Expression>
              </And>
            </Expression>
          </DataSource>
        </DataSources>
        <WriteActions>
          <WriteAction ID="Alert" TypeID="Health!System.Health.GenerateAlert">
            <Priority>1</Priority>
            <Severity>1</Severity>
            <AlertName />
            <AlertDescription />
            <AlertOwner />
            <AlertMessageId>$MPElement[Name="Microsoft.Windows.Server.AD.User.Security.EventID4720.Alert.Rule.AlertMessage"]$</AlertMessageId>
            <AlertParameters>
              <AlertParameter1>$Data/EventDescription$</AlertParameter1>
            </AlertParameters>
            <Suppression>
              <SuppressionValue>$Data/EventDescription$</SuppressionValue>
            </Suppression>
          </WriteAction>
        </WriteActions>
      </Rule>
      <Rule ID="Microsoft.Windows.Server.AD.User.Security.EventID4722.Alert.Rule" Enabled="false" Target="MWSAD6D!Microsoft.Windows.Server.2016.AD.DomainControllerRole" ConfirmDelivery="true" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>Alert</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="Windows!Microsoft.Windows.EventProvider">
            <ComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</ComputerName>
            <LogName>Security</LogName>
            <Expression>
              <And>
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="UnsignedInteger">4722</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
                <Expression>
                  <RegExExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">EventDescription</XPathQuery>
                    </ValueExpression>
                    <Operator>MatchesRegularExpression</Operator>
                    <Pattern>^(A user account was enabled.*)|^(.*NG.*[des]a.*)$</Pattern>
                  </RegExExpression>
                </Expression>
                <Expression>
                  <RegExExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">EventDescription</XPathQuery>
                    </ValueExpression>
                    <Operator>DoesNotMatchRegularExpression</Operator>
                    <Pattern>^(.*Account Name:.*[A-Z][A-Z][A-Z][A-Z][0-9]*)$</Pattern>
                  </RegExExpression>
                </Expression>
              </And>
            </Expression>
          </DataSource>
        </DataSources>
        <WriteActions>
          <WriteAction ID="Alert" TypeID="Health!System.Health.GenerateAlert">
            <Priority>1</Priority>
            <Severity>1</Severity>
            <AlertName />
            <AlertDescription />
            <AlertOwner />
            <AlertMessageId>$MPElement[Name="Microsoft.Windows.Server.AD.User.Security.EventID4722.Alert.Rule.AlertMessage"]$</AlertMessageId>
            <AlertParameters>
              <AlertParameter1>$Data/EventDescription$</AlertParameter1>
            </AlertParameters>
            <Suppression>
              <SuppressionValue>$Data/EventDescription$</SuppressionValue>
            </Suppression>
          </WriteAction>
        </WriteActions>
      </Rule>
      <Rule ID="Microsoft.Windows.Server.AD.User.Security.EventID4724.Alert.Rule" Enabled="false" Target="MWSAD6D!Microsoft.Windows.Server.2016.AD.DomainControllerRole" ConfirmDelivery="true" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>Alert</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="Windows!Microsoft.Windows.EventProvider">
            <ComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</ComputerName>
            <LogName>Security</LogName>
            <Expression>
              <And>
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="UnsignedInteger">4724</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
                <Expression>
                  <RegExExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">EventDescription</XPathQuery>
                    </ValueExpression>
                    <Operator>MatchesRegularExpression</Operator>
                    <Pattern>^(An attempt was made to reset an account's password.*)|^(.*NG.*[des]a.*)$</Pattern>
                  </RegExExpression>
                </Expression>
                <Expression>
                  <RegExExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">EventDescription</XPathQuery>
                    </ValueExpression>
                    <Operator>DoesNotMatchRegularExpression</Operator>
                    <Pattern>^(.*Security ID:.*[A-Z][A-Z][A-Z][A-Z][0-9]*)$</Pattern>
                  </RegExExpression>
                </Expression>
              </And>
            </Expression>
          </DataSource>
        </DataSources>
        <WriteActions>
          <WriteAction ID="Alert" TypeID="Health!System.Health.GenerateAlert">
            <Priority>1</Priority>
            <Severity>1</Severity>
            <AlertName />
            <AlertDescription />
            <AlertOwner />
            <AlertMessageId>$MPElement[Name="Microsoft.Windows.Server.AD.User.Security.EventID4724.Alert.Rule.AlertMessage"]$</AlertMessageId>
            <AlertParameters>
              <AlertParameter1>$Data/EventDescription$</AlertParameter1>
            </AlertParameters>
            <Suppression>
              <SuppressionValue>$Data/EventDescription$</SuppressionValue>
            </Suppression>
          </WriteAction>
        </WriteActions>
      </Rule>
      <Rule ID="Microsoft.Windows.Server.AD.User.Security.EventID4726.Alert.Rule" Enabled="false" Target="MWSAD6D!Microsoft.Windows.Server.2016.AD.DomainControllerRole" ConfirmDelivery="true" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>Alert</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="Windows!Microsoft.Windows.EventProvider">
            <ComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</ComputerName>
            <LogName>Security</LogName>
            <Expression>
              <And>
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="UnsignedInteger">4726</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
                <Expression>
                  <RegExExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">EventDescription</XPathQuery>
                    </ValueExpression>
                    <Operator>ContainsSubstring</Operator>
                    <Pattern>A user account was deleted.</Pattern>
                  </RegExExpression>
                </Expression>
                <Expression>
                  <RegExExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">EventDescription</XPathQuery>
                    </ValueExpression>
                    <Operator>DoesNotMatchRegularExpression</Operator>
                    <Pattern>^(.*Account Name:.*[A-Z][A-Z][A-Z][A-Z][0-9].*)$</Pattern>
                  </RegExExpression>
                </Expression>
              </And>
            </Expression>
          </DataSource>
        </DataSources>
        <WriteActions>
          <WriteAction ID="Alert" TypeID="Health!System.Health.GenerateAlert">
            <Priority>1</Priority>
            <Severity>1</Severity>
            <AlertName />
            <AlertDescription />
            <AlertOwner />
            <AlertMessageId>$MPElement[Name="Microsoft.Windows.Server.AD.User.Security.EventID4726.Alert.Rule.AlertMessage"]$</AlertMessageId>
            <AlertParameters>
              <AlertParameter1>$Data/EventDescription$</AlertParameter1>
            </AlertParameters>
            <Suppression>
              <SuppressionValue>$Data/EventDescription$</SuppressionValue>
            </Suppression>
          </WriteAction>
        </WriteActions>
      </Rule>
      <Rule ID="Microsoft.Windows.Server.AD.User.Security.EventID4738.Alert.Rule" Enabled="false" Target="MWSAD6D!Microsoft.Windows.Server.2016.AD.DomainControllerRole" ConfirmDelivery="true" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>Alert</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="Windows!Microsoft.Windows.EventProvider">
            <ComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</ComputerName>
            <LogName>Security</LogName>
            <Expression>
              <And>
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="UnsignedInteger">4738</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
                <Expression>
                  <RegExExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">EventDescription</XPathQuery>
                    </ValueExpression>
                    <Operator>ContainsSubstring</Operator>
                    <Pattern>A user account was changed.</Pattern>
                  </RegExExpression>
                </Expression>
                <Expression>
                  <RegExExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">EventDescription</XPathQuery>
                    </ValueExpression>
                    <Operator>DoesNotMatchRegularExpression</Operator>
                    <Pattern>^(.*Account Name:.*[A-Z][A-Z][A-Z][A-Z][0-9]*)$</Pattern>
                  </RegExExpression>
                </Expression>
              </And>
            </Expression>
          </DataSource>
        </DataSources>
        <WriteActions>
          <WriteAction ID="Alert" TypeID="Health!System.Health.GenerateAlert">
            <Priority>1</Priority>
            <Severity>1</Severity>
            <AlertName />
            <AlertDescription />
            <AlertOwner />
            <AlertMessageId>$MPElement[Name="Microsoft.Windows.Server.AD.User.Security.EventID4738.Alert.Rule.AlertMessage"]$</AlertMessageId>
            <AlertParameters>
              <AlertParameter1>$Data/EventDescription$</AlertParameter1>
            </AlertParameters>
            <Suppression>
              <SuppressionValue>$Data/EventDescription$</SuppressionValue>
            </Suppression>
          </WriteAction>
        </WriteActions>
      </Rule>
      <Rule ID="Microsoft.Windows.Server.AD.User.Security.EventID4740.Alert.Rule" Enabled="false" Target="MWSAD6D!Microsoft.Windows.Server.2016.AD.DomainControllerRole" ConfirmDelivery="true" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>Alert</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="Windows!Microsoft.Windows.EventProvider">
            <ComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</ComputerName>
            <LogName>Security</LogName>
            <Expression>
              <And>
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="UnsignedInteger">4740</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
                <Expression>
                  <RegExExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">EventDescription</XPathQuery>
                    </ValueExpression>
                    <Operator>MatchesRegularExpression</Operator>
                    <Pattern>^(A user account was locked out.*)|^(.*Account Name.*)|^(.*NG.*admin.*)|^(.*NG.*ea.*)|^(.*NG.*da.*)|^(.*NG.*sa.*)$</Pattern>
                  </RegExExpression>
                </Expression>
              </And>
            </Expression>
          </DataSource>
        </DataSources>
        <WriteActions>
          <WriteAction ID="Alert" TypeID="Health!System.Health.GenerateAlert">
            <Priority>1</Priority>
            <Severity>1</Severity>
            <AlertName />
            <AlertDescription />
            <AlertOwner />
            <AlertMessageId>$MPElement[Name="Microsoft.Windows.Server.AD.User.Security.EventID4740.Alert.Rule.AlertMessage"]$</AlertMessageId>
            <AlertParameters>
              <AlertParameter1>$Data/EventDescription$</AlertParameter1>
            </AlertParameters>
            <Suppression>
              <SuppressionValue>$Data/EventDescription$</SuppressionValue>
            </Suppression>
          </WriteAction>
        </WriteActions>
      </Rule>
      <Rule ID="Microsoft.Windows.Server.AD.User.Security.EventID4767.Alert.Rule" Enabled="false" Target="MWSAD6D!Microsoft.Windows.Server.2016.AD.DomainControllerRole" ConfirmDelivery="true" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>Alert</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="Windows!Microsoft.Windows.EventProvider">
            <ComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</ComputerName>
            <LogName>Security</LogName>
            <Expression>
              <And>
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="UnsignedInteger">4767</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
                <Expression>
                  <RegExExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">EventDescription</XPathQuery>
                    </ValueExpression>
                    <Operator>MatchesRegularExpression</Operator>
                    <Pattern>^(A user account was unlocked.*)|^(.*Account Name.*)|^(.*NG.*admin.*)|^(.*NG.*ea.*)|^(.*NG.*da.*)|^(.*NG.*sa.*)$</Pattern>
                  </RegExExpression>
                </Expression>
              </And>
            </Expression>
          </DataSource>
        </DataSources>
        <WriteActions>
          <WriteAction ID="Alert" TypeID="Health!System.Health.GenerateAlert">
            <Priority>1</Priority>
            <Severity>1</Severity>
            <AlertName />
            <AlertDescription />
            <AlertOwner />
            <AlertMessageId>$MPElement[Name="Microsoft.Windows.Server.AD.User.Security.EventID4767.Alert.Rule.AlertMessage"]$</AlertMessageId>
            <AlertParameters>
              <AlertParameter1>$Data/EventDescription$</AlertParameter1>
            </AlertParameters>
            <Suppression>
              <SuppressionValue>$Data/EventDescription$</SuppressionValue>
            </Suppression>
          </WriteAction>
        </WriteActions>
      </Rule>
      <Rule ID="Microsoft.Windows.Server.AD.User.Security.EventID4781.Alert.Rule" Enabled="false" Target="MWSAD6D!Microsoft.Windows.Server.2016.AD.DomainControllerRole" ConfirmDelivery="true" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>Alert</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="Windows!Microsoft.Windows.EventProvider">
            <ComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</ComputerName>
            <LogName>Security</LogName>
            <Expression>
              <And>
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="UnsignedInteger">4781</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
                <Expression>
                  <RegExExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">EventDescription</XPathQuery>
                    </ValueExpression>
                    <Operator>MatchesRegularExpression</Operator>
                    <Pattern>^(The name of an account was changed.*)|^(.*Account Name.*)|^(.*NG.*admin.*)|^(.*NG.*ea.*)|^(.*NG.*da.*)|^(.*NG.*sa.*)$</Pattern>
                  </RegExExpression>
                </Expression>
              </And>
            </Expression>
          </DataSource>
        </DataSources>
        <WriteActions>
          <WriteAction ID="Alert" TypeID="Health!System.Health.GenerateAlert">
            <Priority>1</Priority>
            <Severity>1</Severity>
            <AlertName />
            <AlertDescription />
            <AlertOwner />
            <AlertMessageId>$MPElement[Name="Microsoft.Windows.Server.AD.User.Security.EventID4781.Alert.Rule.AlertMessage"]$</AlertMessageId>
            <AlertParameters>
              <AlertParameter1>$Data/EventDescription$</AlertParameter1>
            </AlertParameters>
            <Suppression>
              <SuppressionValue>$Data/EventDescription$</SuppressionValue>
            </Suppression>
          </WriteAction>
        </WriteActions>
      </Rule>
      <Rule ID="Microsoft.Windows.Server.AD.PasswordCheck.Script.Alert.Rule" Enabled="true" Target="SC!Microsoft.SystemCenter.AllManagementServersPool" ConfirmDelivery="true" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>Alert</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="Microsoft.Windows.Server.AD.PasswordCheck.Script.DataSource">
            <TimeoutSeconds>900</TimeoutSeconds>
          </DataSource>
        </DataSources>
        <WriteActions>
          <WriteAction ID="WA" TypeID="Health!System.Health.GenerateAlert">
            <Priority>1</Priority>
            <Severity>0</Severity>
            <AlertMessageId>$MPElement[Name="Microsoft.Windows.Server.AD.PasswordCheck.Script.Alert.Rule.AlertMessage"]$</AlertMessageId>
            <AlertParameters>
              <AlertParameter1>$Data/Property[@Name='Message']$</AlertParameter1>
              <AlertParameter2>$Data/Property[@Name='Summary']$</AlertParameter2>
            </AlertParameters>
            <Suppression>
              <SuppressionValue>$Data/Property[@Name='Message']$</SuppressionValue>
            </Suppression>
          </WriteAction>
        </WriteActions>
      </Rule>
      <Rule ID="Microsoft.Windows.Server.AppOwner.PasswordCheck.Script.Alert.Rule" Enabled="true" Target="SC!Microsoft.SystemCenter.AllManagementServersPool" ConfirmDelivery="true" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>Alert</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="Windows!Microsoft.Windows.EventProvider">
            <LogName>Operations Manager</LogName>
            <Expression>
              <And>
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="UnsignedInteger">606</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">PublisherName</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="String">Health Service Script</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
                <Expression>
                  <RegExExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">EventDescription</XPathQuery>
                    </ValueExpression>
                    <Operator>ContainsSubstring</Operator>
                    <Pattern>Service Account issues for date</Pattern>
                  </RegExExpression>
                </Expression>
              </And>
            </Expression>
          </DataSource>
        </DataSources>
        <WriteActions>
          <WriteAction ID="Alert" TypeID="Health!System.Health.GenerateAlert">
            <Priority>1</Priority>
            <Severity>0</Severity>
            <AlertName />
            <AlertDescription />
            <AlertOwner />
            <AlertMessageId>$MPElement[Name="Microsoft.Windows.Server.AppOwner.PasswordCheck.Script.Alert.Rule.AlertMessage"]$</AlertMessageId>
            <AlertParameters>
              <AlertParameter1>$Data/EventDescription$</AlertParameter1>
            </AlertParameters>
            <Suppression />
          </WriteAction>
        </WriteActions>
      </Rule>
      <Rule ID="Microsoft.Windows.Server.AD.ID.PasswordCheck.Script.Alert.Rule" Enabled="true" Target="SC!Microsoft.SystemCenter.AllManagementServersPool" ConfirmDelivery="true" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>Alert</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="Windows!Microsoft.Windows.EventProvider">
            <LogName>Operations Manager</LogName>
            <Expression>
              <And>
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="UnsignedInteger">607</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">PublisherName</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="String">Health Service Script</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
                <Expression>
                  <RegExExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">EventDescription</XPathQuery>
                    </ValueExpression>
                    <Operator>ContainsSubstring</Operator>
                    <Pattern>Proactive Idaho AD Account issues for date</Pattern>
                  </RegExExpression>
                </Expression>
              </And>
            </Expression>
          </DataSource>
        </DataSources>
        <WriteActions>
          <WriteAction ID="Alert" TypeID="Health!System.Health.GenerateAlert">
            <Priority>1</Priority>
            <Severity>0</Severity>
            <AlertName />
            <AlertDescription />
            <AlertOwner />
            <AlertMessageId>$MPElement[Name="Microsoft.Windows.Server.AD.ID.PasswordCheck.Script.Alert.Rule.AlertMessage"]$</AlertMessageId>
            <AlertParameters>
              <AlertParameter1>$Data/EventDescription$</AlertParameter1>
            </AlertParameters>
            <Suppression />
          </WriteAction>
        </WriteActions>
      </Rule>
      <Rule ID="Microsoft.Windows.Server.AD.PasswordCheck.Script.Task.Alert.Rule" Enabled="true" Target="SC!Microsoft.SystemCenter.AllManagementServersPool" ConfirmDelivery="true" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>Alert</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="Windows!Microsoft.Windows.EventProvider">
            <LogName>Operations Manager</LogName>
            <Expression>
              <And>
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="UnsignedInteger">607</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">PublisherName</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="String">Health Service Script</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
                <Expression>
                  <RegExExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">EventDescription</XPathQuery>
                    </ValueExpression>
                    <Operator>ContainsSubstring</Operator>
                    <Pattern>Proactive AD Account issues task for date </Pattern>
                  </RegExExpression>
                </Expression>
              </And>
            </Expression>
          </DataSource>
        </DataSources>
        <WriteActions>
          <WriteAction ID="Alert" TypeID="Health!System.Health.GenerateAlert">
            <Priority>1</Priority>
            <Severity>0</Severity>
            <AlertName />
            <AlertDescription />
            <AlertOwner />
            <AlertMessageId>$MPElement[Name="Microsoft.Windows.Server.AD.PasswordCheck.Script.Task.Alert.Rule.AlertMessage"]$</AlertMessageId>
            <AlertParameters>
              <AlertParameter1>$Data/EventDescription$</AlertParameter1>
            </AlertParameters>
            <Suppression />
          </WriteAction>
        </WriteActions>
      </Rule>
      <Rule ID="Microsoft.Windows.Server.AD.ID.PasswordCheck.Script.Task.Alert.Rule" Enabled="true" Target="SC!Microsoft.SystemCenter.AllManagementServersPool" ConfirmDelivery="true" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>Alert</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="Windows!Microsoft.Windows.EventProvider">
            <LogName>Operations Manager</LogName>
            <Expression>
              <And>
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="UnsignedInteger">607</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">PublisherName</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="String">Health Service Script</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
                <Expression>
                  <RegExExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">EventDescription</XPathQuery>
                    </ValueExpression>
                    <Operator>ContainsSubstring</Operator>
                    <Pattern>Proactive Idaho AD Account issues task for date </Pattern>
                  </RegExExpression>
                </Expression>
              </And>
            </Expression>
          </DataSource>
        </DataSources>
        <WriteActions>
          <WriteAction ID="Alert" TypeID="Health!System.Health.GenerateAlert">
            <Priority>1</Priority>
            <Severity>0</Severity>
            <AlertName />
            <AlertDescription />
            <AlertOwner />
            <AlertMessageId>$MPElement[Name="Microsoft.Windows.Server.AD.ID.PasswordCheck.Script.Task.Alert.Rule.AlertMessage"]$</AlertMessageId>
            <AlertParameters>
              <AlertParameter1>$Data/EventDescription$</AlertParameter1>
            </AlertParameters>
            <Suppression />
          </WriteAction>
        </WriteActions>
      </Rule>
      <Rule ID="Proactive.Security.Group.Global.Member.Changes.Script.Alert.Rule" Enabled="true" Target="MWSAD6D!Microsoft.Windows.Server.2016.AD.DomainControllerRole" ConfirmDelivery="true" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>Alert</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="Proactive.Security.Group.Global.Member.Changes.Script.DataSource">
            <IntervalSeconds>3600</IntervalSeconds>
            <SyncTime />
            <TimeoutSeconds>120</TimeoutSeconds>
          </DataSource>
        </DataSources>
        <ConditionDetection ID="CD" TypeID="System!System.ExpressionFilter">
          <Expression>
            <SimpleExpression>
              <ValueExpression>
                <XPathQuery Type="String">Property[@Name='Result']</XPathQuery>
              </ValueExpression>
              <Operator>Equal</Operator>
              <ValueExpression>
                <Value Type="String">BAD</Value>
              </ValueExpression>
            </SimpleExpression>
          </Expression>
        </ConditionDetection>
        <WriteActions>
          <WriteAction ID="WA" TypeID="Health!System.Health.GenerateAlert">
            <Priority>1</Priority>
            <Severity>1</Severity>
            <AlertMessageId>$MPElement[Name="Proactive.Security.Group.Global.Member.Changes.Script.Alert.Rule.AlertMessage"]$</AlertMessageId>
            <AlertParameters>
              <AlertParameter1>$Data/Property[@Name='Result']$</AlertParameter1>
              <AlertParameter2>$Data/Property[@Name='TempCount']$</AlertParameter2>
              <AlertParameter3>$Data/Property[@Name='Message']$</AlertParameter3>
            </AlertParameters>
            <Suppression>
              <SuppressionValue>$Data/Property[@Name='Message']$</SuppressionValue>
            </Suppression>
          </WriteAction>
        </WriteActions>
      </Rule>
      <Rule ID="Proactive.Security.User.Change.Script.Alert.Rule" Enabled="false" Target="MWSAD6D!Microsoft.Windows.Server.2016.AD.DomainControllerRole" ConfirmDelivery="true" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>Alert</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="Proactive.Security.User.Change.Script.DataSource">
            <IntervalSeconds>3600</IntervalSeconds>
            <SyncTime />
            <TimeoutSeconds>120</TimeoutSeconds>
          </DataSource>
        </DataSources>
        <ConditionDetection ID="CD" TypeID="System!System.ExpressionFilter">
          <Expression>
            <SimpleExpression>
              <ValueExpression>
                <XPathQuery Type="String">Property[@Name='Result']</XPathQuery>
              </ValueExpression>
              <Operator>Equal</Operator>
              <ValueExpression>
                <Value Type="String">BAD</Value>
              </ValueExpression>
            </SimpleExpression>
          </Expression>
        </ConditionDetection>
        <WriteActions>
          <WriteAction ID="WA" TypeID="Health!System.Health.GenerateAlert">
            <Priority>1</Priority>
            <Severity>1</Severity>
            <AlertMessageId>$MPElement[Name="Proactive.Security.User.Change.Script.Alert.Rule.AlertMessage"]$</AlertMessageId>
            <AlertParameters>
              <AlertParameter1>$Data/Property[@Name='Result']$</AlertParameter1>
              <AlertParameter2>$Data/Property[@Name='TempCount']$</AlertParameter2>
              <AlertParameter3>$Data/Property[@Name='Message']$</AlertParameter3>
            </AlertParameters>
            <Suppression>
              <SuppressionValue>$Data/Property[@Name='Message']$</SuppressionValue>
            </Suppression>
          </WriteAction>
        </WriteActions>
      </Rule>
    </Rules>
    <Tasks>
      <Task ID="Microsoft.Windows.Server.AD.PasswordCheck.Task" Accessibility="Public" Enabled="true" Target="SC!Microsoft.SystemCenter.AllManagementServersPool" Timeout="120" Remotable="true">
        <Category>Custom</Category>
        <WriteAction ID="PSWA" TypeID="Microsoft.Windows.Server.AD.PasswordCheck.Monitor.WA">
          <TimeoutSeconds>300</TimeoutSeconds>
        </WriteAction>
      </Task>
    </Tasks>
    <Monitors>
      <UnitMonitor ID="Microsoft.Windows.Server.AD.Account.Lockout.Count.Monitor" Accessibility="Public" Enabled="false" Target="MWSAD6D!Microsoft.Windows.Server.2016.AD.DomainControllerRole" ParentMonitorID="Health!System.Health.SecurityState" Remotable="true" Priority="Normal" RunAs="System!System.PrivilegedMonitoringAccount" TypeID="Microsoft.Windows.Server.AD.SingleEventLogTimer2StateMonitorType" ConfirmDelivery="false">
        <Category>AvailabilityHealth</Category>
        <AlertSettings AlertMessage="Microsoft.Windows.Server.AD.Account.Lockout.Count.Monitor.AlertMessage">
          <AlertOnState>Warning</AlertOnState>
          <AutoResolve>true</AutoResolve>
          <AlertPriority>High</AlertPriority>
          <AlertSeverity>Warning</AlertSeverity>
          <AlertParameters>
            <AlertParameter1>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/PrincipalName$</AlertParameter1>
            <AlertParameter2>$Data/Context/DataItem/EventDescription$</AlertParameter2>
          </AlertParameters>
        </AlertSettings>
        <OperationalStates>
          <OperationalState ID="TimerEventRaised" MonitorTypeStateID="TimerEventRaised" HealthState="Success" />
          <OperationalState ID="EventRaised" MonitorTypeStateID="EventRaised" HealthState="Error" />
        </OperationalStates>
        <Configuration>
          <ComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</ComputerName>
          <LogName>Security</LogName>
          <Expression>
            <And>
              <Expression>
                <RegExExpression>
                  <ValueExpression>
                    <XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery>
                  </ValueExpression>
                  <Operator>MatchesMOM2005BooleanRegularExpression</Operator>
                  <Pattern>^(4625|4740)$</Pattern>
                </RegExExpression>
              </Expression>
              <Expression>
                <RegExExpression>
                  <ValueExpression>
                    <XPathQuery Type="String">EventDescription</XPathQuery>
                  </ValueExpression>
                  <Operator>MatchesRegularExpression</Operator>
                  <Pattern>^(An account failed to log on.)|^(Account For Which Logon Failed:)$</Pattern>
                </RegExExpression>
              </Expression>
            </And>
          </Expression>
          <TimerWaitInSeconds>3600</TimerWaitInSeconds>
          <MatchCount>300</MatchCount>
        </Configuration>
      </UnitMonitor>
      <UnitMonitor ID="Microsoft.Windows.Server.AD.SVC.Account.Lockout.Monitor" Accessibility="Public" Enabled="true" Target="MWSAD6D!Microsoft.Windows.Server.2016.AD.DomainControllerRole" ParentMonitorID="Health!System.Health.AvailabilityState" Remotable="true" Priority="Normal" TypeID="Windows!Microsoft.Windows.SingleEventLogTimer2StateMonitorType" ConfirmDelivery="true">
        <Category>Custom</Category>
        <AlertSettings AlertMessage="Microsoft.Windows.Server.AD.SVC.Account.Lockout.Monitor_AlertMessageResourceID">
          <AlertOnState>Warning</AlertOnState>
          <AutoResolve>true</AutoResolve>
          <AlertPriority>Normal</AlertPriority>
          <AlertSeverity>Warning</AlertSeverity>
          <AlertParameters>
            <AlertParameter1>$Data/Context/EventDescription$</AlertParameter1>
          </AlertParameters>
        </AlertSettings>
        <OperationalStates>
          <OperationalState ID="Running" MonitorTypeStateID="EventRaised" HealthState="Warning" />
          <OperationalState ID="NotRunning" MonitorTypeStateID="TimerEventRaised" HealthState="Success" />
        </OperationalStates>
        <Configuration>
          <ComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</ComputerName>
          <LogName>Security</LogName>
          <Expression>
            <And>
              <Expression>
                <RegExExpression>
                  <ValueExpression>
                    <XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery>
                  </ValueExpression>
                  <Operator>MatchesMOM2005BooleanRegularExpression</Operator>
                  <Pattern>^(4625|4740)$</Pattern>
                </RegExExpression>
              </Expression>
              <Expression>
                <RegExExpression>
                  <ValueExpression>
                    <XPathQuery Type="String">EventDescription</XPathQuery>
                  </ValueExpression>
                  <Operator>MatchesMOM2005BooleanRegularExpression</Operator>
                  <Pattern>^(svc.ng0.scom|svc.sharescomwb|svc.share2013scom|svc.cmagent|svc.cmnaa[1-4].ngng|svc.sccmsql.ng0|svc.ngee.sccmrepng|svc.nge[ew].sccmsqlng)$</Pattern>
                </RegExExpression>
              </Expression>
            </And>
          </Expression>
          <TimerWaitInSeconds>900</TimerWaitInSeconds>
        </Configuration>
      </UnitMonitor>
      <UnitMonitor ID="Microsoft.Windows.Server.AD.Account.Lockout.Monitor" Accessibility="Public" Enabled="true" Target="MWSAD6D!Microsoft.Windows.Server.2016.AD.DomainControllerRole" ParentMonitorID="Health!System.Health.AvailabilityState" Remotable="true" Priority="Normal" TypeID="Windows!Microsoft.Windows.SingleEventLogTimer2StateMonitorType" ConfirmDelivery="true">
        <Category>Custom</Category>
        <AlertSettings AlertMessage="Microsoft.Windows.Server.AD.Account.Lockout.Monitor_AlertMessageResourceID">
          <AlertOnState>Warning</AlertOnState>
          <AutoResolve>true</AutoResolve>
          <AlertPriority>Normal</AlertPriority>
          <AlertSeverity>Warning</AlertSeverity>
          <AlertParameters>
            <AlertParameter1>$Data/Context/EventDescription$</AlertParameter1>
          </AlertParameters>
        </AlertSettings>
        <OperationalStates>
          <OperationalState ID="Running" MonitorTypeStateID="EventRaised" HealthState="Warning" />
          <OperationalState ID="NotRunning" MonitorTypeStateID="TimerEventRaised" HealthState="Success" />
        </OperationalStates>
        <Configuration>
          <ComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</ComputerName>
          <LogName>Security</LogName>
          <Expression>
            <And>
              <Expression>
                <RegExExpression>
                  <ValueExpression>
                    <XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery>
                  </ValueExpression>
                  <Operator>MatchesMOM2005BooleanRegularExpression</Operator>
                  <Pattern>^(4625|4740)$</Pattern>
                </RegExExpression>
              </Expression>
              <Expression>
                <RegExExpression>
                  <ValueExpression>
                    <XPathQuery Type="String">EventDescription</XPathQuery>
                  </ValueExpression>
                  <Operator>MatchesMOM2005BooleanRegularExpression</Operator>
                  <Pattern>^(svc.ng0.scom|svc.sharescomwb|svc.share2013scom|svc.cmagent|svc.cmnaa[1-4].ngng|svc.sccmsql.ng0|svc.ngee.sccmrepng|svc.nge[ew].sccmsqlng)$</Pattern>
                </RegExExpression>
              </Expression>
            </And>
          </Expression>
          <TimerWaitInSeconds>900</TimerWaitInSeconds>
        </Configuration>
      </UnitMonitor>
      <UnitMonitor ID="Microsoft.Windows.Server.AD.ID.Account.Lockout.Monitor" Accessibility="Public" Enabled="true" Target="MWSAD6D!Microsoft.Windows.Server.2016.AD.DomainControllerRole" ParentMonitorID="Health!System.Health.AvailabilityState" Remotable="true" Priority="Normal" TypeID="Windows!Microsoft.Windows.SingleEventLogTimer2StateMonitorType" ConfirmDelivery="true">
        <Category>Custom</Category>
        <AlertSettings AlertMessage="Microsoft.Windows.Server.AD.ID.Account.Lockout.Monitor_AlertMessageResourceID">
          <AlertOnState>Warning</AlertOnState>
          <AutoResolve>true</AutoResolve>
          <AlertPriority>Normal</AlertPriority>
          <AlertSeverity>Warning</AlertSeverity>
          <AlertParameters>
            <AlertParameter1>$Data/Context/EventDescription$</AlertParameter1>
          </AlertParameters>
        </AlertSettings>
        <OperationalStates>
          <OperationalState ID="Running" MonitorTypeStateID="EventRaised" HealthState="Warning" />
          <OperationalState ID="NotRunning" MonitorTypeStateID="TimerEventRaised" HealthState="Success" />
        </OperationalStates>
        <Configuration>
          <ComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</ComputerName>
          <LogName>Security</LogName>
          <Expression>
            <And>
              <Expression>
                <RegExExpression>
                  <ValueExpression>
                    <XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery>
                  </ValueExpression>
                  <Operator>MatchesMOM2005BooleanRegularExpression</Operator>
                  <Pattern>^(4625|4740)$</Pattern>
                </RegExExpression>
              </Expression>
              <Expression>
                <RegExExpression>
                  <ValueExpression>
                    <XPathQuery Type="String">EventDescription</XPathQuery>
                  </ValueExpression>
                  <Operator>MatchesMOM2005BooleanRegularExpression</Operator>
                  <Pattern>^(svc.*.ngid|firedesk|flightOps.ngid|rangecontrol|srp.user)$</Pattern>
                </RegExExpression>
              </Expression>
            </And>
          </Expression>
          <TimerWaitInSeconds>900</TimerWaitInSeconds>
        </Configuration>
      </UnitMonitor>
      <UnitMonitor ID="Microsoft.Windows.Server.AD.Auth.Failed.Monitor" Accessibility="Public" Enabled="true" Target="MWSAD6D!Microsoft.Windows.Server.2016.AD.DomainControllerRole" ParentMonitorID="Health!System.Health.AvailabilityState" Remotable="true" Priority="Normal" TypeID="Windows!Microsoft.Windows.SingleEventLogTimer2StateMonitorType" ConfirmDelivery="true">
        <Category>Custom</Category>
        <AlertSettings AlertMessage="Microsoft.Windows.Server.AD.Auth.Failed.Monitor_AlertMessageResourceID">
          <AlertOnState>Warning</AlertOnState>
          <AutoResolve>true</AutoResolve>
          <AlertPriority>Normal</AlertPriority>
          <AlertSeverity>Warning</AlertSeverity>
          <AlertParameters>
            <AlertParameter1>$Data/Context/EventDescription$</AlertParameter1>
          </AlertParameters>
        </AlertSettings>
        <OperationalStates>
          <OperationalState ID="Running" MonitorTypeStateID="EventRaised" HealthState="Warning" />
          <OperationalState ID="NotRunning" MonitorTypeStateID="TimerEventRaised" HealthState="Success" />
        </OperationalStates>
        <Configuration>
          <ComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</ComputerName>
          <LogName>System</LogName>
          <Expression>
            <And>
              <Expression>
                <RegExExpression>
                  <ValueExpression>
                    <XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery>
                  </ValueExpression>
                  <Operator>MatchesRegularExpression</Operator>
                  <Pattern>^(40961)$</Pattern>
                </RegExExpression>
              </Expression>
              <Expression>
                <RegExExpression>
                  <ValueExpression>
                    <XPathQuery Type="String">EventDescription</XPathQuery>
                  </ValueExpression>
                  <Operator>MatchesRegularExpression</Operator>
                  <Pattern>^(NGEEA1D30..ng.ds.army.mil)$</Pattern>
                </RegExExpression>
              </Expression>
            </And>
          </Expression>
          <TimerWaitInSeconds>900</TimerWaitInSeconds>
        </Configuration>
      </UnitMonitor>
      <UnitMonitor ID="Microsoft.Windows.Server.AD.PasswordCheck.Monitor" Accessibility="Public" Enabled="true" Target="SC!Microsoft.SystemCenter.AllManagementServersPool" ParentMonitorID="Health!System.Health.AvailabilityState" Remotable="true" Priority="Normal" TypeID="Microsoft.Windows.Server.AD.PasswordCheck.Monitor.MonitorType" ConfirmDelivery="true">
        <Category>AvailabilityHealth</Category>
        <AlertSettings AlertMessage="Microsoft.Windows.Server.AD.PasswordCheck.Monitor.AlertMessage">
          <AlertOnState>Warning</AlertOnState>
          <AutoResolve>true</AutoResolve>
          <AlertPriority>Normal</AlertPriority>
          <AlertSeverity>MatchMonitorHealth</AlertSeverity>
        </AlertSettings>
        <OperationalStates>
          <OperationalState ID="GoodCondition" MonitorTypeStateID="GoodCondition" HealthState="Success" />
          <OperationalState ID="BadCondition" MonitorTypeStateID="BadCondition" HealthState="Warning" />
        </OperationalStates>
        <Configuration>
          <IntervalSeconds>86374</IntervalSeconds>
          <SyncTime />
          <TimeoutSeconds>900</TimeoutSeconds>
        </Configuration>
      </UnitMonitor>
    </Monitors>
  </Monitoring>
  <Presentation>
    <StringResources>
      <StringResource ID="Microsoft.Windows.Server.AD.Auth.Failed.EventID40961.Alert.Rule.AlertMessage" />
      <StringResource ID="Microsoft.Windows.Server.AD.Auth.Security.EventID4625.Alert.Rule.AlertMessage" />
      <StringResource ID="Microsoft.Windows.Server.AD.Computer.Security.EventID4742.Alert.Rule.AlertMessage" />
      <StringResource ID="Microsoft.Windows.Server.AD.Computer.Security.EventID4743.Alert.Rule.AlertMessage" />
      <StringResource ID="Microsoft.Windows.Server.AD.Group.Security.EventID4727.Alert.Rule.AlertMessage" />
      <StringResource ID="Microsoft.Windows.Server.AD.Group.Security.EventID4728.Alert.Rule.AlertMessage" />
      <StringResource ID="Microsoft.Windows.Server.AD.Group.Security.EventID4729.Alert.Rule.AlertMessage" />
      <StringResource ID="Microsoft.Windows.Server.AD.Group.Security.EventID4730.Alert.Rule.AlertMessage" />
      <StringResource ID="Microsoft.Windows.Server.AD.Group.Security.EventID4731.Alert.Rule.AlertMessage" />
      <StringResource ID="Microsoft.Windows.Server.AD.Group.Security.EventID4732.Alert.Rule.AlertMessage" />
      <StringResource ID="Microsoft.Windows.Server.AD.Group.Security.EventID4733.Alert.Rule.AlertMessage" />
      <StringResource ID="Microsoft.Windows.Server.AD.Group.Security.EventID4734.Alert.Rule.AlertMessage" />
      <StringResource ID="Microsoft.Windows.Server.AD.Group.Security.EventID4735.Alert.Rule.AlertMessage" />
      <StringResource ID="Microsoft.Windows.Server.AD.Group.Security.EventID4737.Alert.Rule.AlertMessage" />
      <StringResource ID="Microsoft.Windows.Server.AD.Group.TypeChange.EventID4764.Alert.Rule.AlertMessage" />
      <StringResource ID="Microsoft.Windows.Server.AD.User.Security.EventID4720.Alert.Rule.AlertMessage" />
      <StringResource ID="Microsoft.Windows.Server.AD.User.Security.EventID4722.Alert.Rule.AlertMessage" />
      <StringResource ID="Microsoft.Windows.Server.AD.User.Security.EventID4724.Alert.Rule.AlertMessage" />
      <StringResource ID="Microsoft.Windows.Server.AD.User.Security.EventID4726.Alert.Rule.AlertMessage" />
      <StringResource ID="Microsoft.Windows.Server.AD.User.Security.EventID4738.Alert.Rule.AlertMessage" />
      <StringResource ID="Microsoft.Windows.Server.AD.User.Security.EventID4740.Alert.Rule.AlertMessage" />
      <StringResource ID="Microsoft.Windows.Server.AD.User.Security.EventID4767.Alert.Rule.AlertMessage" />
      <StringResource ID="Microsoft.Windows.Server.AD.User.Security.EventID4781.Alert.Rule.AlertMessage" />
      <StringResource ID="Proactive.Security.Group.Global.Member.Changes.Script.Alert.Rule.AlertMessage" />
      <StringResource ID="Proactive.Security.User.Change.Script.Alert.Rule.AlertMessage" />
      <StringResource ID="Microsoft.Windows.Server.AD.PasswordCheck.Script.Alert.Rule.AlertMessage" />
      <StringResource ID="Microsoft.Windows.Server.AppOwner.PasswordCheck.Script.Alert.Rule.AlertMessage" />
      <StringResource ID="Microsoft.Windows.Server.AD.ID.PasswordCheck.Script.Alert.Rule.AlertMessage" />
      <StringResource ID="Microsoft.Windows.Server.AD.PasswordCheck.Script.Task.Alert.Rule.AlertMessage" />
      <StringResource ID="Microsoft.Windows.Server.AD.ID.PasswordCheck.Script.Task.Alert.Rule.AlertMessage" />
      <StringResource ID="Microsoft.Windows.Server.AD.Account.Lockout.Count.Monitor.AlertMessage" />
      <StringResource ID="Microsoft.Windows.Server.AD.SVC.Account.Lockout.Monitor_AlertMessageResourceID" />
      <StringResource ID="Microsoft.Windows.Server.AD.Account.Lockout.Monitor_AlertMessageResourceID" />
      <StringResource ID="Microsoft.Windows.Server.AD.ID.Account.Lockout.Monitor_AlertMessageResourceID" />
      <StringResource ID="Microsoft.Windows.Server.AD.Auth.Failed.Monitor_AlertMessageResourceID" />
      <StringResource ID="Microsoft.Windows.Server.AD.PasswordCheck.Monitor.AlertMessage" />
    </StringResources>
  </Presentation>
  <LanguagePacks>
    <LanguagePack ID="ENU" IsDefault="false">
      <DisplayStrings>
        <DisplayString ElementID="Proactive.Microsoft.Windows.Server.AD.Account.Password.Customizations">
          <Name>Proactive Microsoft Windows Server AD 2016 Account Password Customizations</Name>
          <Description>
v1.0.3.8   8 Jun 2023 - Updated Event rule 4634 to rule out computer logouts
v1.0.3.7   6 Jun 2023 - Updated Event rules to DW, reports to informational alerts,PasswordCheck DS/WA
v1.0.3.5  21 Mar 2023 - Removed ID blocks, Event collection rules, disabled alert rules
v1.0.3.4   8 Feb 2023 - Updated Account password/expiring report, scheduler to weekly,AppOwner alerts, tweaked rules for DODVisitor
v1.0.3.3   8 Feb 2023 - Updated Lockout Monitor to 300/hour, standard alert text display strings, changed rules to ContainsSubstring
v1.0.3.1   7 Feb 2023 - Updated Lockout Monitors, count, added AD DC Security event rules, Alert string tuning
v1.0.2.8  30 Jan 2023 - Updated PasswordCheck DataSources with additional teams
v1.0.2.7   9 Nov 2022 - Updated PasswordCheck DataSources with additional teams
v1.0.2.6  29 Aug 2022 - Updated PasswordCheck DS for additional teams
v1.0.2.4  11 Aug 2022 - Updated Microsoft.Windows.Server.AD.PasswordCheck.Monitor DS/WA
v1.0.2.0   1 Aug 2022 - Updated DS timeouts, added third customer stanza to DS/WA, hidden character cleanup
v1.0.1.7  29 Jun 2022 - Security Event rules and scripts, Updated 4720,4726,4728,4729 events and PowerShell scripts
v1.0.0.11  3 Mar 2022 - Updated RegEx, DS and WA for reports, 4722 enabling disabled ID
v1.0.0.7  24 Feb 2022 - Added for 4720,4728 events with RegEx, specific account lockout, Expiring, LastPassSet, WA, Task
v1.0.0.0  25 Aug 2021 - KWJ - Pack addresses group changes, password last set, expiring, auth failures, and lockout alerts.</Description>
        </DisplayString>
        <DisplayString ElementID="Proactive.Security.Group.Global.Member.Changes.Script.DataSource">
          <Name>Proactive Security Group Global Member changes DataSource</Name>
          <Description>This datasource generates 4728,4729 Security Event log synopsis DataSource</Description>
        </DisplayString>
        <DisplayString ElementID="Proactive.Security.User.Change.Script.DataSource">
          <Name>Proactive Security User Change DataSource</Name>
          <Description>This datasource generates 4720 Security Event log synopsis DataSource</Description>
        </DisplayString>
        <DisplayString ElementID="Microsoft.Windows.Server.AD.PasswordCheck.Monitor.DataSource">
          <Name>Microsoft Windows Server AD PasswordCheck Monitor DataSource</Name>
        </DisplayString>
        <DisplayString ElementID="Microsoft.Windows.Server.AD.PasswordCheck.Script.DataSource">
          <Name>Microsoft Windows Server AD PasswordCheck Script DataSource</Name>
        </DisplayString>

        <DisplayString ElementID="Microsoft.Windows.Server.AD.PasswordCheck.Monitor.WA">
          <Name>Microsoft Windows Server AD PasswordCheck WA</Name>
        </DisplayString>

        <DisplayString ElementID="Microsoft.Windows.Server.AD.PasswordCheck.Monitor.MonitorType">
          <Name>Microsoft Windows Server AD PasswordCheck MonitorType</Name>
        </DisplayString>
        <DisplayString ElementID="Microsoft.Windows.Server.AD.SingleEventLogTimer2StateMonitorType">
          <Name>Microsoft Windows Server AD Password check Event log with Timer and Matchcount MonitorType</Name>
        </DisplayString>

        <DisplayString ElementID="Microsoft.Windows.Server.AD.Auth.Failed.EventID40961.Event.Rule">
          <Name>Microsoft Windows Server AD Auth failed System EventID 40961 Event Rule</Name>
        </DisplayString>
        <DisplayString ElementID="Microsoft.Windows.Server.AD.Auth.Security.EventID4625.Event.Rule">
          <Name>Microsoft Windows Server AD Security EventID 4625 Event Rule</Name>
        </DisplayString>
        <DisplayString ElementID="Microsoft.Windows.Server.AD.Computer.Security.EventID4742.Event.Rule">
          <Name>Microsoft Windows Server AD Security EventID 4742 Event Rule</Name>
        </DisplayString>
        <DisplayString ElementID="Microsoft.Windows.Server.AD.Computer.Security.EventID4743.Event.Rule">
          <Name>Microsoft Windows Server AD Security EventID 4743 Event Rule</Name>
        </DisplayString>
        <DisplayString ElementID="Microsoft.Windows.Server.AD.Group.Security.EventID4727.Event.Rule">
          <Name>Microsoft Windows Server Security EventID 4727 Event Rule</Name>
        </DisplayString>
        <DisplayString ElementID="Microsoft.Windows.Server.AD.Group.Security.EventID4728.Event.Rule">
          <Name>Microsoft Windows Server AD Security EventID 4728 Group User add Rule</Name>
        </DisplayString>
        <DisplayString ElementID="Microsoft.Windows.Server.AD.Group.Security.EventID4729.Event.Rule">
          <Name>Microsoft Windows Server AD Security EventID 4729 Group User remove Rule</Name>
        </DisplayString>
        <DisplayString ElementID="Microsoft.Windows.Server.AD.Group.Security.EventID4730.Event.Rule">
          <Name>Microsoft Windows Server AD Security EventID 4730 Event Rule</Name>
        </DisplayString>
        <DisplayString ElementID="Microsoft.Windows.Server.AD.Group.Security.EventID4731.Event.Rule">
          <Name>Microsoft Windows Server AD Security EventID 4731 Event Rule</Name>
        </DisplayString>
        <DisplayString ElementID="Microsoft.Windows.Server.AD.Group.Security.EventID4732.Event.Rule">
          <Name>Microsoft Windows Server AD Security EventID 4732 Event Rule</Name>
        </DisplayString>
        <DisplayString ElementID="Microsoft.Windows.Server.AD.Group.Security.EventID4733.Event.Rule">
          <Name>Microsoft Windows Server AD Security EventID 4733 Event Rule</Name>
        </DisplayString>
        <DisplayString ElementID="Microsoft.Windows.Server.AD.Group.Security.EventID4734.Event.Rule">
          <Name>Microsoft Windows Server AD Security EventID 4734 Event Rule</Name>
        </DisplayString>
        <DisplayString ElementID="Microsoft.Windows.Server.AD.Group.Security.EventID4735.Event.Rule">
          <Name>Microsoft Windows Server AD Security EventID 4735 Event Rule</Name>
        </DisplayString>
        <DisplayString ElementID="Microsoft.Windows.Server.AD.Group.Security.EventID4737.Event.Rule">
          <Name>Microsoft Windows Server AD Security EventID 4737 Event Rule</Name>
        </DisplayString>
        <DisplayString ElementID="Microsoft.Windows.Server.AD.Group.Security.EventID4764.Event.Rule">
          <Name>Microsoft Windows Server AD Security EventID 4764 Event Rule</Name>
        </DisplayString>
        <DisplayString ElementID="Microsoft.Windows.Server.AD.Group.Security.EventID4720.Event.Rule">
          <Name>Microsoft Windows Server AD Security EventID 4720 Event Rule</Name>
        </DisplayString>
        <DisplayString ElementID="Microsoft.Windows.Server.AD.Group.Security.EventID4722.Event.Rule">
          <Name>Microsoft Windows Server AD Security EventID 4722 Event Rule</Name>
        </DisplayString>
        <DisplayString ElementID="Microsoft.Windows.Server.AD.Group.Security.EventID4724.Event.Rule">
          <Name>Microsoft Windows Server AD Security EventID 4724 Event Rule</Name>
        </DisplayString>
        <DisplayString ElementID="Microsoft.Windows.Server.AD.Group.Security.EventID4726.Event.Rule">
          <Name>Microsoft Windows Server AD Security EventID 4726 Event Rule</Name>
        </DisplayString>
        <DisplayString ElementID="Microsoft.Windows.Server.AD.Group.Security.EventID4738.Event.Rule">
          <Name>Microsoft Windows Server AD Security EventID 4738 Event Rule</Name>
        </DisplayString>
        <DisplayString ElementID="Microsoft.Windows.Server.AD.Group.Security.EventID4740.Event.Rule">
          <Name>Microsoft Windows Server AD Security EventID 4740 Event Rule</Name>
        </DisplayString>
        <DisplayString ElementID="Microsoft.Windows.Server.AD.Group.Security.EventID4767.Event.Rule">
          <Name>Microsoft Windows Server AD Security EventID 4767 Event Rule</Name>
        </DisplayString>
        <DisplayString ElementID="Microsoft.Windows.Server.AD.Group.Security.EventID4781.Event.Rule">
          <Name>Microsoft Windows Server AD Security EventID 4781 Event Rule</Name>
        </DisplayString>
        <DisplayString ElementID="Microsoft.Windows.Server.AD.User.Security.EventID4624.Event.Rule">
          <Name>Microsoft Windows Server AD Security EventID 4624 Event Rule</Name>
        </DisplayString>
        <DisplayString ElementID="Microsoft.Windows.Server.AD.User.Security.EventID4634.Event.Rule">
          <Name>Microsoft Windows Server AD Security EventID 4634 Event Rule</Name>
        </DisplayString>
        <DisplayString ElementID="Microsoft.Windows.Server.AD.User.Security.EventID4647.Event.Rule">
          <Name>Microsoft Windows Server AD Security EventID 4647 Event Rule</Name>
        </DisplayString>
        <DisplayString ElementID="Microsoft.Windows.Server.AD.Logon.Security.EventID4648.Event.Rule">
          <Name>Microsoft Windows Server AD Security EventID 4648 Event Rule</Name>
        </DisplayString>
        <DisplayString ElementID="Microsoft.Windows.Server.AD.Session.Security.EventID4779.Event.Rule">
          <Name>Microsoft Windows Server AD Security EventID 4779 Event Rule</Name>
        </DisplayString>

        <DisplayString ElementID="Microsoft.Windows.Server.AD.Auth.Failed.EventID40961.Alert.Rule">
          <Name>Microsoft Windows Server AD Auth failed System EventID 40961 Rule</Name>
        </DisplayString>
        <DisplayString ElementID="Microsoft.Windows.Server.AD.Auth.Failed.EventID40961.Alert.Rule.AlertMessage">
          <Name>Microsoft Windows Server AD Auth failed System EventID 40961 Rule Alert</Name>
          <Description>{0}</Description>
        </DisplayString>
        <DisplayString ElementID="Microsoft.Windows.Server.AD.Auth.Security.EventID4625.Alert.Rule">
          <Name>Microsoft Windows Server DC Security EventID 4625 AD account failed Rule</Name>
          <Description />
        </DisplayString>
        <DisplayString ElementID="Microsoft.Windows.Server.AD.Auth.Security.EventID4625.Alert.Rule.AlertMessage">
          <Name>Microsoft Windows Server DC Security EventID 4625 AD account failed Rule Alert</Name>
          <Description>{0}</Description>
        </DisplayString>
        <DisplayString ElementID="Microsoft.Windows.Server.AD.Computer.Security.EventID4742.Alert.Rule">
          <Name>Microsoft Windows Server DC Security EventID 4742 AD Computer Rule</Name>
          <Description />
        </DisplayString>
        <DisplayString ElementID="Microsoft.Windows.Server.AD.Computer.Security.EventID4742.Alert.Rule.AlertMessage">
          <Name>Microsoft Windows Server DC Security EventID 4742 AD Computer Rule Alert</Name>
          <Description>{0}</Description>
        </DisplayString>
        <DisplayString ElementID="Microsoft.Windows.Server.AD.Computer.Security.EventID4743.Alert.Rule">
          <Name>Microsoft Windows Server DC Security EventID 4743 AD Computer Rule</Name>
          <Description />
        </DisplayString>
        <DisplayString ElementID="Microsoft.Windows.Server.AD.Computer.Security.EventID4743.Alert.Rule.AlertMessage">
          <Name>Microsoft Windows Server DC Security EventID 4743 AD Computer Rule Alert</Name>
          <Description>{0}</Description>
        </DisplayString>
        <DisplayString ElementID="Microsoft.Windows.Server.AD.Group.Security.EventID4727.Alert.Rule">
          <Name>Microsoft Windows Server DC Security EventID 4727 AD Group Rule</Name>
          <Description />
        </DisplayString>
        <DisplayString ElementID="Microsoft.Windows.Server.AD.Group.Security.EventID4727.Alert.Rule.AlertMessage">
          <Name>Microsoft Windows Server DC Security EventID 4727 AD Group Rule Alert</Name>
          <Description>{0}</Description>
        </DisplayString>
        <DisplayString ElementID="Microsoft.Windows.Server.AD.Group.Security.EventID4728.Alert.Rule">
          <Name>Microsoft Windows Server DC Security EventID 4728 AD Group User add Rule</Name>
          <Description />
        </DisplayString>
        <DisplayString ElementID="Microsoft.Windows.Server.AD.Group.Security.EventID4728.Alert.Rule.AlertMessage">
          <Name>Microsoft Windows Server DC Security EventID 4728 AD Group User add Rule Alert</Name>
          <Description>{0}</Description>
        </DisplayString>
        <DisplayString ElementID="Microsoft.Windows.Server.AD.Group.Security.EventID4729.Alert.Rule">
          <Name>Microsoft Windows Server DC Security EventID 4729 AD Group user remove Rule</Name>
          <Description />
        </DisplayString>
        <DisplayString ElementID="Microsoft.Windows.Server.AD.Group.Security.EventID4729.Alert.Rule.AlertMessage">
          <Name>Microsoft Windows Server DC Security EventID 4729 AD Group user remove Rule Alert</Name>
          <Description>{0}</Description>
        </DisplayString>
        <DisplayString ElementID="Microsoft.Windows.Server.AD.Group.Security.EventID4730.Alert.Rule">
          <Name>Microsoft Windows Server DC Security EventID 4730 AD Group changes Rule</Name>
          <Description />
        </DisplayString>
        <DisplayString ElementID="Microsoft.Windows.Server.AD.Group.Security.EventID4730.Alert.Rule.AlertMessage">
          <Name>Microsoft Windows Server DC Security EventID 4730 AD Group changes Rule Alert</Name>
          <Description>{0}</Description>
        </DisplayString>
        <DisplayString ElementID="Microsoft.Windows.Server.AD.Group.Security.EventID4731.Alert.Rule">
          <Name>Microsoft Windows Server DC Security EventID 4731 AD Group changes Rule</Name>
        </DisplayString>
        <DisplayString ElementID="Microsoft.Windows.Server.AD.Group.Security.EventID4731.Alert.Rule.AlertMessage">
          <Name>Microsoft Windows Server DC Security EventID 4731 AD group change Rule Alert</Name>
          <Description>{0}</Description>
        </DisplayString>
        <DisplayString ElementID="Microsoft.Windows.Server.AD.Group.Security.EventID4732.Alert.Rule">
          <Name>Microsoft Windows Server DC Security EventID 4732 AD Member added to Group Rule</Name>
        </DisplayString>
        <DisplayString ElementID="Microsoft.Windows.Server.AD.Group.Security.EventID4732.Alert.Rule.AlertMessage">
          <Name>Microsoft Windows Server DC Security EventID 4732 AD Member added to group Rule Alert</Name>
          <Description>{0}</Description>
        </DisplayString>
        <DisplayString ElementID="Microsoft.Windows.Server.AD.Group.Security.EventID4733.Alert.Rule">
          <Name>Microsoft Windows Server DC Security EventID 4733 AD Group Rule</Name>
        </DisplayString>
        <DisplayString ElementID="Microsoft.Windows.Server.AD.Group.Security.EventID4733.Alert.Rule.AlertMessage">
          <Name>Microsoft Windows Server DC Security EventID 4733 AD Group Rule Alert</Name>
          <Description>{0}</Description>
        </DisplayString>
        <DisplayString ElementID="Microsoft.Windows.Server.AD.Group.Security.EventID4734.Alert.Rule">
          <Name>Microsoft Windows Server DC Security EventID 4734 AD Group Rule</Name>
        </DisplayString>
        <DisplayString ElementID="Microsoft.Windows.Server.AD.Group.Security.EventID4734.Alert.Rule.AlertMessage">
          <Name>Microsoft Windows Server DC Security EventID 4734 AD Group Rule Alert</Name>
          <Description>{0}</Description>
        </DisplayString>
        <DisplayString ElementID="Microsoft.Windows.Server.AD.Group.Security.EventID4735.Alert.Rule">
          <Name>Microsoft Windows Server DC Security EventID 4737 AD Group configuration change Rule</Name>
          <Description />
        </DisplayString>
        <DisplayString ElementID="Microsoft.Windows.Server.AD.Group.Security.EventID4735.Alert.Rule.AlertMessage">
          <Name>Microsoft Windows Server DC Security EventID 4737 AD Group configuration change Rule Alert</Name>
          <Description>{0}</Description>
        </DisplayString>
        <DisplayString ElementID="Microsoft.Windows.Server.AD.Group.Security.EventID4737.Alert.Rule">
          <Name>Microsoft Windows Server DC Security EventID 4737 AD Group configuration change Rule</Name>
          <Description />
        </DisplayString>
        <DisplayString ElementID="Microsoft.Windows.Server.AD.Group.Security.EventID4737.Alert.Rule.AlertMessage">
          <Name>Microsoft Windows Server DC Security EventID 4737 AD Group configuration change Rule Alert</Name>
          <Description>{0}</Description>
        </DisplayString>
        <DisplayString ElementID="Microsoft.Windows.Server.AD.Group.TypeChange.EventID4764.Alert.Rule">
          <Name>Microsoft Windows Server DC Security EventID 4764 AD Group TypeChange Rule</Name>
          <Description />
        </DisplayString>
        <DisplayString ElementID="Microsoft.Windows.Server.AD.Group.TypeChange.EventID4764.Alert.Rule.AlertMessage">
          <Name>Microsoft Windows Server DC Security EventID 4764 AD Group TypeChange Rule Alert</Name>
          <Description>{0}</Description>
        </DisplayString>
        <DisplayString ElementID="Microsoft.Windows.Server.AD.User.Security.EventID4720.Alert.Rule">
          <Name>Microsoft Windows Server DC Security EventID 4720 AD User account created Rule</Name>
          <Description />
        </DisplayString>
        <DisplayString ElementID="Microsoft.Windows.Server.AD.User.Security.EventID4720.Alert.Rule.AlertMessage">
          <Name>Microsoft Windows Server DC Security EventID 4720 AD User account created Rule Alert</Name>
          <Description>{0}</Description>
        </DisplayString>
        <DisplayString ElementID="Microsoft.Windows.Server.AD.User.Security.EventID4722.Alert.Rule">
          <Name>Microsoft Windows Server DC Security EventID 4722 AD Enabled Disabled user account Rule</Name>
        </DisplayString>
        <DisplayString ElementID="Microsoft.Windows.Server.AD.User.Security.EventID4722.Alert.Rule.AlertMessage">
          <Name>Microsoft Windows Server DC Security EventID 4722 AD Enabled Disabled user account Rule Alert</Name>
          <Description>{0}</Description>
        </DisplayString>
        <DisplayString ElementID="Microsoft.Windows.Server.AD.User.Security.EventID4724.Alert.Rule">
          <Name>Microsoft Windows Server DC Security EventID 4724 AD User account Rule</Name>
          <Description />
        </DisplayString>
        <DisplayString ElementID="Microsoft.Windows.Server.AD.User.Security.EventID4724.Alert.Rule.AlertMessage">
          <Name>Microsoft Windows Server DC Security EventID 4724 AD User account Rule Alert</Name>
          <Description>{0}</Description>
        </DisplayString>
        <DisplayString ElementID="Microsoft.Windows.Server.AD.User.Security.EventID4726.Alert.Rule">
          <Name>Microsoft Windows Server DC Security EventID 4726 AD User account deleted Rule</Name>
          <Description />
        </DisplayString>
        <DisplayString ElementID="Microsoft.Windows.Server.AD.User.Security.EventID4726.Alert.Rule.AlertMessage">
          <Name>Microsoft Windows Server DC Security EventID 4726 AD User account deleted Rule Alert</Name>
          <Description>{0}</Description>
        </DisplayString>
        <DisplayString ElementID="Microsoft.Windows.Server.AD.User.Security.EventID4738.Alert.Rule">
          <Name>Microsoft Windows Server DC Security EventID 4738 AD User account changed Rule</Name>
          <Description />
        </DisplayString>
        <DisplayString ElementID="Microsoft.Windows.Server.AD.User.Security.EventID4738.Alert.Rule.AlertMessage">
          <Name>Microsoft Windows Server DC Security EventID 4738 AD User account changed Rule Alert</Name>
          <Description>{0}</Description>
        </DisplayString>
        <DisplayString ElementID="Microsoft.Windows.Server.AD.User.Security.EventID4740.Alert.Rule">
          <Name>Microsoft Windows Server DC Security EventID 4740 AD User lockout created Rule</Name>
        </DisplayString>
        <DisplayString ElementID="Microsoft.Windows.Server.AD.User.Security.EventID4740.Alert.Rule.AlertMessage">
          <Name>Microsoft Windows Server DC Security EventID 4740 AD User lockout created Rule Alert</Name>
          <Description>{0}</Description>
        </DisplayString>
        <DisplayString ElementID="Microsoft.Windows.Server.AD.User.Security.EventID4767.Alert.Rule">
          <Name>Microsoft Windows Server DC Security EventID 4767 AD User Security Rule</Name>
        </DisplayString>
        <DisplayString ElementID="Microsoft.Windows.Server.AD.User.Security.EventID4767.Alert.Rule.AlertMessage">
          <Name>Microsoft Windows Server DC Security EventID 4767 AD User Security Alert</Name>
          <Description>{0}</Description>
        </DisplayString>
        <DisplayString ElementID="Microsoft.Windows.Server.AD.User.Security.EventID4781.Alert.Rule">
          <Name>Microsoft Windows Server DC Security EventID 4781 AD User Security Rule</Name>
        </DisplayString>
        <DisplayString ElementID="Microsoft.Windows.Server.AD.User.Security.EventID4781.Alert.Rule.AlertMessage">
          <Name>Microsoft Windows Server DC Security EventID 4781 AD User Security Rule Alert</Name>
          <Description>{0}</Description>
        </DisplayString>
        <DisplayString ElementID="Microsoft.Windows.Server.AD.PasswordCheck.Script.Alert.Rule">
          <Name>Microsoft Windows Server AD PasswordCheck Script Alert Rule</Name>
          <Description>Microsoft Windows Server AD PasswordCheck Script Alert Rule</Description>
        </DisplayString>
        <DisplayString ElementID="Microsoft.Windows.Server.AD.PasswordCheck.Script.Alert.Rule.AlertMessage">
          <Name>Microsoft Windows Server AD PasswordCheck Script Alert Task AlertMessage</Name>
          <Description>{1}</Description>
        </DisplayString>
        <DisplayString ElementID="Microsoft.Windows.Server.AppOwner.PasswordCheck.Script.Alert.Rule">
          <Name>Proactive Microsoft Windows Server AppOwner PasswordCheck Script Alert Rule</Name>
          <Description>Microsoft Windows Server AppOwner PasswordCheck Script Alert Rule</Description>
        </DisplayString>
        <DisplayString ElementID="Microsoft.Windows.Server.AppOwner.PasswordCheck.Script.Alert.Rule.AlertMessage">
          <Name>Proactive Microsoft Windows Server AppOwner PasswordCheck Script Alert Task AlertMessage</Name>
          <Description>{1}</Description>
        </DisplayString>
        <DisplayString ElementID="Microsoft.Windows.Server.AD.ID.PasswordCheck.Script.Alert.Rule">
          <Name>Microsoft Windows Server AD ID PasswordCheck Script Alert Rule</Name>
          <Description>Microsoft Windows Server AD ID PasswordCheck Script Alert Rule</Description>
        </DisplayString>
        <DisplayString ElementID="Microsoft.Windows.Server.AD.ID.PasswordCheck.Script.Alert.Rule.AlertMessage">
          <Name>Microsoft Windows Server AD ID PasswordCheck Script Alert Task AlertMessage</Name>
          <Description>{1}</Description>
        </DisplayString>
        <DisplayString ElementID="Microsoft.Windows.Server.AD.PasswordCheck.Script.Task.Alert.Rule">
          <Name>Microsoft Windows Server AD Service Account Password Check Task Rule</Name>
        </DisplayString>
        <DisplayString ElementID="Microsoft.Windows.Server.AD.PasswordCheck.Script.Task.Alert.Rule.AlertMessage">
          <Name>Microsoft Windows Server AD PasswordCheck Script Alert Task AlertMessage</Name>
          <Description>{1}</Description>
        </DisplayString>
        <DisplayString ElementID="Microsoft.Windows.Server.AD.ID.PasswordCheck.Script.Task.Alert.Rule">
          <Name>Microsoft Windows Server AD ID Service Account Password Check Task Rule</Name>
        </DisplayString>
        <DisplayString ElementID="Microsoft.Windows.Server.AD.ID.PasswordCheck.Script.Task.Alert.Rule.AlertMessage">
          <Name>Microsoft Windows Server AD ID PasswordCheck Script Alert Task AlertMessage</Name>
          <Description>{1}</Description>
        </DisplayString>
        <DisplayString ElementID="Proactive.Security.Group.Global.Member.Changes.Script.Alert.Rule">
          <Name>Proactive Security Group Global Member Changes Rule</Name>
          <Description />
        </DisplayString>
        <DisplayString ElementID="Proactive.Security.Group.Global.Member.Changes.Script.Alert.Rule.AlertMessage">
          <Name>Security Group Global Member Changes Rule Alert</Name>
          <Description>
{2}

{0}
{1}</Description>
        </DisplayString>
        <DisplayString ElementID="Proactive.Security.User.Change.Script.Alert.Rule">
          <Name>Proactive Security User Change Rule</Name>
          <Description />
        </DisplayString>
        <DisplayString ElementID="Proactive.Security.User.Change.Script.Alert.Rule.AlertMessage">
          <Name>Security Group Global User Change Rule Alert</Name>
          <Description>
{2}

{0}
{1}</Description>
        </DisplayString>

        <DisplayString ElementID="Microsoft.Windows.Server.AD.PasswordCheck.Task">
          <Name>Microsoft Windows Server AD PasswordCheck Script Alert Task</Name>
        </DisplayString>

        <DisplayString ElementID="Microsoft.Windows.Server.AD.Account.Lockout.Count.Monitor">
          <Name>Windows Domain controller logon failure alerts with Security Event ID 4625 and 4740</Name>
          <Description>Created 24 Aug 2021 - KWJ - Account Lockout events</Description>
        </DisplayString>
        <DisplayString ElementID="Microsoft.Windows.Server.AD.Account.Lockout.Count.Monitor" SubElementID="TimerEventRaised">
          <Name>Timer Event Raised</Name>
        </DisplayString>
        <DisplayString ElementID="Microsoft.Windows.Server.AD.Account.Lockout.Count.Monitor" SubElementID="EventRaised">
          <Name>Event Raised</Name>
        </DisplayString>
        <DisplayString ElementID="Microsoft.Windows.Server.AD.Account.Lockout.Count.Monitor.AlertMessage">
          <Name>Windows Domain controller logon failure alerts with Security Event ID 4625 and 4740</Name>
          <Description>300 logon failures in past hour</Description>
        </DisplayString>
        <DisplayString ElementID="Microsoft.Windows.Server.AD.SVC.Account.Lockout.Monitor">
          <Name>Service Account lockout alerts for SVC accounts with Security Event ID 4625 and 4740</Name>
          <Description>Created 24 Aug 2021 - KWJ - Account Lockout events</Description>
        </DisplayString>
        <DisplayString ElementID="Microsoft.Windows.Server.AD.SVC.Account.Lockout.Monitor" SubElementID="NotRunning">
          <Name>Timer Event Raised</Name>
        </DisplayString>
        <DisplayString ElementID="Microsoft.Windows.Server.AD.SVC.Account.Lockout.Monitor" SubElementID="Running">
          <Name>Event Raised</Name>
        </DisplayString>
        <DisplayString ElementID="Microsoft.Windows.Server.AD.SVC.Account.Lockout.Monitor_AlertMessageResourceID">
          <Name>Service Account lockout alerts for SVC accounts with Security Event ID 4625 and 4740</Name>
          <Description>Application Service Account locked out

Event Description:
{0}
</Description>
        </DisplayString>
        <DisplayString ElementID="Microsoft.Windows.Server.AD.Account.Lockout.Monitor">
          <Name>Service Account lockout alerts for Security Event ID 4625 and 4740</Name>
          <Description>Created 24 Aug 2021 - KWJ - Account Lockout events</Description>
        </DisplayString>
        <DisplayString ElementID="Microsoft.Windows.Server.AD.Account.Lockout.Monitor" SubElementID="NotRunning">
          <Name>Timer Event Raised</Name>
        </DisplayString>
        <DisplayString ElementID="Microsoft.Windows.Server.AD.Account.Lockout.Monitor" SubElementID="Running">
          <Name>Event Raised</Name>
        </DisplayString>
        <DisplayString ElementID="Microsoft.Windows.Server.AD.Account.Lockout.Monitor_AlertMessageResourceID">
          <Name>Service Account lockout alerts for Security Event ID 4625 and 4740</Name>
          <Description>Application Service Account locked out

Event Description:
{0}
</Description>
        </DisplayString>
        <DisplayString ElementID="Microsoft.Windows.Server.AD.ID.Account.Lockout.Monitor">
          <Name>ID Service Account lockout alerts for Security Event ID 4625 and 4740</Name>
          <Description>Created 24 Aug 2021 - KWJ - Account Lockout events</Description>
        </DisplayString>
        <DisplayString ElementID="Microsoft.Windows.Server.AD.ID.Account.Lockout.Monitor" SubElementID="NotRunning">
          <Name>Timer Event Raised</Name>
        </DisplayString>
        <DisplayString ElementID="Microsoft.Windows.Server.AD.ID.Account.Lockout.Monitor" SubElementID="Running">
          <Name>Event Raised</Name>
        </DisplayString>
        <DisplayString ElementID="Microsoft.Windows.Server.AD.ID.Account.Lockout.Monitor_AlertMessageResourceID">
          <Name>ID Service Account lockout alerts for Security Event ID 4625 and 4740</Name>
          <Description>Application Service Account locked out

Event Description:
{0}
</Description>
        </DisplayString>
        <DisplayString ElementID="Microsoft.Windows.Server.AD.Auth.Failed.Monitor">
          <Name>Service Account lockout alerts for System Event ID 40961</Name>
          <Description>Created 24 Aug 2021 - KWJ - Account Lockout events</Description>
        </DisplayString>
        <DisplayString ElementID="Microsoft.Windows.Server.AD.Auth.Failed.Monitor" SubElementID="NotRunning">
          <Name>Timer Event Raised</Name>
        </DisplayString>
        <DisplayString ElementID="Microsoft.Windows.Server.AD.Auth.Failed.Monitor" SubElementID="Running">
          <Name>Event Raised</Name>
        </DisplayString>
        <DisplayString ElementID="Microsoft.Windows.Server.AD.Auth.Failed.Monitor_AlertMessageResourceID">
          <Name>Service Account lockout alerts for System Event ID 40961</Name>
          <Description>AD Auth failed, decom'd/non-supported DC is online

Event Description:
{0}
</Description>
        </DisplayString>
        <DisplayString ElementID="Microsoft.Windows.Server.AD.PasswordCheck.Monitor">
          <Name>Service Account Password Check Monitor</Name>
        </DisplayString>
        <DisplayString ElementID="Microsoft.Windows.Server.AD.PasswordCheck.Monitor" SubElementID="GoodCondition">
          <Name>Good Condition</Name>
        </DisplayString>
        <DisplayString ElementID="Microsoft.Windows.Server.AD.PasswordCheck.Monitor" SubElementID="BadCondition">
          <Name>Bad Condition</Name>
        </DisplayString>
        <DisplayString ElementID="Microsoft.Windows.Server.AD.PasswordCheck.Monitor.AlertMessage">
          <Name>Service Account Password Check Monitor: Failure</Name>
          <Description>Service Account Password Check Monitor: detected a bad condition</Description>
        </DisplayString>
      </DisplayStrings>
    </LanguagePack>
  </LanguagePacks>
</ManagementPack>