<?xml version="1.0" encoding="utf-8"?><ManagementPack ContentReadable="true" SchemaVersion="2.0" OriginalSchemaVersion="1.1" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
  <Manifest>
    <Identity>
      <ID>Proactive.Microsoft.Windows.Server.NEC.AD.Account.Password.Customizations</ID>
      <Version>1.0.0.4</Version>
    </Identity>
    <Name>Proactive Microsoft Windows Server NEC AD 2016 Account Password Customizations</Name>
    <References>
      <Reference Alias="Health">
        <ID>System.Health.Library</ID>
        <Version>7.0.8433.0</Version>
        <PublicKeyToken>31bf3856ad364e35</PublicKeyToken>
      </Reference>
      <Reference Alias="MWSAD6D">
        <ID>Microsoft.Windows.Server.AD.2016.Discovery</ID>
        <Version>10.0.0.0</Version>
        <PublicKeyToken>31bf3856ad364e35</PublicKeyToken>
      </Reference>
      <Reference Alias="SC">
        <ID>Microsoft.SystemCenter.Library</ID>
        <Version>7.0.8433.0</Version>
        <PublicKeyToken>31bf3856ad364e35</PublicKeyToken>
      </Reference>
      <Reference Alias="System">
        <ID>System.Library</ID>
        <Version>7.5.8501.0</Version>
        <PublicKeyToken>31bf3856ad364e35</PublicKeyToken>
      </Reference>
      <Reference Alias="Windows">
        <ID>Microsoft.Windows.Library</ID>
        <Version>7.5.8501.0</Version>
        <PublicKeyToken>31bf3856ad364e35</PublicKeyToken>
      </Reference>
    </References>
  </Manifest>
  <TypeDefinitions>
    <ModuleTypes>
      <DataSourceModuleType ID="Microsoft.Windows.Server.NEC.AD.PasswordCheck.Script.DataSource" Accessibility="Internal" Batching="false">
        <Configuration>
          <xsd:element minOccurs="1" type="xsd:integer" name="TimeoutSeconds" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
        </Configuration>
        <OverrideableParameters>
          <OverrideableParameter ID="TimeoutSeconds" Selector="$Config/TimeoutSeconds$" ParameterType="int" />
        </OverrideableParameters>
        <ModuleImplementation Isolation="Any">
          <Composite>
            <MemberModules>
              <DataSource ID="Scheduler" TypeID="System!System.Scheduler">
                <Scheduler>
                  <WeeklySchedule>
                    <Windows>
                      <Daily>
                        <Start>10:44</Start>
                        <End>11:04</End>
                        <DaysOfWeekMask>1</DaysOfWeekMask>
                      </Daily>
                    </Windows>
                  </WeeklySchedule>
                  <ExcludeDates />
                </Scheduler>
              </DataSource>
              <ProbeAction ID="PA" TypeID="Windows!Microsoft.Windows.PowerShellPropertyBagTriggerOnlyProbe">
                <ScriptName>Microsoft.Windows.Server.NEC.AD.PasswordCheck.Monitor.DataSource.v1004.ps1</ScriptName>
                <ScriptBody>
#=================================================================================
#  NEC AD Group check monitor script for members and WA users in groups
#
#  Author:  Kevin Justin
#  v1.0
#=================================================================================


# Constants section - modify stuff here:
#=================================================================================
# Assign script name variable for use in event logging.  
$ScriptName = "Microsoft.Windows.Server.NEC.AD.PasswordCheck.Monitor.DataSource.v1004.ps1"
$EventID = "606"
#=================================================================================


# Starting Script section - All scripts get this 
#=================================================================================
# Gather the start time of the script
$StartTime = Get-Date
#Set variable to be used in logging events 
$whoami = whoami 
# Load MOMScript API 
$momapi = New-Object -comObject MOM.ScriptAPI 
# Load PropertyBag function 
$bag = $momapi.CreatePropertyBag() 
#Log script event that we are starting task 
$momapi.LogScriptEvent($ScriptName,$EventID,0,"`n Script is starting. `n Running as ($whoami).")

#=================================================================================


# Begin MAIN script section
#=================================================================================
#Set the condition = bad.  This represents your script finding something wrong
$strCondition = "Bad"

$date = get-date -uFormat "%Y-%m-%d"

$momapi.LogScriptEvent($ScriptName,$EventID,0,"`n Gather Proactive NEC AD Groups for date ($date).")
$Message = "Proactive NEC AD Account issues for date ($date)."


$PWTime = [DateTime](Get-Date).AddDays(-30)
$PWLastSet = [DateTime](Get-Date).AddDays(-365)
$PWMonth = [DateTime](Get-Date).AddDays(30)
$PWWeek = [DateTime](Get-Date).AddDays(7)


#==============================================================
# AD Groups for RC team via OU
#==============================================================

# $RCGroups = Get-ADGroup -filter * | ? { ( $_.Name -like "RC*" ) -OR ( $_.Name -like "NGRC*" )  }
$RCGroups = Get-ADGroup -filter * | ? { ( $_.DistinguishedName -like "CN=RC*,OU=Groups,OU=SCOM,DC=Testlab,DC=NET" ) -AND ( $_.Name -like "RC_*" ) }
# Debug
$RCGroups.Count

# AD OU group audit
# Examples - *VMware View*, *Macro Enabled Exception, SCOM Admins
$ADOUGroups = Get-ADGroup -filter * | ? { ( $_.DistinguishedName -like "CN=RC*,OU=Groups,OU=SCOM,DC=Testlab,DC=NET" ) `
	-AND ( ( $_.Name -like "VMware View*" ) `
	-OR ( $_.Name -eq "TestLab Macro Enabled Exception" ) `
	-OR ( $_.Name -eq "Testlab SCOM Admins" ) ) }
# Debug
$ADOUGroups.Count

# DLPe group membership from RC Groups OU
$AllowDLPe = Get-ADGroup -filter * | ? { ( $_.DistinguishedName -like "CN=*,OU=Groups,OU=SCOM,DC=Testlab,DC=NET" ) -AND ( $_.Name -like "DLPe *" ) }
# Debug
$AllowDLPe.Count

$RCGroupMessage = @()

$RCGroupMessage += "RC NEC OU Group audit"
$RCGroupMessage += ""
$RCGroupMessage += "#***************************************************"
$RCGroupMessage += "# NOTE: No entries mean no WA or members in AD Group"
$RCGroupMessage += "#***************************************************"
$RCGroupMessage += ""

if ( $RCGroups.Count -eq 0 )
	{ 
	$RCGroupMessage += "ZERO AD Groups listed"
	}

if ( $RCGroups.Count -gt 0 )
	{
	foreach ( $RCGroup in $RCGroups.Name )
		{
		# Are there WA accounts in the group?
		$RCGroupMessage += "Audit of WA accounts in group - $($RCGroup)"
		$RCGroupMessage += "#========================================================="
		
		$RCWAMembers = Get-ADGroupMember -Identity "$RCGroup" | ? { $_.SamAccountName -like "*.WA" } | ft SamAccountName,Name

		if ( $RCWAMembers.Count -le 5 ) 
			{
			$RCGroupMessage += "# List of WA members in group - $($RCGroup)"
			$RCGroupMessage += "#========================================================="			
			$RCGroupMessage += $RCWAMembers
			$RCGroupMessage += "#========================================================="
			$RCGroupMessage += ""
			}

		if ( $RCWAMembers.Count -gt 6 ) 
			{
			$RCGroupMessage += "NOTE:  Too many WA members to display in report"
			$RCGroupMessage += ""
			}

		# Get members of group
		$RCMembers = Get-ADGroupMember -Identity "$RCGroup" | ft SamAccountName,Name

		if ( $RCMembers.Count -le 5 ) 
			{
			$RCGroupMessage += "# List of member account in NGRC group - $($RCGroup)"
			$RCGroupMessage += "#========================================================="			
			$RCGroupMessage += $RCMembers
			$RCGroupMessage += "#========================================================="
			$RCGroupMessage += ""
			}

		if ( $RCMembers.Count -gt 6 ) 
			{
			$RCGroupMessage += "NOTE:  Too many group members to display in report"
			$RCGroupMessage += ""
			}
		}
	$RCGroupMessage
	}


if ( $ADOUGroups.Count -eq 0 )
	{ 
	$RCGroupMessage += "ZERO AD Groups listed"
	}

if ( $ADOUGroups.Count -gt 0 )
	{
	foreach ( $NGRCGroup in $ADOUGroups.Name )
		{
		# Are there WA accounts in the group?
		$RCGroupMessage += "Audit of WA member accounts in group - $($NGRCGroup)"
		$RCGroupMessage += "#========================================================="
		
		$WAMembers = Get-ADGroupMember -Identity "$NGRCGroup" | ? { $_.SamAccountName -like "*.WA" } | ft SamAccountName,Name
		if ( $WAMembers.Count -le 5 ) 
			{
			$RCGroupMessage += "# List of WA members in group - $($RCGroup)"
			$RCGroupMessage += "#========================================================="			
			$RCGroupMessage += $WAMembers
			$RCGroupMessage += "#========================================================="
			$RCGroupMessage += ""
			}

		if ( $WAMembers.Count -gt 6 ) 
			{
			$RCGroupMessage += "NOTE:  Too many WA members to display in report"
			$RCGroupMessage += ""
			}

		# Get members of group
		$RCMembers = Get-ADGroupMember -Identity "$NGRCGroup" | ft SamAccountName,Name

		if ( $RCMembers.Count -le 5 ) 
			{
			$RCGroupMessage += "# List of member account in group - $($NGRCGroup)"
			$RCGroupMessage += "#========================================================="			
			$RCGroupMessage += $Members
			$RCGroupMessage += "#========================================================="
			$RCGroupMessage += ""
			}

		if ( $RCMembers.Count -gt 6 ) 
			{
			$RCGroupMessage += "NOTE:  Too many group members to display in report"
			$RCGroupMessage += ""
			}

		}
	$RCGroupMessage
	}


if ( $AllowDLPe.Count -eq 0 )
	{ 
	$RCGroupMessage += "ZERO AllowDLPe AD Groups listed"
	}

if ( $AllowDLPe.Count -gt 0 )
	{
	foreach ( $DLPGroup in $AllowDLPe.Name )
		{
		# Are there WA accounts in the group?

		$RCGroupMessage += "Audit of WA member accounts in OU DLP group - $($DLPGroup)"
		$RCGroupMessage += "#========================================================="
		
		$DLPWAMembers = Get-ADGroupMember -Identity "$DLPGroup" | ? { $_.SamAccountName -like "*.WA" } | ft SamAccountName,Name
		if ( $DLPWAMembers.Count -le 5 ) 
			{
			$RCGroupMessage += "# List of WA members in group - $($DLPGroup)"
			$RCGroupMessage += "#========================================================="			
			$RCGroupMessage += $DLPWAMembers
			$RCGroupMessage += "#========================================================="
			$RCGroupMessage += ""
			}

		if ( $WAMembers.Count -gt 6 ) 
			{
			$RCGroupMessage += "NOTE:  Too many WA members to display in report"
			$RCGroupMessage += ""
			}

		# Get members of group
		$DLPMembers = Get-ADGroupMember -Identity "$DLPGroup" | ft SamAccountName,Name

		if ( $RCMembers.Count -le 5 ) 
			{
			$RCGroupMessage += "# List of member account in group - $($DLPGroup)"
			$RCGroupMessage += "#========================================================="			
			$RCGroupMessage += $DLPMembers
			$RCGroupMessage += "#========================================================="
			$RCGroupMessage += ""
			}

		if ( $RCMembers.Count -gt 6 ) 
			{
			$RCGroupMessage += "NOTE:  Too many group members to display in report"
			$RCGroupMessage += ""
			}
		}

	#$RCGroupMessage 
	}
	$RCGroupMessage = $RCGroupMessage | out-string


	# Log 
	$Summary = "$RCGroupMessage `n `nDisclaimer:  This daily summary report is to document the manual tasks used by NOSC to check AD and AD Replication health, Pending Reboot Report, Logical Disk errors,Expiring Certificates, Unhealthy Server/Agents, Unhealthy agent workflow/script alerts, and Servers in Maintenance Mode"


	$strCondition -eq "Good"
	$momapi.LogScriptEvent($ScriptName,$EventID,0,"$Summary")


	$Message = "Array execution report completed against AppOwners"
	
	#$bag.AddValue('Result','GoodCondition')
	$bag.AddValue('Message',$Message)
	$bag.AddValue('Summary',$Summary)

	# Return all bags
	$bag


# End of script section
#=================================================================================
#Log an event for script ending and total execution time.
$EndTime = Get-Date
$ScriptTime = ($EndTime - $StartTime).TotalSeconds
$momapi.LogScriptEvent($ScriptName,$EventID,0,"`n Script Completed. `n Script Runtime: ($ScriptTime) seconds.")
#=================================================================================
# End of script
                </ScriptBody>
                <TimeoutSeconds>$Config/TimeoutSeconds$</TimeoutSeconds>
              </ProbeAction>
            </MemberModules>
            <Composition>
              <Node ID="PA">
                <Node ID="Scheduler" />
              </Node>
            </Composition>
          </Composite>
        </ModuleImplementation>
        <OutputType>System!System.PropertyBagData</OutputType>
      </DataSourceModuleType>
      <WriteActionModuleType ID="Microsoft.Windows.Server.NEC.AD.PasswordCheck.Script.WA" Accessibility="Internal" Batching="false">
        <Configuration>
          <xsd:element minOccurs="1" name="TimeoutSeconds" type="xsd:integer" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
        </Configuration>
        <OverrideableParameters>
          <OverrideableParameter ID="TimeoutSeconds" Selector="$Config/TimeoutSeconds$" ParameterType="int" />
        </OverrideableParameters>
        <ModuleImplementation Isolation="Any">
          <Composite>
            <MemberModules>
              <WriteAction ID="PSWA" TypeID="Windows!Microsoft.Windows.PowerShellWriteAction">
                <ScriptName>Microsoft.Windows.Server.NEC.AD.PasswordCheck.Monitor.WA.v1004.ps1</ScriptName>
                <ScriptBody>
#=================================================================================
#  NEC AD Group check monitor script for members and WA users in groups
#
#  Author:  Kevin Justin
#  v1.0
#=================================================================================


# Constants section - modify stuff here:
#=================================================================================
# Assign script name variable for use in event logging.  
$ScriptName = "Microsoft.Windows.Server.NEC.AD.PasswordCheck.Monitor.WA.v1004.ps1"
$EventID = "606"
#=================================================================================


# Starting Script section - All scripts get this 
#=================================================================================
# Gather the start time of the script
$StartTime = Get-Date
#Set variable to be used in logging events 
$whoami = whoami 
# Load MOMScript API 
$momapi = New-Object -comObject MOM.ScriptAPI 
# Load PropertyBag function 
$bag = $momapi.CreatePropertyBag() 
#Log script event that we are starting task 
$momapi.LogScriptEvent($ScriptName,$EventID,0,"`n Script is starting. `n Running as ($whoami).")

#=================================================================================


# Begin MAIN script section
#=================================================================================
#Set the condition = bad.  This represents your script finding something wrong
$strCondition = "Bad"

$date = get-date -uFormat "%Y-%m-%d"

$momapi.LogScriptEvent($ScriptName,$EventID,0,"`n Gather Proactive NEC AD Groups for date ($date).")
$Message = "Proactive NEC AD Account issues task for date ($date)."


$PWTime = [DateTime](Get-Date).AddDays(-30)
$PWLastSet = [DateTime](Get-Date).AddDays(-365)
$PWMonth = [DateTime](Get-Date).AddDays(30)
$PWWeek = [DateTime](Get-Date).AddDays(7)


#==============================================================
# AD Groups for RC team via OU
#==============================================================

# $RCGroups = Get-ADGroup -filter * | ? { ( $_.Name -like "RC*" ) -OR ( $_.Name -like "NGRC*" )  }
$RCGroups = Get-ADGroup -filter * | ? { ( $_.DistinguishedName -like "CN=RC*,OU=Groups,OU=SCOM,DC=Testlab,DC=NET" ) -AND ( $_.Name -like "RC_*" ) }
# Debug
$RCGroups.Count

# AD OU group audit
# Examples - *VMware View*, *Macro Enabled Exception, SCOM Admins
$ADOUGroups = Get-ADGroup -filter * | ? { ( $_.DistinguishedName -like "CN=RC*,OU=Groups,OU=SCOM,DC=Testlab,DC=NET" ) `
	-AND ( ( $_.Name -like "VMware View*" ) `
	-OR ( $_.Name -eq "TestLab Macro Enabled Exception" ) `
	-OR ( $_.Name -eq "Testlab SCOM Admins" ) ) }
# Debug
$ADOUGroups.Count

# DLPe group membership from RC Groups OU
$AllowDLPe = Get-ADGroup -filter * | ? { ( $_.DistinguishedName -like "CN=*,OU=Groups,OU=SCOM,DC=Testlab,DC=NET" ) -AND ( $_.Name -like "DLPe *" ) }
# Debug
$AllowDLPe.Count

$RCGroupMessage = @()

$RCGroupMessage += "RC NEC OU Group audit"
$RCGroupMessage += ""
$RCGroupMessage += "#***************************************************"
$RCGroupMessage += "# NOTE: No entries mean no WA or members in AD Group"
$RCGroupMessage += "#***************************************************"
$RCGroupMessage += ""

if ( $RCGroups.Count -eq 0 )
	{ 
	$RCGroupMessage += "ZERO AD Groups listed"
	}

if ( $RCGroups.Count -gt 0 )
	{
	foreach ( $RCGroup in $RCGroups.Name )
		{
		# Are there WA accounts in the group?
		$RCGroupMessage += "Audit of WA accounts in group - $($RCGroup)"
		$RCGroupMessage += "#========================================================="
		
		$RCWAMembers = Get-ADGroupMember -Identity "$RCGroup" | ? { $_.SamAccountName -like "*.WA" } | ft SamAccountName,Name

		if ( $RCWAMembers.Count -le 5 ) 
			{
			$RCGroupMessage += "# List of WA members in group - $($RCGroup)"
			$RCGroupMessage += "#========================================================="			
			$RCGroupMessage += $RCWAMembers
			$RCGroupMessage += "#========================================================="
			$RCGroupMessage += ""
			}

		if ( $RCWAMembers.Count -gt 6 ) 
			{
			$RCGroupMessage += "NOTE:  Too many WA members to display in report"
			$RCGroupMessage += ""
			}

		# Get members of group
		$RCMembers = Get-ADGroupMember -Identity "$RCGroup" | ft SamAccountName,Name

		if ( $RCMembers.Count -le 5 ) 
			{
			$RCGroupMessage += "# List of member account in NGRC group - $($RCGroup)"
			$RCGroupMessage += "#========================================================="			
			$RCGroupMessage += $RCMembers
			$RCGroupMessage += "#========================================================="
			$RCGroupMessage += ""
			}

		if ( $RCMembers.Count -gt 6 ) 
			{
			$RCGroupMessage += "NOTE:  Too many group members to display in report"
			$RCGroupMessage += ""
			}
		}
	$RCGroupMessage
	}


if ( $ADOUGroups.Count -eq 0 )
	{ 
	$RCGroupMessage += "ZERO AD Groups listed"
	}

if ( $ADOUGroups.Count -gt 0 )
	{
	foreach ( $NGRCGroup in $ADOUGroups.Name )
		{
		# Are there WA accounts in the group?
		$RCGroupMessage += "Audit of WA member accounts in group - $($NGRCGroup)"
		$RCGroupMessage += "#========================================================="
		
		$WAMembers = Get-ADGroupMember -Identity "$NGRCGroup" | ? { $_.SamAccountName -like "*.WA" } | ft SamAccountName,Name
		if ( $WAMembers.Count -le 5 ) 
			{
			$RCGroupMessage += "# List of WA members in group - $($RCGroup)"
			$RCGroupMessage += "#========================================================="			
			$RCGroupMessage += $WAMembers
			$RCGroupMessage += "#========================================================="
			$RCGroupMessage += ""
			}

		if ( $WAMembers.Count -gt 6 ) 
			{
			$RCGroupMessage += "NOTE:  Too many WA members to display in report"
			$RCGroupMessage += ""
			}

		# Get members of group
		$RCMembers = Get-ADGroupMember -Identity "$NGRCGroup" | ft SamAccountName,Name

		if ( $RCMembers.Count -le 5 ) 
			{
			$RCGroupMessage += "# List of member account in group - $($NGRCGroup)"
			$RCGroupMessage += "#========================================================="			
			$RCGroupMessage += $Members
			$RCGroupMessage += "#========================================================="
			$RCGroupMessage += ""
			}

		if ( $RCMembers.Count -gt 6 ) 
			{
			$RCGroupMessage += "NOTE:  Too many group members to display in report"
			$RCGroupMessage += ""
			}

		}
	$RCGroupMessage
	}


if ( $AllowDLPe.Count -eq 0 )
	{ 
	$RCGroupMessage += "ZERO AllowDLPe AD Groups listed"
	}

if ( $AllowDLPe.Count -gt 0 )
	{
	foreach ( $DLPGroup in $AllowDLPe.Name )
		{
		# Are there WA accounts in the group?

		$RCGroupMessage += "Audit of WA member accounts in OU DLP group - $($DLPGroup)"
		$RCGroupMessage += "#========================================================="
		
		$DLPWAMembers = Get-ADGroupMember -Identity "$DLPGroup" | ? { $_.SamAccountName -like "*.WA" } | ft SamAccountName,Name
		if ( $DLPWAMembers.Count -le 5 ) 
			{
			$RCGroupMessage += "# List of WA members in group - $($DLPGroup)"
			$RCGroupMessage += "#========================================================="			
			$RCGroupMessage += $DLPWAMembers
			$RCGroupMessage += "#========================================================="
			$RCGroupMessage += ""
			}

		if ( $WAMembers.Count -gt 6 ) 
			{
			$RCGroupMessage += "NOTE:  Too many WA members to display in report"
			$RCGroupMessage += ""
			}

		# Get members of group
		$DLPMembers = Get-ADGroupMember -Identity "$DLPGroup" | ft SamAccountName,Name

		if ( $RCMembers.Count -le 5 ) 
			{
			$RCGroupMessage += "# List of member account in group - $($DLPGroup)"
			$RCGroupMessage += "#========================================================="			
			$RCGroupMessage += $DLPMembers
			$RCGroupMessage += "#========================================================="
			$RCGroupMessage += ""
			}

		if ( $RCMembers.Count -gt 6 ) 
			{
			$RCGroupMessage += "NOTE:  Too many group members to display in report"
			$RCGroupMessage += ""
			}
		}

	#$RCGroupMessage 
	}
	$RCGroupMessage = $RCGroupMessage | out-string


	# Log 
	$Summary = "$RCGroupMessage `n `nDisclaimer:  This daily summary report is to document the manual tasks used by NOSC to check AD and AD Replication health, Pending Reboot Report, Logical Disk errors,Expiring Certificates, Unhealthy Server/Agents, Unhealthy agent workflow/script alerts, and Servers in Maintenance Mode"


	$strCondition -eq "Good"
	$momapi.LogScriptEvent($ScriptName,$EventID,0,"$Summary")


	$Message = "Array execution report completed against AppOwners"
	
	#$bag.AddValue('Result','GoodCondition')
	$bag.AddValue('Message',$Message)
	$bag.AddValue('Summary',$Summary)

	# Return all bags
	$bag


# End of script section
#=================================================================================
#Log an event for script ending and total execution time.
$EndTime = Get-Date
$ScriptTime = ($EndTime - $StartTime).TotalSeconds
$momapi.LogScriptEvent($ScriptName,$EventID,0,"`n Script Completed. `n Script Runtime: ($ScriptTime) seconds.")
#=================================================================================
# End of script
                </ScriptBody>
                <TimeoutSeconds>$Config/TimeoutSeconds$</TimeoutSeconds>
              </WriteAction>
            </MemberModules>
            <Composition>
              <Node ID="PSWA" />
            </Composition>
          </Composite>
        </ModuleImplementation>
        <OutputType>System!System.BaseData</OutputType>
        <InputType>System!System.BaseData</InputType>
      </WriteActionModuleType>
    </ModuleTypes>
    <MonitorTypes>
    </MonitorTypes>
  </TypeDefinitions>
  <Monitoring>
    <Rules>
      <Rule ID="Microsoft.Windows.Server.NEC.AD.Group.Security.EventID4728.Alert.Rule" Enabled="false" Target="MWSAD6D!Microsoft.Windows.Server.2016.AD.DomainControllerRole" ConfirmDelivery="true" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>Alert</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="Windows!Microsoft.Windows.EventProvider">
            <ComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</ComputerName>
            <LogName>Security</LogName>
            <Expression>
              <And>
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="UnsignedInteger">4728</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
                <Expression>
                  <RegExExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">EventDescription</XPathQuery>
                    </ValueExpression>
                    <Operator>ContainsSubstring</Operator>
                    <Pattern>A member was added to a security-enabled global group.</Pattern>
                  </RegExExpression>
                </Expression>
                <Expression>
                  <RegExExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">EventDescription</XPathQuery>
                    </ValueExpression>
                    <Operator>MatchesRegularExpression</Operator>
                    <Pattern>^(.*NGRC NGB Admins.*)|^(.*NGRC EIO Macro Enabled Exception*)|^(.*ngrc VMware View.*)|^(.*GG RC AESS DLPe.*)|^(.*RC_*)|^(.*NG.*wa.*)$</Pattern>
                  </RegExExpression>
                </Expression>
              </And>
            </Expression>
          </DataSource>
        </DataSources>
        <WriteActions>
          <WriteAction ID="Alert" TypeID="Health!System.Health.GenerateAlert">
            <Priority>1</Priority>
            <Severity>1</Severity>
            <AlertName />
            <AlertDescription />
            <AlertOwner />
            <AlertMessageId>$MPElement[Name="Microsoft.Windows.Server.NEC.AD.Group.Security.EventID4728.Alert.Rule.AlertMessage"]$</AlertMessageId>
            <AlertParameters>
              <AlertParameter1>$Data/EventDescription$</AlertParameter1>
            </AlertParameters>
            <Suppression>
              <SuppressionValue>$Data/EventDescription$</SuppressionValue>
            </Suppression>
          </WriteAction>
        </WriteActions>
      </Rule>
      <Rule ID="Microsoft.Windows.Server.NEC.AD.Group.Security.EventID4729.Alert.Rule" Enabled="false" Target="MWSAD6D!Microsoft.Windows.Server.2016.AD.DomainControllerRole" ConfirmDelivery="true" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>Alert</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="Windows!Microsoft.Windows.EventProvider">
            <ComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</ComputerName>
            <LogName>Security</LogName>
            <Expression>
              <And>
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="UnsignedInteger">4729</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
                <Expression>
                  <RegExExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">EventDescription</XPathQuery>
                    </ValueExpression>
                    <Operator>MatchesRegularExpression</Operator>
                    <Pattern>^(.*NGRC NGB Admins.*)|^(.*NGRC EIO Macro Enabled Exception*)|^(.*ngrc VMware View.*)|^(.*GG RC AESS DLPe.*)|^(.*RC_*)|^(.*NG.*wa.*)$</Pattern>
                  </RegExExpression>
                </Expression>
              </And>
            </Expression>
          </DataSource>
        </DataSources>
        <WriteActions>
          <WriteAction ID="Alert" TypeID="Health!System.Health.GenerateAlert">
            <Priority>1</Priority>
            <Severity>1</Severity>
            <AlertName />
            <AlertDescription />
            <AlertOwner />
            <AlertMessageId>$MPElement[Name="Microsoft.Windows.Server.NEC.AD.Group.Security.EventID4729.Alert.Rule.AlertMessage"]$</AlertMessageId>
            <AlertParameters>
              <AlertParameter1>$Data/EventDescription$</AlertParameter1>
            </AlertParameters>
            <Suppression>
              <SuppressionValue>$Data/EventDescription$</SuppressionValue>
            </Suppression>
          </WriteAction>
        </WriteActions>
      </Rule>
      <Rule ID="Microsoft.Windows.Server.NEC.AD.PasswordCheck.Script.Alert.Rule" Enabled="true" Target="SC!Microsoft.SystemCenter.AllManagementServersPool" ConfirmDelivery="true" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>Alert</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="Microsoft.Windows.Server.NEC.AD.PasswordCheck.Script.DataSource">
            <TimeoutSeconds>900</TimeoutSeconds>
          </DataSource>
        </DataSources>
        <WriteActions>
          <WriteAction ID="WA" TypeID="Health!System.Health.GenerateAlert">
            <Priority>1</Priority>
            <Severity>0</Severity>
            <AlertMessageId>$MPElement[Name="Microsoft.Windows.Server.NEC.AD.PasswordCheck.Script.Alert.Rule.AlertMessage"]$</AlertMessageId>
            <AlertParameters>
              <AlertParameter1>$Data/Property[@Name='Message']$</AlertParameter1>
              <AlertParameter2>$Data/Property[@Name='Summary']$</AlertParameter2>
            </AlertParameters>
            <Suppression>
              <SuppressionValue>$Data/Property[@Name='Message']$</SuppressionValue>
            </Suppression>
          </WriteAction>
        </WriteActions>
      </Rule>
      <Rule ID="Microsoft.Windows.Server.NEC.AD.PasswordCheck.Script.Task.Alert.Rule" Enabled="true" Target="SC!Microsoft.SystemCenter.AllManagementServersPool" ConfirmDelivery="true" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>Alert</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="Windows!Microsoft.Windows.EventProvider">
            <LogName>Operations Manager</LogName>
            <Expression>
              <And>
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="UnsignedInteger">606</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">PublisherName</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="String">Health Service Script</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
                <Expression>
                  <RegExExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">EventDescription</XPathQuery>
                    </ValueExpression>
                    <Operator>ContainsSubstring</Operator>
                    <Pattern>Proactive NEC AD Account issues task for date </Pattern>
                  </RegExExpression>
                </Expression>
              </And>
            </Expression>
          </DataSource>
        </DataSources>
        <WriteActions>
          <WriteAction ID="Alert" TypeID="Health!System.Health.GenerateAlert">
            <Priority>1</Priority>
            <Severity>0</Severity>
            <AlertName />
            <AlertDescription />
            <AlertOwner />
            <AlertMessageId>$MPElement[Name="Microsoft.Windows.Server.NEC.AD.PasswordCheck.Script.Task.Alert.Rule.AlertMessage"]$</AlertMessageId>
            <AlertParameters>
              <AlertParameter1>$Data/EventDescription$</AlertParameter1>
            </AlertParameters>
            <Suppression />
          </WriteAction>
        </WriteActions>
      </Rule>
    </Rules>
    <Tasks>
      <Task ID="Microsoft.Windows.Server.AD.PasswordCheck.Task" Accessibility="Public" Enabled="true" Target="SC!Microsoft.SystemCenter.AllManagementServersPool" Timeout="120" Remotable="true">
        <Category>Custom</Category>
        <WriteAction ID="PSWA" TypeID="Microsoft.Windows.Server.NEC.AD.PasswordCheck.Script.WA">
          <TimeoutSeconds>600</TimeoutSeconds>
        </WriteAction>
      </Task>
    </Tasks>
    <Monitors>
    </Monitors>
  </Monitoring>
  <Presentation>
    <StringResources>
      <StringResource ID="Microsoft.Windows.Server.NEC.AD.Group.Security.EventID4728.Alert.Rule.AlertMessage" />
      <StringResource ID="Microsoft.Windows.Server.NEC.AD.Group.Security.EventID4729.Alert.Rule.AlertMessage" />
      <StringResource ID="Microsoft.Windows.Server.NEC.AD.PasswordCheck.Script.Alert.Rule.AlertMessage" />
      <StringResource ID="Microsoft.Windows.Server.NEC.AD.PasswordCheck.Script.Task.Alert.Rule.AlertMessage" />
    </StringResources>
  </Presentation>
  <LanguagePacks>
    <LanguagePack ID="ENU" IsDefault="false">
      <DisplayStrings>
        <DisplayString ElementID="Proactive.Microsoft.Windows.Server.NEC.AD.Account.Password.Customizations">
          <Name>Proactive Microsoft Windows Server NEC AD 2016 Account Password Customizations</Name>
          <Description>
v1.0.0.3  11 Jul 2023 - Added Alert rules for PasswordCheck DS/Task/WA
v1.0.0.1   8 Jun 2023 - Updated rules to include NEC for subscription purposes - Microsoft Windows Server NEC DC Security EventID 472
v1.0.0.0   6 Jun 2023 - Created to check NEC AD OU's, alert on DC Security EventID's 4728, 4729 for NEC RC OU named groups</Description>
        </DisplayString>

        <DisplayString ElementID="Microsoft.Windows.Server.NEC.AD.PasswordCheck.Script.DataSource">
          <Name>Microsoft Windows Server AD PasswordCheck Script DataSource</Name>
        </DisplayString>
        <DisplayString ElementID="Microsoft.Windows.Server.NEC.AD.PasswordCheck.Script.WA">
          <Name>Microsoft Windows Server AD PasswordCheck WA</Name>
        </DisplayString>

        <DisplayString ElementID="Microsoft.Windows.Server.NEC.AD.Group.Security.EventID4728.Alert.Rule">
          <Name>Microsoft Windows Server NEC DC Security EventID 4728 AD Group User add Rule</Name>
          <Description />
        </DisplayString>
        <DisplayString ElementID="Microsoft.Windows.Server.NEC.AD.Group.Security.EventID4728.Alert.Rule.AlertMessage">
          <Name>Microsoft Windows Server NEC DC Security EventID 4728 AD Group User add Rule Alert</Name>
          <Description>{0}</Description>
        </DisplayString>
        <DisplayString ElementID="Microsoft.Windows.Server.NEC.AD.Group.Security.EventID4729.Alert.Rule">
          <Name>Microsoft Windows Server NEC DC Security EventID 4729 AD Group User Remove Rule</Name>
          <Description />
        </DisplayString>
        <DisplayString ElementID="Microsoft.Windows.Server.NEC.AD.Group.Security.EventID4729.Alert.Rule.AlertMessage">
          <Name>Microsoft Windows Server NEC DC Security EventID 4729 AD Group User Remove Rule Alert</Name>
          <Description>{0}</Description>
        </DisplayString>
        <DisplayString ElementID="Microsoft.Windows.Server.NEC.AD.PasswordCheck.Script.Alert.Rule">
          <Name>Microsoft Windows Server NEC AD PasswordCheck AD OU Group check script Rule</Name>
          <Description />
        </DisplayString>
        <DisplayString ElementID="Microsoft.Windows.Server.NEC.AD.PasswordCheck.Script.Alert.Rule.AlertMessage">
          <Name>Microsoft Windows Server NEC AD PasswordCheck AD OU Group check script Rule Alert</Name>
          <Description>{1}</Description>
        </DisplayString>
        <DisplayString ElementID="Microsoft.Windows.Server.NEC.AD.PasswordCheck.Script.Task.Alert.Rule">
          <Name>Microsoft Windows Server NEC AD PasswordCheck AD OU Group check script Task Rule</Name>
          <Description />
        </DisplayString>
        <DisplayString ElementID="Microsoft.Windows.Server.NEC.AD.PasswordCheck.Script.Task.Alert.Rule.AlertMessage">
          <Name>Microsoft Windows Server NEC AD PasswordCheck AD OU Group check script Task Rule Alert</Name>
          <Description>{1}</Description>
        </DisplayString>

        <DisplayString ElementID="Microsoft.Windows.Server.AD.PasswordCheck.Task">
          <Name>Microsoft Windows Server AD PasswordCheck Script Alert Task</Name>
        </DisplayString>
      </DisplayStrings>
    </LanguagePack>
  </LanguagePacks>
</ManagementPack>